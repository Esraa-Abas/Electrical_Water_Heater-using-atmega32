
Electric_Water_Hater.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000311a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000010c  00800060  0000311a  000031ae  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000012  0080016c  0080016c  000032ba  2**0
                  ALLOC
  3 .stab         00003030  00000000  00000000  000032bc  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001b98  00000000  00000000  000062ec  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000001e0  00000000  00000000  00007e84  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000232  00000000  00000000  00008064  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00002891  00000000  00000000  00008296  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001628  00000000  00000000  0000ab27  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000013de  00000000  00000000  0000c14f  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000200  00000000  00000000  0000d530  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000030f  00000000  00000000  0000d730  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00000a56  00000000  00000000  0000da3f  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000e495  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 12 0c 	jmp	0x1824	; 0x1824 <__vector_10>
      2c:	0c 94 b1 0b 	jmp	0x1762	; 0x1762 <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ea e1       	ldi	r30, 0x1A	; 26
      68:	f1 e3       	ldi	r31, 0x31	; 49
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	ac 36       	cpi	r26, 0x6C	; 108
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	ac e6       	ldi	r26, 0x6C	; 108
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	ae 37       	cpi	r26, 0x7E	; 126
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 b5 16 	call	0x2d6a	; 0x2d6a <main>
      8a:	0c 94 8b 18 	jmp	0x3116	; 0x3116 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 25 04 	call	0x84a	; 0x84a <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 e3 04 	call	0x9c6	; 0x9c6 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 e3 04 	call	0x9c6	; 0x9c6 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 d8 17 	jmp	0x2fb0	; 0x2fb0 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e6       	ldi	r26, 0x60	; 96
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 f4 17 	jmp	0x2fe8	; 0x2fe8 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 e4 17 	jmp	0x2fc8	; 0x2fc8 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d4 06 	call	0xda8	; 0xda8 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d4 06 	call	0xda8	; 0xda8 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 ff 05 	call	0xbfe	; 0xbfe <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 00 18 	jmp	0x3000	; 0x3000 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 e4 17 	jmp	0x2fc8	; 0x2fc8 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d4 06 	call	0xda8	; 0xda8 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d4 06 	call	0xda8	; 0xda8 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 ff 05 	call	0xbfe	; 0xbfe <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 00 18 	jmp	0x3000	; 0x3000 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 d8 17 	jmp	0x2fb0	; 0x2fb0 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d4 06 	call	0xda8	; 0xda8 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d4 06 	call	0xda8	; 0xda8 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	80 e6       	ldi	r24, 0x60	; 96
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 ff 05 	call	0xbfe	; 0xbfe <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 f4 17 	jmp	0x2fe8	; 0x2fe8 <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 e0 17 	jmp	0x2fc0	; 0x2fc0 <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d4 06 	call	0xda8	; 0xda8 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d4 06 	call	0xda8	; 0xda8 <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	60 e6       	ldi	r22, 0x60	; 96
     69c:	70 e0       	ldi	r23, 0x00	; 0
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 ff 05 	call	0xbfe	; 0xbfe <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 fc 17 	jmp	0x2ff8	; 0x2ff8 <__epilogue_restores__+0x10>

0000078a <__nesf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 e4 17 	jmp	0x2fc8	; 0x2fc8 <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 d4 06 	call	0xda8	; 0xda8 <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 d4 06 	call	0xda8	; 0xda8 <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__nesf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__nesf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 4c 07 	call	0xe98	; 0xe98 <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__nesf2+0x58>
     7e0:	81 e0       	ldi	r24, 0x01	; 1
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 00 18 	jmp	0x3000	; 0x3000 <__epilogue_restores__+0x18>

000007ea <__gtsf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 e4 17 	jmp	0x2fc8	; 0x2fc8 <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 d4 06 	call	0xda8	; 0xda8 <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 d4 06 	call	0xda8	; 0xda8 <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gtsf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gtsf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 4c 07 	call	0xe98	; 0xe98 <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gtsf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 00 18 	jmp	0x3000	; 0x3000 <__epilogue_restores__+0x18>

0000084a <__gesf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 e4 17 	jmp	0x2fc8	; 0x2fc8 <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 d4 06 	call	0xda8	; 0xda8 <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 d4 06 	call	0xda8	; 0xda8 <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__stack+0x41>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__stack+0x41>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 4c 07 	call	0xe98	; 0xe98 <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__stack+0x43>
     8a0:	8f ef       	ldi	r24, 0xFF	; 255
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 00 18 	jmp	0x3000	; 0x3000 <__epilogue_restores__+0x18>

000008aa <__ltsf2>:
     8aa:	a8 e1       	ldi	r26, 0x18	; 24
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 e4 17 	jmp	0x2fc8	; 0x2fc8 <__prologue_saves__+0x18>
     8b6:	69 83       	std	Y+1, r22	; 0x01
     8b8:	7a 83       	std	Y+2, r23	; 0x02
     8ba:	8b 83       	std	Y+3, r24	; 0x03
     8bc:	9c 83       	std	Y+4, r25	; 0x04
     8be:	2d 83       	std	Y+5, r18	; 0x05
     8c0:	3e 83       	std	Y+6, r19	; 0x06
     8c2:	4f 83       	std	Y+7, r20	; 0x07
     8c4:	58 87       	std	Y+8, r21	; 0x08
     8c6:	89 e0       	ldi	r24, 0x09	; 9
     8c8:	e8 2e       	mov	r14, r24
     8ca:	f1 2c       	mov	r15, r1
     8cc:	ec 0e       	add	r14, r28
     8ce:	fd 1e       	adc	r15, r29
     8d0:	ce 01       	movw	r24, r28
     8d2:	01 96       	adiw	r24, 0x01	; 1
     8d4:	b7 01       	movw	r22, r14
     8d6:	0e 94 d4 06 	call	0xda8	; 0xda8 <__unpack_f>
     8da:	8e 01       	movw	r16, r28
     8dc:	0f 5e       	subi	r16, 0xEF	; 239
     8de:	1f 4f       	sbci	r17, 0xFF	; 255
     8e0:	ce 01       	movw	r24, r28
     8e2:	05 96       	adiw	r24, 0x05	; 5
     8e4:	b8 01       	movw	r22, r16
     8e6:	0e 94 d4 06 	call	0xda8	; 0xda8 <__unpack_f>
     8ea:	89 85       	ldd	r24, Y+9	; 0x09
     8ec:	82 30       	cpi	r24, 0x02	; 2
     8ee:	40 f0       	brcs	.+16     	; 0x900 <__ltsf2+0x56>
     8f0:	89 89       	ldd	r24, Y+17	; 0x11
     8f2:	82 30       	cpi	r24, 0x02	; 2
     8f4:	28 f0       	brcs	.+10     	; 0x900 <__ltsf2+0x56>
     8f6:	c7 01       	movw	r24, r14
     8f8:	b8 01       	movw	r22, r16
     8fa:	0e 94 4c 07 	call	0xe98	; 0xe98 <__fpcmp_parts_f>
     8fe:	01 c0       	rjmp	.+2      	; 0x902 <__ltsf2+0x58>
     900:	81 e0       	ldi	r24, 0x01	; 1
     902:	68 96       	adiw	r28, 0x18	; 24
     904:	e6 e0       	ldi	r30, 0x06	; 6
     906:	0c 94 00 18 	jmp	0x3000	; 0x3000 <__epilogue_restores__+0x18>

0000090a <__floatsisf>:
     90a:	a8 e0       	ldi	r26, 0x08	; 8
     90c:	b0 e0       	ldi	r27, 0x00	; 0
     90e:	eb e8       	ldi	r30, 0x8B	; 139
     910:	f4 e0       	ldi	r31, 0x04	; 4
     912:	0c 94 e1 17 	jmp	0x2fc2	; 0x2fc2 <__prologue_saves__+0x12>
     916:	9b 01       	movw	r18, r22
     918:	ac 01       	movw	r20, r24
     91a:	83 e0       	ldi	r24, 0x03	; 3
     91c:	89 83       	std	Y+1, r24	; 0x01
     91e:	da 01       	movw	r26, r20
     920:	c9 01       	movw	r24, r18
     922:	88 27       	eor	r24, r24
     924:	b7 fd       	sbrc	r27, 7
     926:	83 95       	inc	r24
     928:	99 27       	eor	r25, r25
     92a:	aa 27       	eor	r26, r26
     92c:	bb 27       	eor	r27, r27
     92e:	b8 2e       	mov	r11, r24
     930:	21 15       	cp	r18, r1
     932:	31 05       	cpc	r19, r1
     934:	41 05       	cpc	r20, r1
     936:	51 05       	cpc	r21, r1
     938:	19 f4       	brne	.+6      	; 0x940 <__floatsisf+0x36>
     93a:	82 e0       	ldi	r24, 0x02	; 2
     93c:	89 83       	std	Y+1, r24	; 0x01
     93e:	3a c0       	rjmp	.+116    	; 0x9b4 <__floatsisf+0xaa>
     940:	88 23       	and	r24, r24
     942:	a9 f0       	breq	.+42     	; 0x96e <__floatsisf+0x64>
     944:	20 30       	cpi	r18, 0x00	; 0
     946:	80 e0       	ldi	r24, 0x00	; 0
     948:	38 07       	cpc	r19, r24
     94a:	80 e0       	ldi	r24, 0x00	; 0
     94c:	48 07       	cpc	r20, r24
     94e:	80 e8       	ldi	r24, 0x80	; 128
     950:	58 07       	cpc	r21, r24
     952:	29 f4       	brne	.+10     	; 0x95e <__floatsisf+0x54>
     954:	60 e0       	ldi	r22, 0x00	; 0
     956:	70 e0       	ldi	r23, 0x00	; 0
     958:	80 e0       	ldi	r24, 0x00	; 0
     95a:	9f ec       	ldi	r25, 0xCF	; 207
     95c:	30 c0       	rjmp	.+96     	; 0x9be <__floatsisf+0xb4>
     95e:	ee 24       	eor	r14, r14
     960:	ff 24       	eor	r15, r15
     962:	87 01       	movw	r16, r14
     964:	e2 1a       	sub	r14, r18
     966:	f3 0a       	sbc	r15, r19
     968:	04 0b       	sbc	r16, r20
     96a:	15 0b       	sbc	r17, r21
     96c:	02 c0       	rjmp	.+4      	; 0x972 <__floatsisf+0x68>
     96e:	79 01       	movw	r14, r18
     970:	8a 01       	movw	r16, r20
     972:	8e e1       	ldi	r24, 0x1E	; 30
     974:	c8 2e       	mov	r12, r24
     976:	d1 2c       	mov	r13, r1
     978:	dc 82       	std	Y+4, r13	; 0x04
     97a:	cb 82       	std	Y+3, r12	; 0x03
     97c:	ed 82       	std	Y+5, r14	; 0x05
     97e:	fe 82       	std	Y+6, r15	; 0x06
     980:	0f 83       	std	Y+7, r16	; 0x07
     982:	18 87       	std	Y+8, r17	; 0x08
     984:	c8 01       	movw	r24, r16
     986:	b7 01       	movw	r22, r14
     988:	0e 94 b0 05 	call	0xb60	; 0xb60 <__clzsi2>
     98c:	01 97       	sbiw	r24, 0x01	; 1
     98e:	18 16       	cp	r1, r24
     990:	19 06       	cpc	r1, r25
     992:	84 f4       	brge	.+32     	; 0x9b4 <__floatsisf+0xaa>
     994:	08 2e       	mov	r0, r24
     996:	04 c0       	rjmp	.+8      	; 0x9a0 <__floatsisf+0x96>
     998:	ee 0c       	add	r14, r14
     99a:	ff 1c       	adc	r15, r15
     99c:	00 1f       	adc	r16, r16
     99e:	11 1f       	adc	r17, r17
     9a0:	0a 94       	dec	r0
     9a2:	d2 f7       	brpl	.-12     	; 0x998 <__floatsisf+0x8e>
     9a4:	ed 82       	std	Y+5, r14	; 0x05
     9a6:	fe 82       	std	Y+6, r15	; 0x06
     9a8:	0f 83       	std	Y+7, r16	; 0x07
     9aa:	18 87       	std	Y+8, r17	; 0x08
     9ac:	c8 1a       	sub	r12, r24
     9ae:	d9 0a       	sbc	r13, r25
     9b0:	dc 82       	std	Y+4, r13	; 0x04
     9b2:	cb 82       	std	Y+3, r12	; 0x03
     9b4:	ba 82       	std	Y+2, r11	; 0x02
     9b6:	ce 01       	movw	r24, r28
     9b8:	01 96       	adiw	r24, 0x01	; 1
     9ba:	0e 94 ff 05 	call	0xbfe	; 0xbfe <__pack_f>
     9be:	28 96       	adiw	r28, 0x08	; 8
     9c0:	e9 e0       	ldi	r30, 0x09	; 9
     9c2:	0c 94 fd 17 	jmp	0x2ffa	; 0x2ffa <__epilogue_restores__+0x12>

000009c6 <__fixsfsi>:
     9c6:	ac e0       	ldi	r26, 0x0C	; 12
     9c8:	b0 e0       	ldi	r27, 0x00	; 0
     9ca:	e9 ee       	ldi	r30, 0xE9	; 233
     9cc:	f4 e0       	ldi	r31, 0x04	; 4
     9ce:	0c 94 e8 17 	jmp	0x2fd0	; 0x2fd0 <__prologue_saves__+0x20>
     9d2:	69 83       	std	Y+1, r22	; 0x01
     9d4:	7a 83       	std	Y+2, r23	; 0x02
     9d6:	8b 83       	std	Y+3, r24	; 0x03
     9d8:	9c 83       	std	Y+4, r25	; 0x04
     9da:	ce 01       	movw	r24, r28
     9dc:	01 96       	adiw	r24, 0x01	; 1
     9de:	be 01       	movw	r22, r28
     9e0:	6b 5f       	subi	r22, 0xFB	; 251
     9e2:	7f 4f       	sbci	r23, 0xFF	; 255
     9e4:	0e 94 d4 06 	call	0xda8	; 0xda8 <__unpack_f>
     9e8:	8d 81       	ldd	r24, Y+5	; 0x05
     9ea:	82 30       	cpi	r24, 0x02	; 2
     9ec:	61 f1       	breq	.+88     	; 0xa46 <__fixsfsi+0x80>
     9ee:	82 30       	cpi	r24, 0x02	; 2
     9f0:	50 f1       	brcs	.+84     	; 0xa46 <__fixsfsi+0x80>
     9f2:	84 30       	cpi	r24, 0x04	; 4
     9f4:	21 f4       	brne	.+8      	; 0x9fe <__fixsfsi+0x38>
     9f6:	8e 81       	ldd	r24, Y+6	; 0x06
     9f8:	88 23       	and	r24, r24
     9fa:	51 f1       	breq	.+84     	; 0xa50 <__fixsfsi+0x8a>
     9fc:	2e c0       	rjmp	.+92     	; 0xa5a <__fixsfsi+0x94>
     9fe:	2f 81       	ldd	r18, Y+7	; 0x07
     a00:	38 85       	ldd	r19, Y+8	; 0x08
     a02:	37 fd       	sbrc	r19, 7
     a04:	20 c0       	rjmp	.+64     	; 0xa46 <__fixsfsi+0x80>
     a06:	6e 81       	ldd	r22, Y+6	; 0x06
     a08:	2f 31       	cpi	r18, 0x1F	; 31
     a0a:	31 05       	cpc	r19, r1
     a0c:	1c f0       	brlt	.+6      	; 0xa14 <__fixsfsi+0x4e>
     a0e:	66 23       	and	r22, r22
     a10:	f9 f0       	breq	.+62     	; 0xa50 <__fixsfsi+0x8a>
     a12:	23 c0       	rjmp	.+70     	; 0xa5a <__fixsfsi+0x94>
     a14:	8e e1       	ldi	r24, 0x1E	; 30
     a16:	90 e0       	ldi	r25, 0x00	; 0
     a18:	82 1b       	sub	r24, r18
     a1a:	93 0b       	sbc	r25, r19
     a1c:	29 85       	ldd	r18, Y+9	; 0x09
     a1e:	3a 85       	ldd	r19, Y+10	; 0x0a
     a20:	4b 85       	ldd	r20, Y+11	; 0x0b
     a22:	5c 85       	ldd	r21, Y+12	; 0x0c
     a24:	04 c0       	rjmp	.+8      	; 0xa2e <__fixsfsi+0x68>
     a26:	56 95       	lsr	r21
     a28:	47 95       	ror	r20
     a2a:	37 95       	ror	r19
     a2c:	27 95       	ror	r18
     a2e:	8a 95       	dec	r24
     a30:	d2 f7       	brpl	.-12     	; 0xa26 <__fixsfsi+0x60>
     a32:	66 23       	and	r22, r22
     a34:	b1 f0       	breq	.+44     	; 0xa62 <__fixsfsi+0x9c>
     a36:	50 95       	com	r21
     a38:	40 95       	com	r20
     a3a:	30 95       	com	r19
     a3c:	21 95       	neg	r18
     a3e:	3f 4f       	sbci	r19, 0xFF	; 255
     a40:	4f 4f       	sbci	r20, 0xFF	; 255
     a42:	5f 4f       	sbci	r21, 0xFF	; 255
     a44:	0e c0       	rjmp	.+28     	; 0xa62 <__fixsfsi+0x9c>
     a46:	20 e0       	ldi	r18, 0x00	; 0
     a48:	30 e0       	ldi	r19, 0x00	; 0
     a4a:	40 e0       	ldi	r20, 0x00	; 0
     a4c:	50 e0       	ldi	r21, 0x00	; 0
     a4e:	09 c0       	rjmp	.+18     	; 0xa62 <__fixsfsi+0x9c>
     a50:	2f ef       	ldi	r18, 0xFF	; 255
     a52:	3f ef       	ldi	r19, 0xFF	; 255
     a54:	4f ef       	ldi	r20, 0xFF	; 255
     a56:	5f e7       	ldi	r21, 0x7F	; 127
     a58:	04 c0       	rjmp	.+8      	; 0xa62 <__fixsfsi+0x9c>
     a5a:	20 e0       	ldi	r18, 0x00	; 0
     a5c:	30 e0       	ldi	r19, 0x00	; 0
     a5e:	40 e0       	ldi	r20, 0x00	; 0
     a60:	50 e8       	ldi	r21, 0x80	; 128
     a62:	b9 01       	movw	r22, r18
     a64:	ca 01       	movw	r24, r20
     a66:	2c 96       	adiw	r28, 0x0c	; 12
     a68:	e2 e0       	ldi	r30, 0x02	; 2
     a6a:	0c 94 04 18 	jmp	0x3008	; 0x3008 <__epilogue_restores__+0x20>

00000a6e <__floatunsisf>:
     a6e:	a8 e0       	ldi	r26, 0x08	; 8
     a70:	b0 e0       	ldi	r27, 0x00	; 0
     a72:	ed e3       	ldi	r30, 0x3D	; 61
     a74:	f5 e0       	ldi	r31, 0x05	; 5
     a76:	0c 94 e0 17 	jmp	0x2fc0	; 0x2fc0 <__prologue_saves__+0x10>
     a7a:	7b 01       	movw	r14, r22
     a7c:	8c 01       	movw	r16, r24
     a7e:	61 15       	cp	r22, r1
     a80:	71 05       	cpc	r23, r1
     a82:	81 05       	cpc	r24, r1
     a84:	91 05       	cpc	r25, r1
     a86:	19 f4       	brne	.+6      	; 0xa8e <__floatunsisf+0x20>
     a88:	82 e0       	ldi	r24, 0x02	; 2
     a8a:	89 83       	std	Y+1, r24	; 0x01
     a8c:	60 c0       	rjmp	.+192    	; 0xb4e <__floatunsisf+0xe0>
     a8e:	83 e0       	ldi	r24, 0x03	; 3
     a90:	89 83       	std	Y+1, r24	; 0x01
     a92:	8e e1       	ldi	r24, 0x1E	; 30
     a94:	c8 2e       	mov	r12, r24
     a96:	d1 2c       	mov	r13, r1
     a98:	dc 82       	std	Y+4, r13	; 0x04
     a9a:	cb 82       	std	Y+3, r12	; 0x03
     a9c:	ed 82       	std	Y+5, r14	; 0x05
     a9e:	fe 82       	std	Y+6, r15	; 0x06
     aa0:	0f 83       	std	Y+7, r16	; 0x07
     aa2:	18 87       	std	Y+8, r17	; 0x08
     aa4:	c8 01       	movw	r24, r16
     aa6:	b7 01       	movw	r22, r14
     aa8:	0e 94 b0 05 	call	0xb60	; 0xb60 <__clzsi2>
     aac:	fc 01       	movw	r30, r24
     aae:	31 97       	sbiw	r30, 0x01	; 1
     ab0:	f7 ff       	sbrs	r31, 7
     ab2:	3b c0       	rjmp	.+118    	; 0xb2a <__floatunsisf+0xbc>
     ab4:	22 27       	eor	r18, r18
     ab6:	33 27       	eor	r19, r19
     ab8:	2e 1b       	sub	r18, r30
     aba:	3f 0b       	sbc	r19, r31
     abc:	57 01       	movw	r10, r14
     abe:	68 01       	movw	r12, r16
     ac0:	02 2e       	mov	r0, r18
     ac2:	04 c0       	rjmp	.+8      	; 0xacc <__floatunsisf+0x5e>
     ac4:	d6 94       	lsr	r13
     ac6:	c7 94       	ror	r12
     ac8:	b7 94       	ror	r11
     aca:	a7 94       	ror	r10
     acc:	0a 94       	dec	r0
     ace:	d2 f7       	brpl	.-12     	; 0xac4 <__floatunsisf+0x56>
     ad0:	40 e0       	ldi	r20, 0x00	; 0
     ad2:	50 e0       	ldi	r21, 0x00	; 0
     ad4:	60 e0       	ldi	r22, 0x00	; 0
     ad6:	70 e0       	ldi	r23, 0x00	; 0
     ad8:	81 e0       	ldi	r24, 0x01	; 1
     ada:	90 e0       	ldi	r25, 0x00	; 0
     adc:	a0 e0       	ldi	r26, 0x00	; 0
     ade:	b0 e0       	ldi	r27, 0x00	; 0
     ae0:	04 c0       	rjmp	.+8      	; 0xaea <__floatunsisf+0x7c>
     ae2:	88 0f       	add	r24, r24
     ae4:	99 1f       	adc	r25, r25
     ae6:	aa 1f       	adc	r26, r26
     ae8:	bb 1f       	adc	r27, r27
     aea:	2a 95       	dec	r18
     aec:	d2 f7       	brpl	.-12     	; 0xae2 <__floatunsisf+0x74>
     aee:	01 97       	sbiw	r24, 0x01	; 1
     af0:	a1 09       	sbc	r26, r1
     af2:	b1 09       	sbc	r27, r1
     af4:	8e 21       	and	r24, r14
     af6:	9f 21       	and	r25, r15
     af8:	a0 23       	and	r26, r16
     afa:	b1 23       	and	r27, r17
     afc:	00 97       	sbiw	r24, 0x00	; 0
     afe:	a1 05       	cpc	r26, r1
     b00:	b1 05       	cpc	r27, r1
     b02:	21 f0       	breq	.+8      	; 0xb0c <__floatunsisf+0x9e>
     b04:	41 e0       	ldi	r20, 0x01	; 1
     b06:	50 e0       	ldi	r21, 0x00	; 0
     b08:	60 e0       	ldi	r22, 0x00	; 0
     b0a:	70 e0       	ldi	r23, 0x00	; 0
     b0c:	4a 29       	or	r20, r10
     b0e:	5b 29       	or	r21, r11
     b10:	6c 29       	or	r22, r12
     b12:	7d 29       	or	r23, r13
     b14:	4d 83       	std	Y+5, r20	; 0x05
     b16:	5e 83       	std	Y+6, r21	; 0x06
     b18:	6f 83       	std	Y+7, r22	; 0x07
     b1a:	78 87       	std	Y+8, r23	; 0x08
     b1c:	8e e1       	ldi	r24, 0x1E	; 30
     b1e:	90 e0       	ldi	r25, 0x00	; 0
     b20:	8e 1b       	sub	r24, r30
     b22:	9f 0b       	sbc	r25, r31
     b24:	9c 83       	std	Y+4, r25	; 0x04
     b26:	8b 83       	std	Y+3, r24	; 0x03
     b28:	12 c0       	rjmp	.+36     	; 0xb4e <__floatunsisf+0xe0>
     b2a:	30 97       	sbiw	r30, 0x00	; 0
     b2c:	81 f0       	breq	.+32     	; 0xb4e <__floatunsisf+0xe0>
     b2e:	0e 2e       	mov	r0, r30
     b30:	04 c0       	rjmp	.+8      	; 0xb3a <__floatunsisf+0xcc>
     b32:	ee 0c       	add	r14, r14
     b34:	ff 1c       	adc	r15, r15
     b36:	00 1f       	adc	r16, r16
     b38:	11 1f       	adc	r17, r17
     b3a:	0a 94       	dec	r0
     b3c:	d2 f7       	brpl	.-12     	; 0xb32 <__floatunsisf+0xc4>
     b3e:	ed 82       	std	Y+5, r14	; 0x05
     b40:	fe 82       	std	Y+6, r15	; 0x06
     b42:	0f 83       	std	Y+7, r16	; 0x07
     b44:	18 87       	std	Y+8, r17	; 0x08
     b46:	ce 1a       	sub	r12, r30
     b48:	df 0a       	sbc	r13, r31
     b4a:	dc 82       	std	Y+4, r13	; 0x04
     b4c:	cb 82       	std	Y+3, r12	; 0x03
     b4e:	1a 82       	std	Y+2, r1	; 0x02
     b50:	ce 01       	movw	r24, r28
     b52:	01 96       	adiw	r24, 0x01	; 1
     b54:	0e 94 ff 05 	call	0xbfe	; 0xbfe <__pack_f>
     b58:	28 96       	adiw	r28, 0x08	; 8
     b5a:	ea e0       	ldi	r30, 0x0A	; 10
     b5c:	0c 94 fc 17 	jmp	0x2ff8	; 0x2ff8 <__epilogue_restores__+0x10>

00000b60 <__clzsi2>:
     b60:	ef 92       	push	r14
     b62:	ff 92       	push	r15
     b64:	0f 93       	push	r16
     b66:	1f 93       	push	r17
     b68:	7b 01       	movw	r14, r22
     b6a:	8c 01       	movw	r16, r24
     b6c:	80 e0       	ldi	r24, 0x00	; 0
     b6e:	e8 16       	cp	r14, r24
     b70:	80 e0       	ldi	r24, 0x00	; 0
     b72:	f8 06       	cpc	r15, r24
     b74:	81 e0       	ldi	r24, 0x01	; 1
     b76:	08 07       	cpc	r16, r24
     b78:	80 e0       	ldi	r24, 0x00	; 0
     b7a:	18 07       	cpc	r17, r24
     b7c:	88 f4       	brcc	.+34     	; 0xba0 <__clzsi2+0x40>
     b7e:	8f ef       	ldi	r24, 0xFF	; 255
     b80:	e8 16       	cp	r14, r24
     b82:	f1 04       	cpc	r15, r1
     b84:	01 05       	cpc	r16, r1
     b86:	11 05       	cpc	r17, r1
     b88:	31 f0       	breq	.+12     	; 0xb96 <__clzsi2+0x36>
     b8a:	28 f0       	brcs	.+10     	; 0xb96 <__clzsi2+0x36>
     b8c:	88 e0       	ldi	r24, 0x08	; 8
     b8e:	90 e0       	ldi	r25, 0x00	; 0
     b90:	a0 e0       	ldi	r26, 0x00	; 0
     b92:	b0 e0       	ldi	r27, 0x00	; 0
     b94:	17 c0       	rjmp	.+46     	; 0xbc4 <__clzsi2+0x64>
     b96:	80 e0       	ldi	r24, 0x00	; 0
     b98:	90 e0       	ldi	r25, 0x00	; 0
     b9a:	a0 e0       	ldi	r26, 0x00	; 0
     b9c:	b0 e0       	ldi	r27, 0x00	; 0
     b9e:	12 c0       	rjmp	.+36     	; 0xbc4 <__clzsi2+0x64>
     ba0:	80 e0       	ldi	r24, 0x00	; 0
     ba2:	e8 16       	cp	r14, r24
     ba4:	80 e0       	ldi	r24, 0x00	; 0
     ba6:	f8 06       	cpc	r15, r24
     ba8:	80 e0       	ldi	r24, 0x00	; 0
     baa:	08 07       	cpc	r16, r24
     bac:	81 e0       	ldi	r24, 0x01	; 1
     bae:	18 07       	cpc	r17, r24
     bb0:	28 f0       	brcs	.+10     	; 0xbbc <__clzsi2+0x5c>
     bb2:	88 e1       	ldi	r24, 0x18	; 24
     bb4:	90 e0       	ldi	r25, 0x00	; 0
     bb6:	a0 e0       	ldi	r26, 0x00	; 0
     bb8:	b0 e0       	ldi	r27, 0x00	; 0
     bba:	04 c0       	rjmp	.+8      	; 0xbc4 <__clzsi2+0x64>
     bbc:	80 e1       	ldi	r24, 0x10	; 16
     bbe:	90 e0       	ldi	r25, 0x00	; 0
     bc0:	a0 e0       	ldi	r26, 0x00	; 0
     bc2:	b0 e0       	ldi	r27, 0x00	; 0
     bc4:	20 e2       	ldi	r18, 0x20	; 32
     bc6:	30 e0       	ldi	r19, 0x00	; 0
     bc8:	40 e0       	ldi	r20, 0x00	; 0
     bca:	50 e0       	ldi	r21, 0x00	; 0
     bcc:	28 1b       	sub	r18, r24
     bce:	39 0b       	sbc	r19, r25
     bd0:	4a 0b       	sbc	r20, r26
     bd2:	5b 0b       	sbc	r21, r27
     bd4:	04 c0       	rjmp	.+8      	; 0xbde <__clzsi2+0x7e>
     bd6:	16 95       	lsr	r17
     bd8:	07 95       	ror	r16
     bda:	f7 94       	ror	r15
     bdc:	e7 94       	ror	r14
     bde:	8a 95       	dec	r24
     be0:	d2 f7       	brpl	.-12     	; 0xbd6 <__clzsi2+0x76>
     be2:	f7 01       	movw	r30, r14
     be4:	e8 59       	subi	r30, 0x98	; 152
     be6:	ff 4f       	sbci	r31, 0xFF	; 255
     be8:	80 81       	ld	r24, Z
     bea:	28 1b       	sub	r18, r24
     bec:	31 09       	sbc	r19, r1
     bee:	41 09       	sbc	r20, r1
     bf0:	51 09       	sbc	r21, r1
     bf2:	c9 01       	movw	r24, r18
     bf4:	1f 91       	pop	r17
     bf6:	0f 91       	pop	r16
     bf8:	ff 90       	pop	r15
     bfa:	ef 90       	pop	r14
     bfc:	08 95       	ret

00000bfe <__pack_f>:
     bfe:	df 92       	push	r13
     c00:	ef 92       	push	r14
     c02:	ff 92       	push	r15
     c04:	0f 93       	push	r16
     c06:	1f 93       	push	r17
     c08:	fc 01       	movw	r30, r24
     c0a:	e4 80       	ldd	r14, Z+4	; 0x04
     c0c:	f5 80       	ldd	r15, Z+5	; 0x05
     c0e:	06 81       	ldd	r16, Z+6	; 0x06
     c10:	17 81       	ldd	r17, Z+7	; 0x07
     c12:	d1 80       	ldd	r13, Z+1	; 0x01
     c14:	80 81       	ld	r24, Z
     c16:	82 30       	cpi	r24, 0x02	; 2
     c18:	48 f4       	brcc	.+18     	; 0xc2c <__pack_f+0x2e>
     c1a:	80 e0       	ldi	r24, 0x00	; 0
     c1c:	90 e0       	ldi	r25, 0x00	; 0
     c1e:	a0 e1       	ldi	r26, 0x10	; 16
     c20:	b0 e0       	ldi	r27, 0x00	; 0
     c22:	e8 2a       	or	r14, r24
     c24:	f9 2a       	or	r15, r25
     c26:	0a 2b       	or	r16, r26
     c28:	1b 2b       	or	r17, r27
     c2a:	a5 c0       	rjmp	.+330    	; 0xd76 <__pack_f+0x178>
     c2c:	84 30       	cpi	r24, 0x04	; 4
     c2e:	09 f4       	brne	.+2      	; 0xc32 <__pack_f+0x34>
     c30:	9f c0       	rjmp	.+318    	; 0xd70 <__pack_f+0x172>
     c32:	82 30       	cpi	r24, 0x02	; 2
     c34:	21 f4       	brne	.+8      	; 0xc3e <__pack_f+0x40>
     c36:	ee 24       	eor	r14, r14
     c38:	ff 24       	eor	r15, r15
     c3a:	87 01       	movw	r16, r14
     c3c:	05 c0       	rjmp	.+10     	; 0xc48 <__pack_f+0x4a>
     c3e:	e1 14       	cp	r14, r1
     c40:	f1 04       	cpc	r15, r1
     c42:	01 05       	cpc	r16, r1
     c44:	11 05       	cpc	r17, r1
     c46:	19 f4       	brne	.+6      	; 0xc4e <__pack_f+0x50>
     c48:	e0 e0       	ldi	r30, 0x00	; 0
     c4a:	f0 e0       	ldi	r31, 0x00	; 0
     c4c:	96 c0       	rjmp	.+300    	; 0xd7a <__pack_f+0x17c>
     c4e:	62 81       	ldd	r22, Z+2	; 0x02
     c50:	73 81       	ldd	r23, Z+3	; 0x03
     c52:	9f ef       	ldi	r25, 0xFF	; 255
     c54:	62 38       	cpi	r22, 0x82	; 130
     c56:	79 07       	cpc	r23, r25
     c58:	0c f0       	brlt	.+2      	; 0xc5c <__pack_f+0x5e>
     c5a:	5b c0       	rjmp	.+182    	; 0xd12 <__pack_f+0x114>
     c5c:	22 e8       	ldi	r18, 0x82	; 130
     c5e:	3f ef       	ldi	r19, 0xFF	; 255
     c60:	26 1b       	sub	r18, r22
     c62:	37 0b       	sbc	r19, r23
     c64:	2a 31       	cpi	r18, 0x1A	; 26
     c66:	31 05       	cpc	r19, r1
     c68:	2c f0       	brlt	.+10     	; 0xc74 <__pack_f+0x76>
     c6a:	20 e0       	ldi	r18, 0x00	; 0
     c6c:	30 e0       	ldi	r19, 0x00	; 0
     c6e:	40 e0       	ldi	r20, 0x00	; 0
     c70:	50 e0       	ldi	r21, 0x00	; 0
     c72:	2a c0       	rjmp	.+84     	; 0xcc8 <__pack_f+0xca>
     c74:	b8 01       	movw	r22, r16
     c76:	a7 01       	movw	r20, r14
     c78:	02 2e       	mov	r0, r18
     c7a:	04 c0       	rjmp	.+8      	; 0xc84 <__pack_f+0x86>
     c7c:	76 95       	lsr	r23
     c7e:	67 95       	ror	r22
     c80:	57 95       	ror	r21
     c82:	47 95       	ror	r20
     c84:	0a 94       	dec	r0
     c86:	d2 f7       	brpl	.-12     	; 0xc7c <__pack_f+0x7e>
     c88:	81 e0       	ldi	r24, 0x01	; 1
     c8a:	90 e0       	ldi	r25, 0x00	; 0
     c8c:	a0 e0       	ldi	r26, 0x00	; 0
     c8e:	b0 e0       	ldi	r27, 0x00	; 0
     c90:	04 c0       	rjmp	.+8      	; 0xc9a <__pack_f+0x9c>
     c92:	88 0f       	add	r24, r24
     c94:	99 1f       	adc	r25, r25
     c96:	aa 1f       	adc	r26, r26
     c98:	bb 1f       	adc	r27, r27
     c9a:	2a 95       	dec	r18
     c9c:	d2 f7       	brpl	.-12     	; 0xc92 <__pack_f+0x94>
     c9e:	01 97       	sbiw	r24, 0x01	; 1
     ca0:	a1 09       	sbc	r26, r1
     ca2:	b1 09       	sbc	r27, r1
     ca4:	8e 21       	and	r24, r14
     ca6:	9f 21       	and	r25, r15
     ca8:	a0 23       	and	r26, r16
     caa:	b1 23       	and	r27, r17
     cac:	00 97       	sbiw	r24, 0x00	; 0
     cae:	a1 05       	cpc	r26, r1
     cb0:	b1 05       	cpc	r27, r1
     cb2:	21 f0       	breq	.+8      	; 0xcbc <__pack_f+0xbe>
     cb4:	81 e0       	ldi	r24, 0x01	; 1
     cb6:	90 e0       	ldi	r25, 0x00	; 0
     cb8:	a0 e0       	ldi	r26, 0x00	; 0
     cba:	b0 e0       	ldi	r27, 0x00	; 0
     cbc:	9a 01       	movw	r18, r20
     cbe:	ab 01       	movw	r20, r22
     cc0:	28 2b       	or	r18, r24
     cc2:	39 2b       	or	r19, r25
     cc4:	4a 2b       	or	r20, r26
     cc6:	5b 2b       	or	r21, r27
     cc8:	da 01       	movw	r26, r20
     cca:	c9 01       	movw	r24, r18
     ccc:	8f 77       	andi	r24, 0x7F	; 127
     cce:	90 70       	andi	r25, 0x00	; 0
     cd0:	a0 70       	andi	r26, 0x00	; 0
     cd2:	b0 70       	andi	r27, 0x00	; 0
     cd4:	80 34       	cpi	r24, 0x40	; 64
     cd6:	91 05       	cpc	r25, r1
     cd8:	a1 05       	cpc	r26, r1
     cda:	b1 05       	cpc	r27, r1
     cdc:	39 f4       	brne	.+14     	; 0xcec <__pack_f+0xee>
     cde:	27 ff       	sbrs	r18, 7
     ce0:	09 c0       	rjmp	.+18     	; 0xcf4 <__pack_f+0xf6>
     ce2:	20 5c       	subi	r18, 0xC0	; 192
     ce4:	3f 4f       	sbci	r19, 0xFF	; 255
     ce6:	4f 4f       	sbci	r20, 0xFF	; 255
     ce8:	5f 4f       	sbci	r21, 0xFF	; 255
     cea:	04 c0       	rjmp	.+8      	; 0xcf4 <__pack_f+0xf6>
     cec:	21 5c       	subi	r18, 0xC1	; 193
     cee:	3f 4f       	sbci	r19, 0xFF	; 255
     cf0:	4f 4f       	sbci	r20, 0xFF	; 255
     cf2:	5f 4f       	sbci	r21, 0xFF	; 255
     cf4:	e0 e0       	ldi	r30, 0x00	; 0
     cf6:	f0 e0       	ldi	r31, 0x00	; 0
     cf8:	20 30       	cpi	r18, 0x00	; 0
     cfa:	a0 e0       	ldi	r26, 0x00	; 0
     cfc:	3a 07       	cpc	r19, r26
     cfe:	a0 e0       	ldi	r26, 0x00	; 0
     d00:	4a 07       	cpc	r20, r26
     d02:	a0 e4       	ldi	r26, 0x40	; 64
     d04:	5a 07       	cpc	r21, r26
     d06:	10 f0       	brcs	.+4      	; 0xd0c <__pack_f+0x10e>
     d08:	e1 e0       	ldi	r30, 0x01	; 1
     d0a:	f0 e0       	ldi	r31, 0x00	; 0
     d0c:	79 01       	movw	r14, r18
     d0e:	8a 01       	movw	r16, r20
     d10:	27 c0       	rjmp	.+78     	; 0xd60 <__pack_f+0x162>
     d12:	60 38       	cpi	r22, 0x80	; 128
     d14:	71 05       	cpc	r23, r1
     d16:	64 f5       	brge	.+88     	; 0xd70 <__pack_f+0x172>
     d18:	fb 01       	movw	r30, r22
     d1a:	e1 58       	subi	r30, 0x81	; 129
     d1c:	ff 4f       	sbci	r31, 0xFF	; 255
     d1e:	d8 01       	movw	r26, r16
     d20:	c7 01       	movw	r24, r14
     d22:	8f 77       	andi	r24, 0x7F	; 127
     d24:	90 70       	andi	r25, 0x00	; 0
     d26:	a0 70       	andi	r26, 0x00	; 0
     d28:	b0 70       	andi	r27, 0x00	; 0
     d2a:	80 34       	cpi	r24, 0x40	; 64
     d2c:	91 05       	cpc	r25, r1
     d2e:	a1 05       	cpc	r26, r1
     d30:	b1 05       	cpc	r27, r1
     d32:	39 f4       	brne	.+14     	; 0xd42 <__pack_f+0x144>
     d34:	e7 fe       	sbrs	r14, 7
     d36:	0d c0       	rjmp	.+26     	; 0xd52 <__pack_f+0x154>
     d38:	80 e4       	ldi	r24, 0x40	; 64
     d3a:	90 e0       	ldi	r25, 0x00	; 0
     d3c:	a0 e0       	ldi	r26, 0x00	; 0
     d3e:	b0 e0       	ldi	r27, 0x00	; 0
     d40:	04 c0       	rjmp	.+8      	; 0xd4a <__pack_f+0x14c>
     d42:	8f e3       	ldi	r24, 0x3F	; 63
     d44:	90 e0       	ldi	r25, 0x00	; 0
     d46:	a0 e0       	ldi	r26, 0x00	; 0
     d48:	b0 e0       	ldi	r27, 0x00	; 0
     d4a:	e8 0e       	add	r14, r24
     d4c:	f9 1e       	adc	r15, r25
     d4e:	0a 1f       	adc	r16, r26
     d50:	1b 1f       	adc	r17, r27
     d52:	17 ff       	sbrs	r17, 7
     d54:	05 c0       	rjmp	.+10     	; 0xd60 <__pack_f+0x162>
     d56:	16 95       	lsr	r17
     d58:	07 95       	ror	r16
     d5a:	f7 94       	ror	r15
     d5c:	e7 94       	ror	r14
     d5e:	31 96       	adiw	r30, 0x01	; 1
     d60:	87 e0       	ldi	r24, 0x07	; 7
     d62:	16 95       	lsr	r17
     d64:	07 95       	ror	r16
     d66:	f7 94       	ror	r15
     d68:	e7 94       	ror	r14
     d6a:	8a 95       	dec	r24
     d6c:	d1 f7       	brne	.-12     	; 0xd62 <__pack_f+0x164>
     d6e:	05 c0       	rjmp	.+10     	; 0xd7a <__pack_f+0x17c>
     d70:	ee 24       	eor	r14, r14
     d72:	ff 24       	eor	r15, r15
     d74:	87 01       	movw	r16, r14
     d76:	ef ef       	ldi	r30, 0xFF	; 255
     d78:	f0 e0       	ldi	r31, 0x00	; 0
     d7a:	6e 2f       	mov	r22, r30
     d7c:	67 95       	ror	r22
     d7e:	66 27       	eor	r22, r22
     d80:	67 95       	ror	r22
     d82:	90 2f       	mov	r25, r16
     d84:	9f 77       	andi	r25, 0x7F	; 127
     d86:	d7 94       	ror	r13
     d88:	dd 24       	eor	r13, r13
     d8a:	d7 94       	ror	r13
     d8c:	8e 2f       	mov	r24, r30
     d8e:	86 95       	lsr	r24
     d90:	49 2f       	mov	r20, r25
     d92:	46 2b       	or	r20, r22
     d94:	58 2f       	mov	r21, r24
     d96:	5d 29       	or	r21, r13
     d98:	b7 01       	movw	r22, r14
     d9a:	ca 01       	movw	r24, r20
     d9c:	1f 91       	pop	r17
     d9e:	0f 91       	pop	r16
     da0:	ff 90       	pop	r15
     da2:	ef 90       	pop	r14
     da4:	df 90       	pop	r13
     da6:	08 95       	ret

00000da8 <__unpack_f>:
     da8:	fc 01       	movw	r30, r24
     daa:	db 01       	movw	r26, r22
     dac:	40 81       	ld	r20, Z
     dae:	51 81       	ldd	r21, Z+1	; 0x01
     db0:	22 81       	ldd	r18, Z+2	; 0x02
     db2:	62 2f       	mov	r22, r18
     db4:	6f 77       	andi	r22, 0x7F	; 127
     db6:	70 e0       	ldi	r23, 0x00	; 0
     db8:	22 1f       	adc	r18, r18
     dba:	22 27       	eor	r18, r18
     dbc:	22 1f       	adc	r18, r18
     dbe:	93 81       	ldd	r25, Z+3	; 0x03
     dc0:	89 2f       	mov	r24, r25
     dc2:	88 0f       	add	r24, r24
     dc4:	82 2b       	or	r24, r18
     dc6:	28 2f       	mov	r18, r24
     dc8:	30 e0       	ldi	r19, 0x00	; 0
     dca:	99 1f       	adc	r25, r25
     dcc:	99 27       	eor	r25, r25
     dce:	99 1f       	adc	r25, r25
     dd0:	11 96       	adiw	r26, 0x01	; 1
     dd2:	9c 93       	st	X, r25
     dd4:	11 97       	sbiw	r26, 0x01	; 1
     dd6:	21 15       	cp	r18, r1
     dd8:	31 05       	cpc	r19, r1
     dda:	a9 f5       	brne	.+106    	; 0xe46 <__unpack_f+0x9e>
     ddc:	41 15       	cp	r20, r1
     dde:	51 05       	cpc	r21, r1
     de0:	61 05       	cpc	r22, r1
     de2:	71 05       	cpc	r23, r1
     de4:	11 f4       	brne	.+4      	; 0xdea <__unpack_f+0x42>
     de6:	82 e0       	ldi	r24, 0x02	; 2
     de8:	37 c0       	rjmp	.+110    	; 0xe58 <__unpack_f+0xb0>
     dea:	82 e8       	ldi	r24, 0x82	; 130
     dec:	9f ef       	ldi	r25, 0xFF	; 255
     dee:	13 96       	adiw	r26, 0x03	; 3
     df0:	9c 93       	st	X, r25
     df2:	8e 93       	st	-X, r24
     df4:	12 97       	sbiw	r26, 0x02	; 2
     df6:	9a 01       	movw	r18, r20
     df8:	ab 01       	movw	r20, r22
     dfa:	67 e0       	ldi	r22, 0x07	; 7
     dfc:	22 0f       	add	r18, r18
     dfe:	33 1f       	adc	r19, r19
     e00:	44 1f       	adc	r20, r20
     e02:	55 1f       	adc	r21, r21
     e04:	6a 95       	dec	r22
     e06:	d1 f7       	brne	.-12     	; 0xdfc <__unpack_f+0x54>
     e08:	83 e0       	ldi	r24, 0x03	; 3
     e0a:	8c 93       	st	X, r24
     e0c:	0d c0       	rjmp	.+26     	; 0xe28 <__unpack_f+0x80>
     e0e:	22 0f       	add	r18, r18
     e10:	33 1f       	adc	r19, r19
     e12:	44 1f       	adc	r20, r20
     e14:	55 1f       	adc	r21, r21
     e16:	12 96       	adiw	r26, 0x02	; 2
     e18:	8d 91       	ld	r24, X+
     e1a:	9c 91       	ld	r25, X
     e1c:	13 97       	sbiw	r26, 0x03	; 3
     e1e:	01 97       	sbiw	r24, 0x01	; 1
     e20:	13 96       	adiw	r26, 0x03	; 3
     e22:	9c 93       	st	X, r25
     e24:	8e 93       	st	-X, r24
     e26:	12 97       	sbiw	r26, 0x02	; 2
     e28:	20 30       	cpi	r18, 0x00	; 0
     e2a:	80 e0       	ldi	r24, 0x00	; 0
     e2c:	38 07       	cpc	r19, r24
     e2e:	80 e0       	ldi	r24, 0x00	; 0
     e30:	48 07       	cpc	r20, r24
     e32:	80 e4       	ldi	r24, 0x40	; 64
     e34:	58 07       	cpc	r21, r24
     e36:	58 f3       	brcs	.-42     	; 0xe0e <__unpack_f+0x66>
     e38:	14 96       	adiw	r26, 0x04	; 4
     e3a:	2d 93       	st	X+, r18
     e3c:	3d 93       	st	X+, r19
     e3e:	4d 93       	st	X+, r20
     e40:	5c 93       	st	X, r21
     e42:	17 97       	sbiw	r26, 0x07	; 7
     e44:	08 95       	ret
     e46:	2f 3f       	cpi	r18, 0xFF	; 255
     e48:	31 05       	cpc	r19, r1
     e4a:	79 f4       	brne	.+30     	; 0xe6a <__unpack_f+0xc2>
     e4c:	41 15       	cp	r20, r1
     e4e:	51 05       	cpc	r21, r1
     e50:	61 05       	cpc	r22, r1
     e52:	71 05       	cpc	r23, r1
     e54:	19 f4       	brne	.+6      	; 0xe5c <__unpack_f+0xb4>
     e56:	84 e0       	ldi	r24, 0x04	; 4
     e58:	8c 93       	st	X, r24
     e5a:	08 95       	ret
     e5c:	64 ff       	sbrs	r22, 4
     e5e:	03 c0       	rjmp	.+6      	; 0xe66 <__unpack_f+0xbe>
     e60:	81 e0       	ldi	r24, 0x01	; 1
     e62:	8c 93       	st	X, r24
     e64:	12 c0       	rjmp	.+36     	; 0xe8a <__unpack_f+0xe2>
     e66:	1c 92       	st	X, r1
     e68:	10 c0       	rjmp	.+32     	; 0xe8a <__unpack_f+0xe2>
     e6a:	2f 57       	subi	r18, 0x7F	; 127
     e6c:	30 40       	sbci	r19, 0x00	; 0
     e6e:	13 96       	adiw	r26, 0x03	; 3
     e70:	3c 93       	st	X, r19
     e72:	2e 93       	st	-X, r18
     e74:	12 97       	sbiw	r26, 0x02	; 2
     e76:	83 e0       	ldi	r24, 0x03	; 3
     e78:	8c 93       	st	X, r24
     e7a:	87 e0       	ldi	r24, 0x07	; 7
     e7c:	44 0f       	add	r20, r20
     e7e:	55 1f       	adc	r21, r21
     e80:	66 1f       	adc	r22, r22
     e82:	77 1f       	adc	r23, r23
     e84:	8a 95       	dec	r24
     e86:	d1 f7       	brne	.-12     	; 0xe7c <__unpack_f+0xd4>
     e88:	70 64       	ori	r23, 0x40	; 64
     e8a:	14 96       	adiw	r26, 0x04	; 4
     e8c:	4d 93       	st	X+, r20
     e8e:	5d 93       	st	X+, r21
     e90:	6d 93       	st	X+, r22
     e92:	7c 93       	st	X, r23
     e94:	17 97       	sbiw	r26, 0x07	; 7
     e96:	08 95       	ret

00000e98 <__fpcmp_parts_f>:
     e98:	1f 93       	push	r17
     e9a:	dc 01       	movw	r26, r24
     e9c:	fb 01       	movw	r30, r22
     e9e:	9c 91       	ld	r25, X
     ea0:	92 30       	cpi	r25, 0x02	; 2
     ea2:	08 f4       	brcc	.+2      	; 0xea6 <__fpcmp_parts_f+0xe>
     ea4:	47 c0       	rjmp	.+142    	; 0xf34 <__fpcmp_parts_f+0x9c>
     ea6:	80 81       	ld	r24, Z
     ea8:	82 30       	cpi	r24, 0x02	; 2
     eaa:	08 f4       	brcc	.+2      	; 0xeae <__fpcmp_parts_f+0x16>
     eac:	43 c0       	rjmp	.+134    	; 0xf34 <__fpcmp_parts_f+0x9c>
     eae:	94 30       	cpi	r25, 0x04	; 4
     eb0:	51 f4       	brne	.+20     	; 0xec6 <__fpcmp_parts_f+0x2e>
     eb2:	11 96       	adiw	r26, 0x01	; 1
     eb4:	1c 91       	ld	r17, X
     eb6:	84 30       	cpi	r24, 0x04	; 4
     eb8:	99 f5       	brne	.+102    	; 0xf20 <__fpcmp_parts_f+0x88>
     eba:	81 81       	ldd	r24, Z+1	; 0x01
     ebc:	68 2f       	mov	r22, r24
     ebe:	70 e0       	ldi	r23, 0x00	; 0
     ec0:	61 1b       	sub	r22, r17
     ec2:	71 09       	sbc	r23, r1
     ec4:	3f c0       	rjmp	.+126    	; 0xf44 <__fpcmp_parts_f+0xac>
     ec6:	84 30       	cpi	r24, 0x04	; 4
     ec8:	21 f0       	breq	.+8      	; 0xed2 <__fpcmp_parts_f+0x3a>
     eca:	92 30       	cpi	r25, 0x02	; 2
     ecc:	31 f4       	brne	.+12     	; 0xeda <__fpcmp_parts_f+0x42>
     ece:	82 30       	cpi	r24, 0x02	; 2
     ed0:	b9 f1       	breq	.+110    	; 0xf40 <__fpcmp_parts_f+0xa8>
     ed2:	81 81       	ldd	r24, Z+1	; 0x01
     ed4:	88 23       	and	r24, r24
     ed6:	89 f1       	breq	.+98     	; 0xf3a <__fpcmp_parts_f+0xa2>
     ed8:	2d c0       	rjmp	.+90     	; 0xf34 <__fpcmp_parts_f+0x9c>
     eda:	11 96       	adiw	r26, 0x01	; 1
     edc:	1c 91       	ld	r17, X
     ede:	11 97       	sbiw	r26, 0x01	; 1
     ee0:	82 30       	cpi	r24, 0x02	; 2
     ee2:	f1 f0       	breq	.+60     	; 0xf20 <__fpcmp_parts_f+0x88>
     ee4:	81 81       	ldd	r24, Z+1	; 0x01
     ee6:	18 17       	cp	r17, r24
     ee8:	d9 f4       	brne	.+54     	; 0xf20 <__fpcmp_parts_f+0x88>
     eea:	12 96       	adiw	r26, 0x02	; 2
     eec:	2d 91       	ld	r18, X+
     eee:	3c 91       	ld	r19, X
     ef0:	13 97       	sbiw	r26, 0x03	; 3
     ef2:	82 81       	ldd	r24, Z+2	; 0x02
     ef4:	93 81       	ldd	r25, Z+3	; 0x03
     ef6:	82 17       	cp	r24, r18
     ef8:	93 07       	cpc	r25, r19
     efa:	94 f0       	brlt	.+36     	; 0xf20 <__fpcmp_parts_f+0x88>
     efc:	28 17       	cp	r18, r24
     efe:	39 07       	cpc	r19, r25
     f00:	bc f0       	brlt	.+46     	; 0xf30 <__fpcmp_parts_f+0x98>
     f02:	14 96       	adiw	r26, 0x04	; 4
     f04:	8d 91       	ld	r24, X+
     f06:	9d 91       	ld	r25, X+
     f08:	0d 90       	ld	r0, X+
     f0a:	bc 91       	ld	r27, X
     f0c:	a0 2d       	mov	r26, r0
     f0e:	24 81       	ldd	r18, Z+4	; 0x04
     f10:	35 81       	ldd	r19, Z+5	; 0x05
     f12:	46 81       	ldd	r20, Z+6	; 0x06
     f14:	57 81       	ldd	r21, Z+7	; 0x07
     f16:	28 17       	cp	r18, r24
     f18:	39 07       	cpc	r19, r25
     f1a:	4a 07       	cpc	r20, r26
     f1c:	5b 07       	cpc	r21, r27
     f1e:	18 f4       	brcc	.+6      	; 0xf26 <__fpcmp_parts_f+0x8e>
     f20:	11 23       	and	r17, r17
     f22:	41 f0       	breq	.+16     	; 0xf34 <__fpcmp_parts_f+0x9c>
     f24:	0a c0       	rjmp	.+20     	; 0xf3a <__fpcmp_parts_f+0xa2>
     f26:	82 17       	cp	r24, r18
     f28:	93 07       	cpc	r25, r19
     f2a:	a4 07       	cpc	r26, r20
     f2c:	b5 07       	cpc	r27, r21
     f2e:	40 f4       	brcc	.+16     	; 0xf40 <__fpcmp_parts_f+0xa8>
     f30:	11 23       	and	r17, r17
     f32:	19 f0       	breq	.+6      	; 0xf3a <__fpcmp_parts_f+0xa2>
     f34:	61 e0       	ldi	r22, 0x01	; 1
     f36:	70 e0       	ldi	r23, 0x00	; 0
     f38:	05 c0       	rjmp	.+10     	; 0xf44 <__fpcmp_parts_f+0xac>
     f3a:	6f ef       	ldi	r22, 0xFF	; 255
     f3c:	7f ef       	ldi	r23, 0xFF	; 255
     f3e:	02 c0       	rjmp	.+4      	; 0xf44 <__fpcmp_parts_f+0xac>
     f40:	60 e0       	ldi	r22, 0x00	; 0
     f42:	70 e0       	ldi	r23, 0x00	; 0
     f44:	cb 01       	movw	r24, r22
     f46:	1f 91       	pop	r17
     f48:	08 95       	ret

00000f4a <TWI_enuInit>:
#include"TWI_config.h"

#define F_CPU  1000000UL

ES_t TWI_enuInit(u8 Copy_u8Address)
{
     f4a:	df 93       	push	r29
     f4c:	cf 93       	push	r28
     f4e:	0f 92       	push	r0
     f50:	cd b7       	in	r28, 0x3d	; 61
     f52:	de b7       	in	r29, 0x3e	; 62
     f54:	89 83       	std	Y+1, r24	; 0x01
	#if IIC_MODE ==IIC_MASTER
	//Enable ACKnowlega
	TWCR|=(LOGICAL_ONE<<TWEA);
     f56:	a6 e5       	ldi	r26, 0x56	; 86
     f58:	b0 e0       	ldi	r27, 0x00	; 0
     f5a:	e6 e5       	ldi	r30, 0x56	; 86
     f5c:	f0 e0       	ldi	r31, 0x00	; 0
     f5e:	80 81       	ld	r24, Z
     f60:	80 64       	ori	r24, 0x40	; 64
     f62:	8c 93       	st	X, r24

	//set prescaller bits
	#if TWI_PRES==TWI_PRES01
	TWBR&=~(LOGICAL_ONE<<TWPS0);
     f64:	a0 e2       	ldi	r26, 0x20	; 32
     f66:	b0 e0       	ldi	r27, 0x00	; 0
     f68:	e0 e2       	ldi	r30, 0x20	; 32
     f6a:	f0 e0       	ldi	r31, 0x00	; 0
     f6c:	80 81       	ld	r24, Z
     f6e:	8e 7f       	andi	r24, 0xFE	; 254
     f70:	8c 93       	st	X, r24
	TWBR&=~(LOGICAL_ONE<<TWPS1);
     f72:	a0 e2       	ldi	r26, 0x20	; 32
     f74:	b0 e0       	ldi	r27, 0x00	; 0
     f76:	e0 e2       	ldi	r30, 0x20	; 32
     f78:	f0 e0       	ldi	r31, 0x00	; 0
     f7a:	80 81       	ld	r24, Z
     f7c:	8d 7f       	andi	r24, 0xFD	; 253
     f7e:	8c 93       	st	X, r24

	//only for master, set bit rate using the equation
	TWBR=(u8) BITRATE(TWI_CLOCKSPEED,TWI_PRES01);
     f80:	e0 e2       	ldi	r30, 0x20	; 32
     f82:	f0 e0       	ldi	r31, 0x00	; 0
     f84:	8f ed       	ldi	r24, 0xDF	; 223
     f86:	80 83       	st	Z, r24
	TWBR=(u8) BITRATE(TWI_CLOCKSPEED,TWI_PRES64);

	#endif

	//general call&own address set
	TWAR&=~(LOGICAL_ONE<<TWGCE);
     f88:	a2 e2       	ldi	r26, 0x22	; 34
     f8a:	b0 e0       	ldi	r27, 0x00	; 0
     f8c:	e2 e2       	ldi	r30, 0x22	; 34
     f8e:	f0 e0       	ldi	r31, 0x00	; 0
     f90:	80 81       	ld	r24, Z
     f92:	8e 7f       	andi	r24, 0xFE	; 254
     f94:	8c 93       	st	X, r24

	#if TWI_GENERAL_CALL==TWI_RECOGNIZE_CALL
	TWAR|=(Copy_u8Address<<TWA1)|TWI_RECOGNIZE_CALL;
	#elif TWI_GENERAL_CALL==TWI_NEGLECT_CALL
	TWAR|=(Copy_u8Address<<TWA1)|TWI_NEGLECT_CALL;
     f96:	a2 e2       	ldi	r26, 0x22	; 34
     f98:	b0 e0       	ldi	r27, 0x00	; 0
     f9a:	e2 e2       	ldi	r30, 0x22	; 34
     f9c:	f0 e0       	ldi	r31, 0x00	; 0
     f9e:	80 81       	ld	r24, Z
     fa0:	28 2f       	mov	r18, r24
     fa2:	89 81       	ldd	r24, Y+1	; 0x01
     fa4:	88 2f       	mov	r24, r24
     fa6:	90 e0       	ldi	r25, 0x00	; 0
     fa8:	88 0f       	add	r24, r24
     faa:	99 1f       	adc	r25, r25
     fac:	82 2b       	or	r24, r18
     fae:	8c 93       	st	X, r24
	#endif

	/*Check if the master node will be addressed or not*/
	if(Copy_u8Address == 0)
     fb0:	89 81       	ldd	r24, Y+1	; 0x01
     fb2:	88 23       	and	r24, r24
     fb4:	29 f0       	breq	.+10     	; 0xfc0 <TWI_enuInit+0x76>
		/*Do Nothing*/
	}
	else
	{
		/*Set The Required Address to The Master*/ //bits from 1 to 7
		TWAR = (Copy_u8Address << 1);
     fb6:	e2 e2       	ldi	r30, 0x22	; 34
     fb8:	f0 e0       	ldi	r31, 0x00	; 0
     fba:	89 81       	ldd	r24, Y+1	; 0x01
     fbc:	88 0f       	add	r24, r24
     fbe:	80 83       	st	Z, r24
	}

	//clear flag&enable twi
	TWCR|=(LOGICAL_ONE<<TWINT);
     fc0:	a6 e5       	ldi	r26, 0x56	; 86
     fc2:	b0 e0       	ldi	r27, 0x00	; 0
     fc4:	e6 e5       	ldi	r30, 0x56	; 86
     fc6:	f0 e0       	ldi	r31, 0x00	; 0
     fc8:	80 81       	ld	r24, Z
     fca:	80 68       	ori	r24, 0x80	; 128
     fcc:	8c 93       	st	X, r24

	TWCR|=(LOGICAL_ONE<<TWEN);
     fce:	a6 e5       	ldi	r26, 0x56	; 86
     fd0:	b0 e0       	ldi	r27, 0x00	; 0
     fd2:	e6 e5       	ldi	r30, 0x56	; 86
     fd4:	f0 e0       	ldi	r31, 0x00	; 0
     fd6:	80 81       	ld	r24, Z
     fd8:	84 60       	ori	r24, 0x04	; 4
     fda:	8c 93       	st	X, r24
	TWCR|=(LOGICAL_ONE<<TWEN);
	#endif



	   return ES_OK;
     fdc:	81 e0       	ldi	r24, 0x01	; 1
}
     fde:	0f 90       	pop	r0
     fe0:	cf 91       	pop	r28
     fe2:	df 91       	pop	r29
     fe4:	08 95       	ret

00000fe6 <TWI_enuSendStartConditionWithACK>:


void TWI_enuSendStartConditionWithACK(void)
{
     fe6:	df 93       	push	r29
     fe8:	cf 93       	push	r28
     fea:	cd b7       	in	r28, 0x3d	; 61
     fec:	de b7       	in	r29, 0x3e	; 62
	//TWI_Errorstatus_t Local_ErrorStatus = NoError;

	TWCR |= (1 << TWINT) | (1 << TWSTA) | (1 << TWEN);
     fee:	a6 e5       	ldi	r26, 0x56	; 86
     ff0:	b0 e0       	ldi	r27, 0x00	; 0
     ff2:	e6 e5       	ldi	r30, 0x56	; 86
     ff4:	f0 e0       	ldi	r31, 0x00	; 0
     ff6:	80 81       	ld	r24, Z
     ff8:	84 6a       	ori	r24, 0xA4	; 164
     ffa:	8c 93       	st	X, r24
	//clear flag
	TWCR|=(1<< TWINT);
     ffc:	a6 e5       	ldi	r26, 0x56	; 86
     ffe:	b0 e0       	ldi	r27, 0x00	; 0
    1000:	e6 e5       	ldi	r30, 0x56	; 86
    1002:	f0 e0       	ldi	r31, 0x00	; 0
    1004:	80 81       	ld	r24, Z
    1006:	80 68       	ori	r24, 0x80	; 128
    1008:	8c 93       	st	X, r24

	while(((TWCR>>TWINT)&LOGICAL_ONE)==LOGICLA_ZERO);
    100a:	e6 e5       	ldi	r30, 0x56	; 86
    100c:	f0 e0       	ldi	r31, 0x00	; 0
    100e:	80 81       	ld	r24, Z
    1010:	88 23       	and	r24, r24
    1012:	dc f7       	brge	.-10     	; 0x100a <TWI_enuSendStartConditionWithACK+0x24>
	}


		//return Local_ErrorStatus;

}
    1014:	cf 91       	pop	r28
    1016:	df 91       	pop	r29
    1018:	08 95       	ret

0000101a <TWI_ErrorStatusSendRepeatedStartConditionWithACK>:

void TWI_ErrorStatusSendRepeatedStartConditionWithACK(void)
{
    101a:	df 93       	push	r29
    101c:	cf 93       	push	r28
    101e:	cd b7       	in	r28, 0x3d	; 61
    1020:	de b7       	in	r29, 0x3e	; 62
	//TWI_Errorstatus_t Local_ErrorStatus = NoError;
	// clear INT flag
	// Send Repeated Start Condition
	// Enable TWI
	TWCR |= (1 << TWINT) | (1 <<TWSTA) | (1 << TWEN);
    1022:	a6 e5       	ldi	r26, 0x56	; 86
    1024:	b0 e0       	ldi	r27, 0x00	; 0
    1026:	e6 e5       	ldi	r30, 0x56	; 86
    1028:	f0 e0       	ldi	r31, 0x00	; 0
    102a:	80 81       	ld	r24, Z
    102c:	84 6a       	ori	r24, 0xA4	; 164
    102e:	8c 93       	st	X, r24

	/*Clear The TWINT Flag*/
	//	SET_BIT(TWCR, TWCR_TWINT);

	/*wait until the operation finishes and the flag is raised again*/
	while(GET_BIT(TWCR, TWINT) == 0 );
    1030:	e6 e5       	ldi	r30, 0x56	; 86
    1032:	f0 e0       	ldi	r31, 0x00	; 0
    1034:	80 81       	ld	r24, Z
    1036:	88 23       	and	r24, r24
    1038:	dc f7       	brge	.-10     	; 0x1030 <TWI_ErrorStatusSendRepeatedStartConditionWithACK+0x16>
	else
	{
		/*Do Nothing*/
	}
	//return Local_ErrorStatus;
}
    103a:	cf 91       	pop	r28
    103c:	df 91       	pop	r29
    103e:	08 95       	ret

00001040 <TWI_enuSendSLA>:


void TWI_enuSendSLA(u8 copy_u8Address,u8 copy_u8RW)
{
    1040:	df 93       	push	r29
    1042:	cf 93       	push	r28
    1044:	00 d0       	rcall	.+0      	; 0x1046 <TWI_enuSendSLA+0x6>
    1046:	0f 92       	push	r0
    1048:	cd b7       	in	r28, 0x3d	; 61
    104a:	de b7       	in	r29, 0x3e	; 62
    104c:	89 83       	std	Y+1, r24	; 0x01
    104e:	6a 83       	std	Y+2, r22	; 0x02

	//TWI_Errorstatus_t Local_ErrorStatus = NoError;

	TWDR=(copy_u8Address<<LOGICAL_ONE)|copy_u8RW;
    1050:	e3 e2       	ldi	r30, 0x23	; 35
    1052:	f0 e0       	ldi	r31, 0x00	; 0
    1054:	89 81       	ldd	r24, Y+1	; 0x01
    1056:	88 2f       	mov	r24, r24
    1058:	90 e0       	ldi	r25, 0x00	; 0
    105a:	88 0f       	add	r24, r24
    105c:	99 1f       	adc	r25, r25
    105e:	98 2f       	mov	r25, r24
    1060:	8a 81       	ldd	r24, Y+2	; 0x02
    1062:	89 2b       	or	r24, r25
    1064:	80 83       	st	Z, r24

	//TWSTA must be cleared by software when the START condition has been transmitted.
	TWCR&=~(LOGICAL_ONE<<TWSTA);
    1066:	a6 e5       	ldi	r26, 0x56	; 86
    1068:	b0 e0       	ldi	r27, 0x00	; 0
    106a:	e6 e5       	ldi	r30, 0x56	; 86
    106c:	f0 e0       	ldi	r31, 0x00	; 0
    106e:	80 81       	ld	r24, Z
    1070:	8f 7d       	andi	r24, 0xDF	; 223
    1072:	8c 93       	st	X, r24

	TWCR|=(LOGICAL_ONE<<TWINT);
    1074:	a6 e5       	ldi	r26, 0x56	; 86
    1076:	b0 e0       	ldi	r27, 0x00	; 0
    1078:	e6 e5       	ldi	r30, 0x56	; 86
    107a:	f0 e0       	ldi	r31, 0x00	; 0
    107c:	80 81       	ld	r24, Z
    107e:	80 68       	ori	r24, 0x80	; 128
    1080:	8c 93       	st	X, r24

	while(((TWCR>>TWINT)&LOGICAL_ONE)==LOGICLA_ZERO);
    1082:	e6 e5       	ldi	r30, 0x56	; 86
    1084:	f0 e0       	ldi	r31, 0x00	; 0
    1086:	80 81       	ld	r24, Z
    1088:	88 23       	and	r24, r24
    108a:	dc f7       	brge	.-10     	; 0x1082 <TWI_enuSendSLA+0x42>

	if (copy_u8RW==0)
    108c:	8a 81       	ldd	r24, Y+2	; 0x02
    108e:	88 23       	and	r24, r24
    1090:	09 f0       	breq	.+2      	; 0x1094 <TWI_enuSendSLA+0x54>
		{
			//Local_ErrorStatus = SlaveAddressWithWriteError;
		}
	}

	else if (copy_u8RW==1)
    1092:	8a 81       	ldd	r24, Y+2	; 0x02
			//Local_ErrorStatus = SlaveAddressWithReadError;
		}
	}

	//return Local_ErrorStatus;
}
    1094:	0f 90       	pop	r0
    1096:	0f 90       	pop	r0
    1098:	0f 90       	pop	r0
    109a:	cf 91       	pop	r28
    109c:	df 91       	pop	r29
    109e:	08 95       	ret

000010a0 <TWI_enuWriteData>:


void TWI_enuWriteData(u8 copy_u8Data)
{
    10a0:	df 93       	push	r29
    10a2:	cf 93       	push	r28
    10a4:	0f 92       	push	r0
    10a6:	cd b7       	in	r28, 0x3d	; 61
    10a8:	de b7       	in	r29, 0x3e	; 62
    10aa:	89 83       	std	Y+1, r24	; 0x01
	//TWI_Errorstatus_t Local_ErrorStatus = NoError;

	//Load DATA into TWDR Register.
	TWDR=copy_u8Data;
    10ac:	e3 e2       	ldi	r30, 0x23	; 35
    10ae:	f0 e0       	ldi	r31, 0x00	; 0
    10b0:	89 81       	ldd	r24, Y+1	; 0x01
    10b2:	80 83       	st	Z, r24

	//Clear TWINT bit in TWCR to start transmission of data
	TWCR|=(LOGICAL_ONE<<TWINT);
    10b4:	a6 e5       	ldi	r26, 0x56	; 86
    10b6:	b0 e0       	ldi	r27, 0x00	; 0
    10b8:	e6 e5       	ldi	r30, 0x56	; 86
    10ba:	f0 e0       	ldi	r31, 0x00	; 0
    10bc:	80 81       	ld	r24, Z
    10be:	80 68       	ori	r24, 0x80	; 128
    10c0:	8c 93       	st	X, r24

	//Wait for TWINT Flag set. This indicates that the DATA has been transmitted
	while(((TWCR>>TWINT)&LOGICAL_ONE)==LOGICLA_ZERO);
    10c2:	e6 e5       	ldi	r30, 0x56	; 86
    10c4:	f0 e0       	ldi	r31, 0x00	; 0
    10c6:	80 81       	ld	r24, Z
    10c8:	88 23       	and	r24, r24
    10ca:	dc f7       	brge	.-10     	; 0x10c2 <TWI_enuWriteData+0x22>
	}

	#endif

	//return Local_ErrorStatus;
}
    10cc:	0f 90       	pop	r0
    10ce:	cf 91       	pop	r28
    10d0:	df 91       	pop	r29
    10d2:	08 95       	ret

000010d4 <TWI_enuRecieveData>:


///there are options - use if (sc) &if (M/S)&if(Ack/ not ack) then read
//another option in all func is to add a para to return sc in
void TWI_enuRecieveData(u8 *copy_u8Data,u8 copy_u8ACK)
{
    10d4:	df 93       	push	r29
    10d6:	cf 93       	push	r28
    10d8:	00 d0       	rcall	.+0      	; 0x10da <TWI_enuRecieveData+0x6>
    10da:	00 d0       	rcall	.+0      	; 0x10dc <TWI_enuRecieveData+0x8>
    10dc:	0f 92       	push	r0
    10de:	cd b7       	in	r28, 0x3d	; 61
    10e0:	de b7       	in	r29, 0x3e	; 62
    10e2:	9a 83       	std	Y+2, r25	; 0x02
    10e4:	89 83       	std	Y+1, r24	; 0x01
    10e6:	6b 83       	std	Y+3, r22	; 0x03

	//TWI_Errorstatus_t Local_ErrorStatus = NoError;

	switch(copy_u8ACK)
    10e8:	8b 81       	ldd	r24, Y+3	; 0x03
    10ea:	28 2f       	mov	r18, r24
    10ec:	30 e0       	ldi	r19, 0x00	; 0
    10ee:	3d 83       	std	Y+5, r19	; 0x05
    10f0:	2c 83       	std	Y+4, r18	; 0x04
    10f2:	8c 81       	ldd	r24, Y+4	; 0x04
    10f4:	9d 81       	ldd	r25, Y+5	; 0x05
    10f6:	00 97       	sbiw	r24, 0x00	; 0
    10f8:	69 f0       	breq	.+26     	; 0x1114 <TWI_enuRecieveData+0x40>
    10fa:	2c 81       	ldd	r18, Y+4	; 0x04
    10fc:	3d 81       	ldd	r19, Y+5	; 0x05
    10fe:	21 30       	cpi	r18, 0x01	; 1
    1100:	31 05       	cpc	r19, r1
    1102:	79 f4       	brne	.+30     	; 0x1122 <TWI_enuRecieveData+0x4e>
	{
		case TWI_ACK:
			TWCR|=(LOGICAL_ONE<<TWINT)| (LOGICAL_ONE<<TWEA);
    1104:	a6 e5       	ldi	r26, 0x56	; 86
    1106:	b0 e0       	ldi	r27, 0x00	; 0
    1108:	e6 e5       	ldi	r30, 0x56	; 86
    110a:	f0 e0       	ldi	r31, 0x00	; 0
    110c:	80 81       	ld	r24, Z
    110e:	80 6c       	ori	r24, 0xC0	; 192
    1110:	8c 93       	st	X, r24
    1112:	07 c0       	rjmp	.+14     	; 0x1122 <TWI_enuRecieveData+0x4e>
			break;
		case TWI_NACK:
			TWCR|=(LOGICAL_ONE<<TWINT);
    1114:	a6 e5       	ldi	r26, 0x56	; 86
    1116:	b0 e0       	ldi	r27, 0x00	; 0
    1118:	e6 e5       	ldi	r30, 0x56	; 86
    111a:	f0 e0       	ldi	r31, 0x00	; 0
    111c:	80 81       	ld	r24, Z
    111e:	80 68       	ori	r24, 0x80	; 128
    1120:	8c 93       	st	X, r24
			break;
	}

	//WAIT ON FALG UNTIL DATA RECEIVED
	while( ( (TWCR>>TWINT) &LOGICAL_ONE ) == LOGICLA_ZERO);
    1122:	e6 e5       	ldi	r30, 0x56	; 86
    1124:	f0 e0       	ldi	r31, 0x00	; 0
    1126:	80 81       	ld	r24, Z
    1128:	88 23       	and	r24, r24
    112a:	dc f7       	brge	.-10     	; 0x1122 <TWI_enuRecieveData+0x4e>

	if((TWSR & STATUS_BIT_MASK) != MSTR_RD_BYTE_WITH_ACK)
    112c:	e1 e2       	ldi	r30, 0x21	; 33
    112e:	f0 e0       	ldi	r31, 0x00	; 0
    1130:	80 81       	ld	r24, Z
    1132:	88 2f       	mov	r24, r24
    1134:	90 e0       	ldi	r25, 0x00	; 0
    1136:	88 7f       	andi	r24, 0xF8	; 248
    1138:	90 70       	andi	r25, 0x00	; 0
    113a:	80 35       	cpi	r24, 0x50	; 80
    113c:	91 05       	cpc	r25, r1
    113e:	31 f4       	brne	.+12     	; 0x114c <TWI_enuRecieveData+0x78>
		//Local_ErrorStatus = MasterReadByteWithACKError;
	}
	else
	{
		/*Read The Received Data*/
		*copy_u8Data = TWDR;
    1140:	e3 e2       	ldi	r30, 0x23	; 35
    1142:	f0 e0       	ldi	r31, 0x00	; 0
    1144:	80 81       	ld	r24, Z
    1146:	e9 81       	ldd	r30, Y+1	; 0x01
    1148:	fa 81       	ldd	r31, Y+2	; 0x02
    114a:	80 83       	st	Z, r24
	}

		//return Local_ErrorStatus;
}
    114c:	0f 90       	pop	r0
    114e:	0f 90       	pop	r0
    1150:	0f 90       	pop	r0
    1152:	0f 90       	pop	r0
    1154:	0f 90       	pop	r0
    1156:	cf 91       	pop	r28
    1158:	df 91       	pop	r29
    115a:	08 95       	ret

0000115c <TWI_enuCheckAddress>:


ES_t TWI_enuCheckAddress(void)
{
    115c:	df 93       	push	r29
    115e:	cf 93       	push	r28
    1160:	0f 92       	push	r0
    1162:	cd b7       	in	r28, 0x3d	; 61
    1164:	de b7       	in	r29, 0x3e	; 62
	TWCR|=(LOGICAL_ONE<<TWEA);
    1166:	a6 e5       	ldi	r26, 0x56	; 86
    1168:	b0 e0       	ldi	r27, 0x00	; 0
    116a:	e6 e5       	ldi	r30, 0x56	; 86
    116c:	f0 e0       	ldi	r31, 0x00	; 0
    116e:	80 81       	ld	r24, Z
    1170:	80 64       	ori	r24, 0x40	; 64
    1172:	8c 93       	st	X, r24
	TWCR|=(LOGICAL_ONE<<TWINT);
    1174:	a6 e5       	ldi	r26, 0x56	; 86
    1176:	b0 e0       	ldi	r27, 0x00	; 0
    1178:	e6 e5       	ldi	r30, 0x56	; 86
    117a:	f0 e0       	ldi	r31, 0x00	; 0
    117c:	80 81       	ld	r24, Z
    117e:	80 68       	ori	r24, 0x80	; 128
    1180:	8c 93       	st	X, r24
	while(((TWCR>>TWINT)&LOGICAL_ONE)==LOGICLA_ZERO);
    1182:	e6 e5       	ldi	r30, 0x56	; 86
    1184:	f0 e0       	ldi	r31, 0x00	; 0
    1186:	80 81       	ld	r24, Z
    1188:	88 23       	and	r24, r24
    118a:	dc f7       	brge	.-10     	; 0x1182 <TWI_enuCheckAddress+0x26>
	//CHECK SC OR RETURN IT!
}
    118c:	0f 90       	pop	r0
    118e:	cf 91       	pop	r28
    1190:	df 91       	pop	r29
    1192:	08 95       	ret

00001194 <TWI_enuStopCondition>:


ES_t TWI_enuStopCondition(void)
{
    1194:	df 93       	push	r29
    1196:	cf 93       	push	r28
    1198:	0f 92       	push	r0
    119a:	cd b7       	in	r28, 0x3d	; 61
    119c:	de b7       	in	r29, 0x3e	; 62
	TWCR |= (LOGICAL_ONE<<TWSTO);
    119e:	a6 e5       	ldi	r26, 0x56	; 86
    11a0:	b0 e0       	ldi	r27, 0x00	; 0
    11a2:	e6 e5       	ldi	r30, 0x56	; 86
    11a4:	f0 e0       	ldi	r31, 0x00	; 0
    11a6:	80 81       	ld	r24, Z
    11a8:	80 61       	ori	r24, 0x10	; 16
    11aa:	8c 93       	st	X, r24
	//clear the flag to execute this action
	TWCR |= (LOGICAL_ONE<<TWINT);
    11ac:	a6 e5       	ldi	r26, 0x56	; 86
    11ae:	b0 e0       	ldi	r27, 0x00	; 0
    11b0:	e6 e5       	ldi	r30, 0x56	; 86
    11b2:	f0 e0       	ldi	r31, 0x00	; 0
    11b4:	80 81       	ld	r24, Z
    11b6:	80 68       	ori	r24, 0x80	; 128
    11b8:	8c 93       	st	X, r24
}
    11ba:	0f 90       	pop	r0
    11bc:	cf 91       	pop	r28
    11be:	df 91       	pop	r29
    11c0:	08 95       	ret

000011c2 <Timer0_enuInit>:
void (*TIMER0_OVF_CallBack)(void)= NULL;
void (*TIMER0_CTC_CallBack)(void)= NULL;


ES_t Timer0_enuInit()
{
    11c2:	df 93       	push	r29
    11c4:	cf 93       	push	r28
    11c6:	cd b7       	in	r28, 0x3d	; 61
    11c8:	de b7       	in	r29, 0x3e	; 62
#if TIMER0_PRESCALER==TIMER0_STOP

#elif TIMER0_PRESCALER==TIMER0_SCALER_1
	TCCR0|=(masking_bit<<CS00);
    11ca:	a3 e5       	ldi	r26, 0x53	; 83
    11cc:	b0 e0       	ldi	r27, 0x00	; 0
    11ce:	e3 e5       	ldi	r30, 0x53	; 83
    11d0:	f0 e0       	ldi	r31, 0x00	; 0
    11d2:	80 81       	ld	r24, Z
    11d4:	81 60       	ori	r24, 0x01	; 1
    11d6:	8c 93       	st	X, r24
#else
	#error"Attention!!, OC0_PIN state is wrong or the mode is not CTC...."
	#endif

#endif
	return ES_OK;
    11d8:	81 e0       	ldi	r24, 0x01	; 1
}
    11da:	cf 91       	pop	r28
    11dc:	df 91       	pop	r29
    11de:	08 95       	ret

000011e0 <Timer0_enuSetPreload>:

ES_t Timer0_enuSetPreload(u8 copy_u8preload)
{
    11e0:	df 93       	push	r29
    11e2:	cf 93       	push	r28
    11e4:	00 d0       	rcall	.+0      	; 0x11e6 <Timer0_enuSetPreload+0x6>
    11e6:	cd b7       	in	r28, 0x3d	; 61
    11e8:	de b7       	in	r29, 0x3e	; 62
    11ea:	89 83       	std	Y+1, r24	; 0x01
	TIMER0_VOIDPRELOAD(copy_u8preload);
    11ec:	e2 e5       	ldi	r30, 0x52	; 82
    11ee:	f0 e0       	ldi	r31, 0x00	; 0
    11f0:	89 81       	ldd	r24, Y+1	; 0x01
    11f2:	80 83       	st	Z, r24
	//return ES_OK;
}
    11f4:	0f 90       	pop	r0
    11f6:	0f 90       	pop	r0
    11f8:	cf 91       	pop	r28
    11fa:	df 91       	pop	r29
    11fc:	08 95       	ret

000011fe <Timer0_enuSetCTC_Value>:


ES_t Timer0_enuSetCTC_Value(u8 Copy_u8CTC_Value)
{
    11fe:	df 93       	push	r29
    1200:	cf 93       	push	r28
    1202:	00 d0       	rcall	.+0      	; 0x1204 <Timer0_enuSetCTC_Value+0x6>
    1204:	cd b7       	in	r28, 0x3d	; 61
    1206:	de b7       	in	r29, 0x3e	; 62
    1208:	89 83       	std	Y+1, r24	; 0x01
	TIMER0_VOIDSETCTC(Copy_u8CTC_Value);
    120a:	ec e5       	ldi	r30, 0x5C	; 92
    120c:	f0 e0       	ldi	r31, 0x00	; 0
    120e:	89 81       	ldd	r24, Y+1	; 0x01
    1210:	80 83       	st	Z, r24
	//return ES_OK;
}
    1212:	0f 90       	pop	r0
    1214:	0f 90       	pop	r0
    1216:	cf 91       	pop	r28
    1218:	df 91       	pop	r29
    121a:	08 95       	ret

0000121c <Timer0_enuAsysncDelay>:




ES_t Timer0_enuAsysncDelay(int copy_ms)
{
    121c:	df 93       	push	r29
    121e:	cf 93       	push	r28
    1220:	cd b7       	in	r28, 0x3d	; 61
    1222:	de b7       	in	r29, 0x3e	; 62
    1224:	2d 97       	sbiw	r28, 0x0d	; 13
    1226:	0f b6       	in	r0, 0x3f	; 63
    1228:	f8 94       	cli
    122a:	de bf       	out	0x3e, r29	; 62
    122c:	0f be       	out	0x3f, r0	; 63
    122e:	cd bf       	out	0x3d, r28	; 61
    1230:	9c 87       	std	Y+12, r25	; 0x0c
    1232:	8b 87       	std	Y+11, r24	; 0x0b
	if(TIMER0_MODE==TIMER0_Normal)
	{
		//(TIMER0_PRESCALER==TIMER0_SCALER_1||TIMER0_PRESCALER==TIMER0_SCALER_8)&&
	    float local_ovf_t= (float)TIMER0_OVF_COUNTS * ((float)TIMER0_PRESCALER/TIMER0_F_CPU);
    1234:	8d eb       	ldi	r24, 0xBD	; 189
    1236:	97 e3       	ldi	r25, 0x37	; 55
    1238:	a6 e8       	ldi	r26, 0x86	; 134
    123a:	b9 e3       	ldi	r27, 0x39	; 57
    123c:	8f 83       	std	Y+7, r24	; 0x07
    123e:	98 87       	std	Y+8, r25	; 0x08
    1240:	a9 87       	std	Y+9, r26	; 0x09
    1242:	ba 87       	std	Y+10, r27	; 0x0a
		float local_ovf_num= copy_ms/local_ovf_t;
    1244:	8b 85       	ldd	r24, Y+11	; 0x0b
    1246:	9c 85       	ldd	r25, Y+12	; 0x0c
    1248:	aa 27       	eor	r26, r26
    124a:	97 fd       	sbrc	r25, 7
    124c:	a0 95       	com	r26
    124e:	ba 2f       	mov	r27, r26
    1250:	bc 01       	movw	r22, r24
    1252:	cd 01       	movw	r24, r26
    1254:	0e 94 85 04 	call	0x90a	; 0x90a <__floatsisf>
    1258:	dc 01       	movw	r26, r24
    125a:	cb 01       	movw	r24, r22
    125c:	bc 01       	movw	r22, r24
    125e:	cd 01       	movw	r24, r26
    1260:	2f 81       	ldd	r18, Y+7	; 0x07
    1262:	38 85       	ldd	r19, Y+8	; 0x08
    1264:	49 85       	ldd	r20, Y+9	; 0x09
    1266:	5a 85       	ldd	r21, Y+10	; 0x0a
    1268:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    126c:	dc 01       	movw	r26, r24
    126e:	cb 01       	movw	r24, r22
    1270:	8b 83       	std	Y+3, r24	; 0x03
    1272:	9c 83       	std	Y+4, r25	; 0x04
    1274:	ad 83       	std	Y+5, r26	; 0x05
    1276:	be 83       	std	Y+6, r27	; 0x06
		u8_OVF_num=(int)local_ovf_num;
    1278:	6b 81       	ldd	r22, Y+3	; 0x03
    127a:	7c 81       	ldd	r23, Y+4	; 0x04
    127c:	8d 81       	ldd	r24, Y+5	; 0x05
    127e:	9e 81       	ldd	r25, Y+6	; 0x06
    1280:	0e 94 e3 04 	call	0x9c6	; 0x9c6 <__fixsfsi>
    1284:	dc 01       	movw	r26, r24
    1286:	cb 01       	movw	r24, r22
    1288:	aa 27       	eor	r26, r26
    128a:	97 fd       	sbrc	r25, 7
    128c:	a0 95       	com	r26
    128e:	ba 2f       	mov	r27, r26
    1290:	80 93 6c 01 	sts	0x016C, r24
    1294:	90 93 6d 01 	sts	0x016D, r25
    1298:	a0 93 6e 01 	sts	0x016E, r26
    129c:	b0 93 6f 01 	sts	0x016F, r27
		if(local_ovf_num-(int)local_ovf_num!=0.0)
    12a0:	6b 81       	ldd	r22, Y+3	; 0x03
    12a2:	7c 81       	ldd	r23, Y+4	; 0x04
    12a4:	8d 81       	ldd	r24, Y+5	; 0x05
    12a6:	9e 81       	ldd	r25, Y+6	; 0x06
    12a8:	0e 94 e3 04 	call	0x9c6	; 0x9c6 <__fixsfsi>
    12ac:	dc 01       	movw	r26, r24
    12ae:	cb 01       	movw	r24, r22
    12b0:	aa 27       	eor	r26, r26
    12b2:	97 fd       	sbrc	r25, 7
    12b4:	a0 95       	com	r26
    12b6:	ba 2f       	mov	r27, r26
    12b8:	bc 01       	movw	r22, r24
    12ba:	cd 01       	movw	r24, r26
    12bc:	0e 94 85 04 	call	0x90a	; 0x90a <__floatsisf>
    12c0:	9b 01       	movw	r18, r22
    12c2:	ac 01       	movw	r20, r24
    12c4:	6b 81       	ldd	r22, Y+3	; 0x03
    12c6:	7c 81       	ldd	r23, Y+4	; 0x04
    12c8:	8d 81       	ldd	r24, Y+5	; 0x05
    12ca:	9e 81       	ldd	r25, Y+6	; 0x06
    12cc:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
    12d0:	dc 01       	movw	r26, r24
    12d2:	cb 01       	movw	r24, r22
    12d4:	bc 01       	movw	r22, r24
    12d6:	cd 01       	movw	r24, r26
    12d8:	20 e0       	ldi	r18, 0x00	; 0
    12da:	30 e0       	ldi	r19, 0x00	; 0
    12dc:	40 e0       	ldi	r20, 0x00	; 0
    12de:	50 e0       	ldi	r21, 0x00	; 0
    12e0:	0e 94 c5 03 	call	0x78a	; 0x78a <__nesf2>
    12e4:	88 23       	and	r24, r24
    12e6:	09 f4       	brne	.+2      	; 0x12ea <Timer0_enuAsysncDelay+0xce>
    12e8:	5c c0       	rjmp	.+184    	; 0x13a2 <Timer0_enuAsysncDelay+0x186>
		{
			//int int_ovf_num=(int)ovf_num+1;
			int preload=TIMER0_OVF_COUNTS-((local_ovf_num-(int)local_ovf_num)*256);
    12ea:	6b 81       	ldd	r22, Y+3	; 0x03
    12ec:	7c 81       	ldd	r23, Y+4	; 0x04
    12ee:	8d 81       	ldd	r24, Y+5	; 0x05
    12f0:	9e 81       	ldd	r25, Y+6	; 0x06
    12f2:	0e 94 e3 04 	call	0x9c6	; 0x9c6 <__fixsfsi>
    12f6:	dc 01       	movw	r26, r24
    12f8:	cb 01       	movw	r24, r22
    12fa:	aa 27       	eor	r26, r26
    12fc:	97 fd       	sbrc	r25, 7
    12fe:	a0 95       	com	r26
    1300:	ba 2f       	mov	r27, r26
    1302:	bc 01       	movw	r22, r24
    1304:	cd 01       	movw	r24, r26
    1306:	0e 94 85 04 	call	0x90a	; 0x90a <__floatsisf>
    130a:	9b 01       	movw	r18, r22
    130c:	ac 01       	movw	r20, r24
    130e:	6b 81       	ldd	r22, Y+3	; 0x03
    1310:	7c 81       	ldd	r23, Y+4	; 0x04
    1312:	8d 81       	ldd	r24, Y+5	; 0x05
    1314:	9e 81       	ldd	r25, Y+6	; 0x06
    1316:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
    131a:	dc 01       	movw	r26, r24
    131c:	cb 01       	movw	r24, r22
    131e:	bc 01       	movw	r22, r24
    1320:	cd 01       	movw	r24, r26
    1322:	20 e0       	ldi	r18, 0x00	; 0
    1324:	30 e0       	ldi	r19, 0x00	; 0
    1326:	40 e8       	ldi	r20, 0x80	; 128
    1328:	53 ec       	ldi	r21, 0xC3	; 195
    132a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    132e:	dc 01       	movw	r26, r24
    1330:	cb 01       	movw	r24, r22
    1332:	bc 01       	movw	r22, r24
    1334:	cd 01       	movw	r24, r26
    1336:	20 e0       	ldi	r18, 0x00	; 0
    1338:	30 e0       	ldi	r19, 0x00	; 0
    133a:	40 e8       	ldi	r20, 0x80	; 128
    133c:	53 e4       	ldi	r21, 0x43	; 67
    133e:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <__addsf3>
    1342:	dc 01       	movw	r26, r24
    1344:	cb 01       	movw	r24, r22
    1346:	bc 01       	movw	r22, r24
    1348:	cd 01       	movw	r24, r26
    134a:	0e 94 e3 04 	call	0x9c6	; 0x9c6 <__fixsfsi>
    134e:	dc 01       	movw	r26, r24
    1350:	cb 01       	movw	r24, r22
    1352:	9a 83       	std	Y+2, r25	; 0x02
    1354:	89 83       	std	Y+1, r24	; 0x01
			u8_OVF_num=ceil(local_ovf_num)+1;
    1356:	8b 81       	ldd	r24, Y+3	; 0x03
    1358:	9c 81       	ldd	r25, Y+4	; 0x04
    135a:	ad 81       	ldd	r26, Y+5	; 0x05
    135c:	be 81       	ldd	r27, Y+6	; 0x06
    135e:	bc 01       	movw	r22, r24
    1360:	cd 01       	movw	r24, r26
    1362:	0e 94 0f 18 	call	0x301e	; 0x301e <ceil>
    1366:	dc 01       	movw	r26, r24
    1368:	cb 01       	movw	r24, r22
    136a:	bc 01       	movw	r22, r24
    136c:	cd 01       	movw	r24, r26
    136e:	20 e0       	ldi	r18, 0x00	; 0
    1370:	30 e0       	ldi	r19, 0x00	; 0
    1372:	40 e8       	ldi	r20, 0x80	; 128
    1374:	5f e3       	ldi	r21, 0x3F	; 63
    1376:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <__addsf3>
    137a:	dc 01       	movw	r26, r24
    137c:	cb 01       	movw	r24, r22
    137e:	bc 01       	movw	r22, r24
    1380:	cd 01       	movw	r24, r26
    1382:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1386:	dc 01       	movw	r26, r24
    1388:	cb 01       	movw	r24, r22
    138a:	80 93 6c 01 	sts	0x016C, r24
    138e:	90 93 6d 01 	sts	0x016D, r25
    1392:	a0 93 6e 01 	sts	0x016E, r26
    1396:	b0 93 6f 01 	sts	0x016F, r27
			TIMER0_VIOD_SET_PRELOAD((u8)preload);
    139a:	e2 e5       	ldi	r30, 0x52	; 82
    139c:	f0 e0       	ldi	r31, 0x00	; 0
    139e:	89 81       	ldd	r24, Y+1	; 0x01
    13a0:	80 83       	st	Z, r24
		#warning "To take high accuracy on Delay function, Choose OVF mode and one or eight prescaler";\
		 "OR CTC mode , 64 prescaler and OCR0 = 124"
	}


}
    13a2:	2d 96       	adiw	r28, 0x0d	; 13
    13a4:	0f b6       	in	r0, 0x3f	; 63
    13a6:	f8 94       	cli
    13a8:	de bf       	out	0x3e, r29	; 62
    13aa:	0f be       	out	0x3f, r0	; 63
    13ac:	cd bf       	out	0x3d, r28	; 61
    13ae:	cf 91       	pop	r28
    13b0:	df 91       	pop	r29
    13b2:	08 95       	ret

000013b4 <TIMER0_enuGeneratePWM>:


ES_t TIMER0_enuGeneratePWM(int Copy_u8DutyCycle)
{
    13b4:	df 93       	push	r29
    13b6:	cf 93       	push	r28
    13b8:	00 d0       	rcall	.+0      	; 0x13ba <TIMER0_enuGeneratePWM+0x6>
    13ba:	0f 92       	push	r0
    13bc:	cd b7       	in	r28, 0x3d	; 61
    13be:	de b7       	in	r29, 0x3e	; 62
    13c0:	9a 83       	std	Y+2, r25	; 0x02
    13c2:	89 83       	std	Y+1, r24	; 0x01
#else
	//#error"Attention!!, OC0_PIN state is wrong or the mode is not Fast PWM...."
	#endif
}

}
    13c4:	0f 90       	pop	r0
    13c6:	0f 90       	pop	r0
    13c8:	0f 90       	pop	r0
    13ca:	cf 91       	pop	r28
    13cc:	df 91       	pop	r29
    13ce:	08 95       	ret

000013d0 <Timer0_enuSyncDlay>:

//

ES_t Timer0_enuSyncDlay(int copy_ms)
{
    13d0:	ef 92       	push	r14
    13d2:	ff 92       	push	r15
    13d4:	0f 93       	push	r16
    13d6:	1f 93       	push	r17
    13d8:	df 93       	push	r29
    13da:	cf 93       	push	r28
    13dc:	cd b7       	in	r28, 0x3d	; 61
    13de:	de b7       	in	r29, 0x3e	; 62
    13e0:	61 97       	sbiw	r28, 0x11	; 17
    13e2:	0f b6       	in	r0, 0x3f	; 63
    13e4:	f8 94       	cli
    13e6:	de bf       	out	0x3e, r29	; 62
    13e8:	0f be       	out	0x3f, r0	; 63
    13ea:	cd bf       	out	0x3d, r28	; 61
    13ec:	98 8b       	std	Y+16, r25	; 0x10
    13ee:	8f 87       	std	Y+15, r24	; 0x0f
	    float ttick=TIMER0_PRESCALER/TIMER0_F_CPU;
    13f0:	8d eb       	ldi	r24, 0xBD	; 189
    13f2:	97 e3       	ldi	r25, 0x37	; 55
    13f4:	a6 e8       	ldi	r26, 0x86	; 134
    13f6:	b5 e3       	ldi	r27, 0x35	; 53
    13f8:	8b 87       	std	Y+11, r24	; 0x0b
    13fa:	9c 87       	std	Y+12, r25	; 0x0c
    13fc:	ad 87       	std	Y+13, r26	; 0x0d
    13fe:	be 87       	std	Y+14, r27	; 0x0e
		float tmaxdelay=TIMER0_OVF_COUNTS*ttick;  //ovf real time
    1400:	6b 85       	ldd	r22, Y+11	; 0x0b
    1402:	7c 85       	ldd	r23, Y+12	; 0x0c
    1404:	8d 85       	ldd	r24, Y+13	; 0x0d
    1406:	9e 85       	ldd	r25, Y+14	; 0x0e
    1408:	20 e0       	ldi	r18, 0x00	; 0
    140a:	30 e0       	ldi	r19, 0x00	; 0
    140c:	40 e8       	ldi	r20, 0x80	; 128
    140e:	53 e4       	ldi	r21, 0x43	; 67
    1410:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1414:	dc 01       	movw	r26, r24
    1416:	cb 01       	movw	r24, r22
    1418:	8f 83       	std	Y+7, r24	; 0x07
    141a:	98 87       	std	Y+8, r25	; 0x08
    141c:	a9 87       	std	Y+9, r26	; 0x09
    141e:	ba 87       	std	Y+10, r27	; 0x0a
		char nof,preload;
		if(copy_ms<tmaxdelay)
    1420:	8f 85       	ldd	r24, Y+15	; 0x0f
    1422:	98 89       	ldd	r25, Y+16	; 0x10
    1424:	aa 27       	eor	r26, r26
    1426:	97 fd       	sbrc	r25, 7
    1428:	a0 95       	com	r26
    142a:	ba 2f       	mov	r27, r26
    142c:	bc 01       	movw	r22, r24
    142e:	cd 01       	movw	r24, r26
    1430:	0e 94 85 04 	call	0x90a	; 0x90a <__floatsisf>
    1434:	dc 01       	movw	r26, r24
    1436:	cb 01       	movw	r24, r22
    1438:	bc 01       	movw	r22, r24
    143a:	cd 01       	movw	r24, r26
    143c:	2f 81       	ldd	r18, Y+7	; 0x07
    143e:	38 85       	ldd	r19, Y+8	; 0x08
    1440:	49 85       	ldd	r20, Y+9	; 0x09
    1442:	5a 85       	ldd	r21, Y+10	; 0x0a
    1444:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    1448:	88 23       	and	r24, r24
    144a:	a4 f5       	brge	.+104    	; 0x14b4 <Timer0_enuSyncDlay+0xe4>
		{
			nof=1;
    144c:	81 e0       	ldi	r24, 0x01	; 1
    144e:	8e 83       	std	Y+6, r24	; 0x06
			preload=TIMER0_OVF_COUNTS-(((float)copy_ms/tmaxdelay)*(float)TIMER0_OVF_COUNTS);//(tmaxdelay-copy_ms)/ttick;
    1450:	8f 85       	ldd	r24, Y+15	; 0x0f
    1452:	98 89       	ldd	r25, Y+16	; 0x10
    1454:	aa 27       	eor	r26, r26
    1456:	97 fd       	sbrc	r25, 7
    1458:	a0 95       	com	r26
    145a:	ba 2f       	mov	r27, r26
    145c:	bc 01       	movw	r22, r24
    145e:	cd 01       	movw	r24, r26
    1460:	0e 94 85 04 	call	0x90a	; 0x90a <__floatsisf>
    1464:	dc 01       	movw	r26, r24
    1466:	cb 01       	movw	r24, r22
    1468:	bc 01       	movw	r22, r24
    146a:	cd 01       	movw	r24, r26
    146c:	2f 81       	ldd	r18, Y+7	; 0x07
    146e:	38 85       	ldd	r19, Y+8	; 0x08
    1470:	49 85       	ldd	r20, Y+9	; 0x09
    1472:	5a 85       	ldd	r21, Y+10	; 0x0a
    1474:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    1478:	dc 01       	movw	r26, r24
    147a:	cb 01       	movw	r24, r22
    147c:	bc 01       	movw	r22, r24
    147e:	cd 01       	movw	r24, r26
    1480:	20 e0       	ldi	r18, 0x00	; 0
    1482:	30 e0       	ldi	r19, 0x00	; 0
    1484:	40 e8       	ldi	r20, 0x80	; 128
    1486:	53 ec       	ldi	r21, 0xC3	; 195
    1488:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    148c:	dc 01       	movw	r26, r24
    148e:	cb 01       	movw	r24, r22
    1490:	bc 01       	movw	r22, r24
    1492:	cd 01       	movw	r24, r26
    1494:	20 e0       	ldi	r18, 0x00	; 0
    1496:	30 e0       	ldi	r19, 0x00	; 0
    1498:	40 e8       	ldi	r20, 0x80	; 128
    149a:	53 e4       	ldi	r21, 0x43	; 67
    149c:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <__addsf3>
    14a0:	dc 01       	movw	r26, r24
    14a2:	cb 01       	movw	r24, r22
    14a4:	bc 01       	movw	r22, r24
    14a6:	cd 01       	movw	r24, r26
    14a8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    14ac:	dc 01       	movw	r26, r24
    14ae:	cb 01       	movw	r24, r22
    14b0:	8d 83       	std	Y+5, r24	; 0x05
    14b2:	9c c0       	rjmp	.+312    	; 0x15ec <Timer0_enuSyncDlay+0x21c>
		}
		else if(copy_ms==(int)tmaxdelay)
    14b4:	6f 81       	ldd	r22, Y+7	; 0x07
    14b6:	78 85       	ldd	r23, Y+8	; 0x08
    14b8:	89 85       	ldd	r24, Y+9	; 0x09
    14ba:	9a 85       	ldd	r25, Y+10	; 0x0a
    14bc:	0e 94 e3 04 	call	0x9c6	; 0x9c6 <__fixsfsi>
    14c0:	dc 01       	movw	r26, r24
    14c2:	cb 01       	movw	r24, r22
    14c4:	9c 01       	movw	r18, r24
    14c6:	8f 85       	ldd	r24, Y+15	; 0x0f
    14c8:	98 89       	ldd	r25, Y+16	; 0x10
    14ca:	28 17       	cp	r18, r24
    14cc:	39 07       	cpc	r19, r25
    14ce:	21 f4       	brne	.+8      	; 0x14d8 <Timer0_enuSyncDlay+0x108>
		{
			nof=1;
    14d0:	81 e0       	ldi	r24, 0x01	; 1
    14d2:	8e 83       	std	Y+6, r24	; 0x06
			preload=0;
    14d4:	1d 82       	std	Y+5, r1	; 0x05
    14d6:	8a c0       	rjmp	.+276    	; 0x15ec <Timer0_enuSyncDlay+0x21c>
		}
		else
		{
			nof=ceil((float)copy_ms/tmaxdelay);
    14d8:	8f 85       	ldd	r24, Y+15	; 0x0f
    14da:	98 89       	ldd	r25, Y+16	; 0x10
    14dc:	aa 27       	eor	r26, r26
    14de:	97 fd       	sbrc	r25, 7
    14e0:	a0 95       	com	r26
    14e2:	ba 2f       	mov	r27, r26
    14e4:	bc 01       	movw	r22, r24
    14e6:	cd 01       	movw	r24, r26
    14e8:	0e 94 85 04 	call	0x90a	; 0x90a <__floatsisf>
    14ec:	dc 01       	movw	r26, r24
    14ee:	cb 01       	movw	r24, r22
    14f0:	bc 01       	movw	r22, r24
    14f2:	cd 01       	movw	r24, r26
    14f4:	2f 81       	ldd	r18, Y+7	; 0x07
    14f6:	38 85       	ldd	r19, Y+8	; 0x08
    14f8:	49 85       	ldd	r20, Y+9	; 0x09
    14fa:	5a 85       	ldd	r21, Y+10	; 0x0a
    14fc:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    1500:	dc 01       	movw	r26, r24
    1502:	cb 01       	movw	r24, r22
    1504:	bc 01       	movw	r22, r24
    1506:	cd 01       	movw	r24, r26
    1508:	0e 94 0f 18 	call	0x301e	; 0x301e <ceil>
    150c:	dc 01       	movw	r26, r24
    150e:	cb 01       	movw	r24, r22
    1510:	bc 01       	movw	r22, r24
    1512:	cd 01       	movw	r24, r26
    1514:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1518:	dc 01       	movw	r26, r24
    151a:	cb 01       	movw	r24, r22
    151c:	8e 83       	std	Y+6, r24	; 0x06
			float fraction =((float)copy_ms/tmaxdelay)-((int)(float)copy_ms/tmaxdelay);
    151e:	8f 85       	ldd	r24, Y+15	; 0x0f
    1520:	98 89       	ldd	r25, Y+16	; 0x10
    1522:	aa 27       	eor	r26, r26
    1524:	97 fd       	sbrc	r25, 7
    1526:	a0 95       	com	r26
    1528:	ba 2f       	mov	r27, r26
    152a:	bc 01       	movw	r22, r24
    152c:	cd 01       	movw	r24, r26
    152e:	0e 94 85 04 	call	0x90a	; 0x90a <__floatsisf>
    1532:	dc 01       	movw	r26, r24
    1534:	cb 01       	movw	r24, r22
    1536:	bc 01       	movw	r22, r24
    1538:	cd 01       	movw	r24, r26
    153a:	2f 81       	ldd	r18, Y+7	; 0x07
    153c:	38 85       	ldd	r19, Y+8	; 0x08
    153e:	49 85       	ldd	r20, Y+9	; 0x09
    1540:	5a 85       	ldd	r21, Y+10	; 0x0a
    1542:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    1546:	dc 01       	movw	r26, r24
    1548:	cb 01       	movw	r24, r22
    154a:	7c 01       	movw	r14, r24
    154c:	8d 01       	movw	r16, r26
    154e:	8f 85       	ldd	r24, Y+15	; 0x0f
    1550:	98 89       	ldd	r25, Y+16	; 0x10
    1552:	aa 27       	eor	r26, r26
    1554:	97 fd       	sbrc	r25, 7
    1556:	a0 95       	com	r26
    1558:	ba 2f       	mov	r27, r26
    155a:	bc 01       	movw	r22, r24
    155c:	cd 01       	movw	r24, r26
    155e:	0e 94 85 04 	call	0x90a	; 0x90a <__floatsisf>
    1562:	dc 01       	movw	r26, r24
    1564:	cb 01       	movw	r24, r22
    1566:	bc 01       	movw	r22, r24
    1568:	cd 01       	movw	r24, r26
    156a:	0e 94 e3 04 	call	0x9c6	; 0x9c6 <__fixsfsi>
    156e:	dc 01       	movw	r26, r24
    1570:	cb 01       	movw	r24, r22
    1572:	aa 27       	eor	r26, r26
    1574:	97 fd       	sbrc	r25, 7
    1576:	a0 95       	com	r26
    1578:	ba 2f       	mov	r27, r26
    157a:	bc 01       	movw	r22, r24
    157c:	cd 01       	movw	r24, r26
    157e:	0e 94 85 04 	call	0x90a	; 0x90a <__floatsisf>
    1582:	dc 01       	movw	r26, r24
    1584:	cb 01       	movw	r24, r22
    1586:	bc 01       	movw	r22, r24
    1588:	cd 01       	movw	r24, r26
    158a:	2f 81       	ldd	r18, Y+7	; 0x07
    158c:	38 85       	ldd	r19, Y+8	; 0x08
    158e:	49 85       	ldd	r20, Y+9	; 0x09
    1590:	5a 85       	ldd	r21, Y+10	; 0x0a
    1592:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    1596:	dc 01       	movw	r26, r24
    1598:	cb 01       	movw	r24, r22
    159a:	9c 01       	movw	r18, r24
    159c:	ad 01       	movw	r20, r26
    159e:	c8 01       	movw	r24, r16
    15a0:	b7 01       	movw	r22, r14
    15a2:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
    15a6:	dc 01       	movw	r26, r24
    15a8:	cb 01       	movw	r24, r22
    15aa:	89 83       	std	Y+1, r24	; 0x01
    15ac:	9a 83       	std	Y+2, r25	; 0x02
    15ae:	ab 83       	std	Y+3, r26	; 0x03
    15b0:	bc 83       	std	Y+4, r27	; 0x04
			preload=TIMER0_OVF_COUNTS-(fraction*(float)TIMER0_OVF_COUNTS);
    15b2:	69 81       	ldd	r22, Y+1	; 0x01
    15b4:	7a 81       	ldd	r23, Y+2	; 0x02
    15b6:	8b 81       	ldd	r24, Y+3	; 0x03
    15b8:	9c 81       	ldd	r25, Y+4	; 0x04
    15ba:	20 e0       	ldi	r18, 0x00	; 0
    15bc:	30 e0       	ldi	r19, 0x00	; 0
    15be:	40 e8       	ldi	r20, 0x80	; 128
    15c0:	53 ec       	ldi	r21, 0xC3	; 195
    15c2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    15c6:	dc 01       	movw	r26, r24
    15c8:	cb 01       	movw	r24, r22
    15ca:	bc 01       	movw	r22, r24
    15cc:	cd 01       	movw	r24, r26
    15ce:	20 e0       	ldi	r18, 0x00	; 0
    15d0:	30 e0       	ldi	r19, 0x00	; 0
    15d2:	40 e8       	ldi	r20, 0x80	; 128
    15d4:	53 e4       	ldi	r21, 0x43	; 67
    15d6:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <__addsf3>
    15da:	dc 01       	movw	r26, r24
    15dc:	cb 01       	movw	r24, r22
    15de:	bc 01       	movw	r22, r24
    15e0:	cd 01       	movw	r24, r26
    15e2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    15e6:	dc 01       	movw	r26, r24
    15e8:	cb 01       	movw	r24, r22
    15ea:	8d 83       	std	Y+5, r24	; 0x05
					//TIMER0_OVF_COUNTS-(copy_ms/ttick)/nof;
		}
		TIMER0_VIOD_SET_PRELOAD(0);
    15ec:	e2 e5       	ldi	r30, 0x52	; 82
    15ee:	f0 e0       	ldi	r31, 0x00	; 0
    15f0:	10 82       	st	Z, r1
		TIMER0_VIOD_SET_PRELOAD(preload);
    15f2:	e2 e5       	ldi	r30, 0x52	; 82
    15f4:	f0 e0       	ldi	r31, 0x00	; 0
    15f6:	8d 81       	ldd	r24, Y+5	; 0x05
    15f8:	80 83       	st	Z, r24
    15fa:	13 c0       	rjmp	.+38     	; 0x1622 <Timer0_enuSyncDlay+0x252>
		while(nof>0)
		{
			while(((TIFR>>0)&1)==0);
    15fc:	e8 e5       	ldi	r30, 0x58	; 88
    15fe:	f0 e0       	ldi	r31, 0x00	; 0
    1600:	80 81       	ld	r24, Z
    1602:	88 2f       	mov	r24, r24
    1604:	90 e0       	ldi	r25, 0x00	; 0
    1606:	81 70       	andi	r24, 0x01	; 1
    1608:	90 70       	andi	r25, 0x00	; 0
    160a:	00 97       	sbiw	r24, 0x00	; 0
    160c:	b9 f3       	breq	.-18     	; 0x15fc <Timer0_enuSyncDlay+0x22c>
			nof--;
    160e:	8e 81       	ldd	r24, Y+6	; 0x06
    1610:	81 50       	subi	r24, 0x01	; 1
    1612:	8e 83       	std	Y+6, r24	; 0x06
			TIFR|=(1<<0);
    1614:	a8 e5       	ldi	r26, 0x58	; 88
    1616:	b0 e0       	ldi	r27, 0x00	; 0
    1618:	e8 e5       	ldi	r30, 0x58	; 88
    161a:	f0 e0       	ldi	r31, 0x00	; 0
    161c:	80 81       	ld	r24, Z
    161e:	81 60       	ori	r24, 0x01	; 1
    1620:	8c 93       	st	X, r24
			preload=TIMER0_OVF_COUNTS-(fraction*(float)TIMER0_OVF_COUNTS);
					//TIMER0_OVF_COUNTS-(copy_ms/ttick)/nof;
		}
		TIMER0_VIOD_SET_PRELOAD(0);
		TIMER0_VIOD_SET_PRELOAD(preload);
		while(nof>0)
    1622:	8e 81       	ldd	r24, Y+6	; 0x06
    1624:	88 23       	and	r24, r24
    1626:	51 f7       	brne	.-44     	; 0x15fc <Timer0_enuSyncDlay+0x22c>
		{
			while(((TIFR>>0)&1)==0);
			nof--;
			TIFR|=(1<<0);
		}
}
    1628:	61 96       	adiw	r28, 0x11	; 17
    162a:	0f b6       	in	r0, 0x3f	; 63
    162c:	f8 94       	cli
    162e:	de bf       	out	0x3e, r29	; 62
    1630:	0f be       	out	0x3f, r0	; 63
    1632:	cd bf       	out	0x3d, r28	; 61
    1634:	cf 91       	pop	r28
    1636:	df 91       	pop	r29
    1638:	1f 91       	pop	r17
    163a:	0f 91       	pop	r16
    163c:	ff 90       	pop	r15
    163e:	ef 90       	pop	r14
    1640:	08 95       	ret

00001642 <TIMER0_voidEnableCTC_Interrupt>:

void TIMER0_voidEnableCTC_Interrupt(void)
{
    1642:	df 93       	push	r29
    1644:	cf 93       	push	r28
    1646:	cd b7       	in	r28, 0x3d	; 61
    1648:	de b7       	in	r29, 0x3e	; 62
	TIMSK|=(masking_bit<<OCIE0);
    164a:	a9 e5       	ldi	r26, 0x59	; 89
    164c:	b0 e0       	ldi	r27, 0x00	; 0
    164e:	e9 e5       	ldi	r30, 0x59	; 89
    1650:	f0 e0       	ldi	r31, 0x00	; 0
    1652:	80 81       	ld	r24, Z
    1654:	82 60       	ori	r24, 0x02	; 2
    1656:	8c 93       	st	X, r24
	TIMSK&=~(masking_bit<<TOIE0);
    1658:	a9 e5       	ldi	r26, 0x59	; 89
    165a:	b0 e0       	ldi	r27, 0x00	; 0
    165c:	e9 e5       	ldi	r30, 0x59	; 89
    165e:	f0 e0       	ldi	r31, 0x00	; 0
    1660:	80 81       	ld	r24, Z
    1662:	8e 7f       	andi	r24, 0xFE	; 254
    1664:	8c 93       	st	X, r24
}
    1666:	cf 91       	pop	r28
    1668:	df 91       	pop	r29
    166a:	08 95       	ret

0000166c <TIMER0_enuEnableOVF_Interrupt>:


ES_t TIMER0_enuEnableOVF_Interrupt(void)
{
    166c:	df 93       	push	r29
    166e:	cf 93       	push	r28
    1670:	0f 92       	push	r0
    1672:	cd b7       	in	r28, 0x3d	; 61
    1674:	de b7       	in	r29, 0x3e	; 62
	TIMSK|=(masking_bit<<TOIE0);
    1676:	a9 e5       	ldi	r26, 0x59	; 89
    1678:	b0 e0       	ldi	r27, 0x00	; 0
    167a:	e9 e5       	ldi	r30, 0x59	; 89
    167c:	f0 e0       	ldi	r31, 0x00	; 0
    167e:	80 81       	ld	r24, Z
    1680:	81 60       	ori	r24, 0x01	; 1
    1682:	8c 93       	st	X, r24
	TIMSK&=~(masking_bit<<OCIE0);
    1684:	a9 e5       	ldi	r26, 0x59	; 89
    1686:	b0 e0       	ldi	r27, 0x00	; 0
    1688:	e9 e5       	ldi	r30, 0x59	; 89
    168a:	f0 e0       	ldi	r31, 0x00	; 0
    168c:	80 81       	ld	r24, Z
    168e:	8d 7f       	andi	r24, 0xFD	; 253
    1690:	8c 93       	st	X, r24
}
    1692:	0f 90       	pop	r0
    1694:	cf 91       	pop	r28
    1696:	df 91       	pop	r29
    1698:	08 95       	ret

0000169a <TIMER_voidEnable_GI>:


void TIMER_voidEnable_GI()
{
    169a:	df 93       	push	r29
    169c:	cf 93       	push	r28
    169e:	cd b7       	in	r28, 0x3d	; 61
    16a0:	de b7       	in	r29, 0x3e	; 62
	SREG|=(masking_bit<<GI);
    16a2:	af e5       	ldi	r26, 0x5F	; 95
    16a4:	b0 e0       	ldi	r27, 0x00	; 0
    16a6:	ef e5       	ldi	r30, 0x5F	; 95
    16a8:	f0 e0       	ldi	r31, 0x00	; 0
    16aa:	80 81       	ld	r24, Z
    16ac:	80 68       	ori	r24, 0x80	; 128
    16ae:	8c 93       	st	X, r24
}
    16b0:	cf 91       	pop	r28
    16b2:	df 91       	pop	r29
    16b4:	08 95       	ret

000016b6 <TIMER_voidDisable_GI>:

void TIMER_voidDisable_GI()
{
    16b6:	df 93       	push	r29
    16b8:	cf 93       	push	r28
    16ba:	cd b7       	in	r28, 0x3d	; 61
    16bc:	de b7       	in	r29, 0x3e	; 62
	SREG&=~(masking_bit<<GI);
    16be:	af e5       	ldi	r26, 0x5F	; 95
    16c0:	b0 e0       	ldi	r27, 0x00	; 0
    16c2:	ef e5       	ldi	r30, 0x5F	; 95
    16c4:	f0 e0       	ldi	r31, 0x00	; 0
    16c6:	80 81       	ld	r24, Z
    16c8:	8f 77       	andi	r24, 0x7F	; 127
    16ca:	8c 93       	st	X, r24
}
    16cc:	cf 91       	pop	r28
    16ce:	df 91       	pop	r29
    16d0:	08 95       	ret

000016d2 <Timer_Disable>:

void Timer_Disable()
{
    16d2:	df 93       	push	r29
    16d4:	cf 93       	push	r28
    16d6:	cd b7       	in	r28, 0x3d	; 61
    16d8:	de b7       	in	r29, 0x3e	; 62
	TCCR0&=~(masking_bit<<CS00);
    16da:	a3 e5       	ldi	r26, 0x53	; 83
    16dc:	b0 e0       	ldi	r27, 0x00	; 0
    16de:	e3 e5       	ldi	r30, 0x53	; 83
    16e0:	f0 e0       	ldi	r31, 0x00	; 0
    16e2:	80 81       	ld	r24, Z
    16e4:	8e 7f       	andi	r24, 0xFE	; 254
    16e6:	8c 93       	st	X, r24
	TCCR0&=~(masking_bit<<CS01);
    16e8:	a3 e5       	ldi	r26, 0x53	; 83
    16ea:	b0 e0       	ldi	r27, 0x00	; 0
    16ec:	e3 e5       	ldi	r30, 0x53	; 83
    16ee:	f0 e0       	ldi	r31, 0x00	; 0
    16f0:	80 81       	ld	r24, Z
    16f2:	8d 7f       	andi	r24, 0xFD	; 253
    16f4:	8c 93       	st	X, r24
	TCCR0&=~(masking_bit<<CS02);
    16f6:	a3 e5       	ldi	r26, 0x53	; 83
    16f8:	b0 e0       	ldi	r27, 0x00	; 0
    16fa:	e3 e5       	ldi	r30, 0x53	; 83
    16fc:	f0 e0       	ldi	r31, 0x00	; 0
    16fe:	80 81       	ld	r24, Z
    1700:	8b 7f       	andi	r24, 0xFB	; 251
    1702:	8c 93       	st	X, r24

}
    1704:	cf 91       	pop	r28
    1706:	df 91       	pop	r29
    1708:	08 95       	ret

0000170a <TIMER_voidCall_Back_OVF>:

void TIMER_voidCall_Back_OVF(void (*copy_pf)(void))
{
    170a:	df 93       	push	r29
    170c:	cf 93       	push	r28
    170e:	00 d0       	rcall	.+0      	; 0x1710 <TIMER_voidCall_Back_OVF+0x6>
    1710:	cd b7       	in	r28, 0x3d	; 61
    1712:	de b7       	in	r29, 0x3e	; 62
    1714:	9a 83       	std	Y+2, r25	; 0x02
    1716:	89 83       	std	Y+1, r24	; 0x01
	if(copy_pf!=NULL)
    1718:	89 81       	ldd	r24, Y+1	; 0x01
    171a:	9a 81       	ldd	r25, Y+2	; 0x02
    171c:	00 97       	sbiw	r24, 0x00	; 0
    171e:	31 f0       	breq	.+12     	; 0x172c <TIMER_voidCall_Back_OVF+0x22>
	{
		TIMER0_OVF_CallBack=copy_pf;
    1720:	89 81       	ldd	r24, Y+1	; 0x01
    1722:	9a 81       	ldd	r25, Y+2	; 0x02
    1724:	90 93 71 01 	sts	0x0171, r25
    1728:	80 93 70 01 	sts	0x0170, r24
	}
}
    172c:	0f 90       	pop	r0
    172e:	0f 90       	pop	r0
    1730:	cf 91       	pop	r28
    1732:	df 91       	pop	r29
    1734:	08 95       	ret

00001736 <TIMER_voidCall_Back_CTC>:

void TIMER_voidCall_Back_CTC(void (*copy_pf)(void))
{
    1736:	df 93       	push	r29
    1738:	cf 93       	push	r28
    173a:	00 d0       	rcall	.+0      	; 0x173c <TIMER_voidCall_Back_CTC+0x6>
    173c:	cd b7       	in	r28, 0x3d	; 61
    173e:	de b7       	in	r29, 0x3e	; 62
    1740:	9a 83       	std	Y+2, r25	; 0x02
    1742:	89 83       	std	Y+1, r24	; 0x01
	if(copy_pf!=NULL)
    1744:	89 81       	ldd	r24, Y+1	; 0x01
    1746:	9a 81       	ldd	r25, Y+2	; 0x02
    1748:	00 97       	sbiw	r24, 0x00	; 0
    174a:	31 f0       	breq	.+12     	; 0x1758 <TIMER_voidCall_Back_CTC+0x22>
	{
		TIMER0_CTC_CallBack=copy_pf;
    174c:	89 81       	ldd	r24, Y+1	; 0x01
    174e:	9a 81       	ldd	r25, Y+2	; 0x02
    1750:	90 93 73 01 	sts	0x0173, r25
    1754:	80 93 72 01 	sts	0x0172, r24
	}
}
    1758:	0f 90       	pop	r0
    175a:	0f 90       	pop	r0
    175c:	cf 91       	pop	r28
    175e:	df 91       	pop	r29
    1760:	08 95       	ret

00001762 <__vector_11>:


ISR(TIMER0_OVF_VEC)
{
    1762:	1f 92       	push	r1
    1764:	0f 92       	push	r0
    1766:	0f b6       	in	r0, 0x3f	; 63
    1768:	0f 92       	push	r0
    176a:	11 24       	eor	r1, r1
    176c:	2f 93       	push	r18
    176e:	3f 93       	push	r19
    1770:	4f 93       	push	r20
    1772:	5f 93       	push	r21
    1774:	6f 93       	push	r22
    1776:	7f 93       	push	r23
    1778:	8f 93       	push	r24
    177a:	9f 93       	push	r25
    177c:	af 93       	push	r26
    177e:	bf 93       	push	r27
    1780:	ef 93       	push	r30
    1782:	ff 93       	push	r31
    1784:	df 93       	push	r29
    1786:	cf 93       	push	r28
    1788:	cd b7       	in	r28, 0x3d	; 61
    178a:	de b7       	in	r29, 0x3e	; 62
	static u32 local_count=0;
	local_count++;
    178c:	80 91 74 01 	lds	r24, 0x0174
    1790:	90 91 75 01 	lds	r25, 0x0175
    1794:	a0 91 76 01 	lds	r26, 0x0176
    1798:	b0 91 77 01 	lds	r27, 0x0177
    179c:	01 96       	adiw	r24, 0x01	; 1
    179e:	a1 1d       	adc	r26, r1
    17a0:	b1 1d       	adc	r27, r1
    17a2:	80 93 74 01 	sts	0x0174, r24
    17a6:	90 93 75 01 	sts	0x0175, r25
    17aa:	a0 93 76 01 	sts	0x0176, r26
    17ae:	b0 93 77 01 	sts	0x0177, r27
	if(20000==local_count){
    17b2:	80 91 74 01 	lds	r24, 0x0174
    17b6:	90 91 75 01 	lds	r25, 0x0175
    17ba:	a0 91 76 01 	lds	r26, 0x0176
    17be:	b0 91 77 01 	lds	r27, 0x0177
    17c2:	80 32       	cpi	r24, 0x20	; 32
    17c4:	2e e4       	ldi	r18, 0x4E	; 78
    17c6:	92 07       	cpc	r25, r18
    17c8:	20 e0       	ldi	r18, 0x00	; 0
    17ca:	a2 07       	cpc	r26, r18
    17cc:	20 e0       	ldi	r18, 0x00	; 0
    17ce:	b2 07       	cpc	r27, r18
    17d0:	b1 f4       	brne	.+44     	; 0x17fe <__vector_11+0x9c>
		//TIMER0_STOPTIMER;
		Timer_Disable();
    17d2:	0e 94 69 0b 	call	0x16d2	; 0x16d2 <Timer_Disable>
		TIMER0_OVF_CallBack();
    17d6:	e0 91 70 01 	lds	r30, 0x0170
    17da:	f0 91 71 01 	lds	r31, 0x0171
    17de:	09 95       	icall
		DDRD|=(1<<7);
    17e0:	a1 e3       	ldi	r26, 0x31	; 49
    17e2:	b0 e0       	ldi	r27, 0x00	; 0
    17e4:	e1 e3       	ldi	r30, 0x31	; 49
    17e6:	f0 e0       	ldi	r31, 0x00	; 0
    17e8:	80 81       	ld	r24, Z
    17ea:	80 68       	ori	r24, 0x80	; 128
    17ec:	8c 93       	st	X, r24
		local_count=0;
    17ee:	10 92 74 01 	sts	0x0174, r1
    17f2:	10 92 75 01 	sts	0x0175, r1
    17f6:	10 92 76 01 	sts	0x0176, r1
    17fa:	10 92 77 01 	sts	0x0177, r1
	}
}
    17fe:	cf 91       	pop	r28
    1800:	df 91       	pop	r29
    1802:	ff 91       	pop	r31
    1804:	ef 91       	pop	r30
    1806:	bf 91       	pop	r27
    1808:	af 91       	pop	r26
    180a:	9f 91       	pop	r25
    180c:	8f 91       	pop	r24
    180e:	7f 91       	pop	r23
    1810:	6f 91       	pop	r22
    1812:	5f 91       	pop	r21
    1814:	4f 91       	pop	r20
    1816:	3f 91       	pop	r19
    1818:	2f 91       	pop	r18
    181a:	0f 90       	pop	r0
    181c:	0f be       	out	0x3f, r0	; 63
    181e:	0f 90       	pop	r0
    1820:	1f 90       	pop	r1
    1822:	18 95       	reti

00001824 <__vector_10>:


ISR(TIMER0_CTC_VEC)
{
    1824:	1f 92       	push	r1
    1826:	0f 92       	push	r0
    1828:	0f b6       	in	r0, 0x3f	; 63
    182a:	0f 92       	push	r0
    182c:	11 24       	eor	r1, r1
    182e:	2f 93       	push	r18
    1830:	8f 93       	push	r24
    1832:	9f 93       	push	r25
    1834:	af 93       	push	r26
    1836:	bf 93       	push	r27
    1838:	df 93       	push	r29
    183a:	cf 93       	push	r28
    183c:	cd b7       	in	r28, 0x3d	; 61
    183e:	de b7       	in	r29, 0x3e	; 62
	static u32 local_count=0;
	local_count++;
    1840:	80 91 78 01 	lds	r24, 0x0178
    1844:	90 91 79 01 	lds	r25, 0x0179
    1848:	a0 91 7a 01 	lds	r26, 0x017A
    184c:	b0 91 7b 01 	lds	r27, 0x017B
    1850:	01 96       	adiw	r24, 0x01	; 1
    1852:	a1 1d       	adc	r26, r1
    1854:	b1 1d       	adc	r27, r1
    1856:	80 93 78 01 	sts	0x0178, r24
    185a:	90 93 79 01 	sts	0x0179, r25
    185e:	a0 93 7a 01 	sts	0x017A, r26
    1862:	b0 93 7b 01 	sts	0x017B, r27
	if(400==local_count)
    1866:	80 91 78 01 	lds	r24, 0x0178
    186a:	90 91 79 01 	lds	r25, 0x0179
    186e:	a0 91 7a 01 	lds	r26, 0x017A
    1872:	b0 91 7b 01 	lds	r27, 0x017B
    1876:	80 39       	cpi	r24, 0x90	; 144
    1878:	21 e0       	ldi	r18, 0x01	; 1
    187a:	92 07       	cpc	r25, r18
    187c:	20 e0       	ldi	r18, 0x00	; 0
    187e:	a2 07       	cpc	r26, r18
    1880:	20 e0       	ldi	r18, 0x00	; 0
    1882:	b2 07       	cpc	r27, r18
    1884:	41 f4       	brne	.+16     	; 0x1896 <__vector_10+0x72>
	{
//		TIMER0_STOPTIMER;
//		DDRD=0xff;
		local_count=0;
    1886:	10 92 78 01 	sts	0x0178, r1
    188a:	10 92 79 01 	sts	0x0179, r1
    188e:	10 92 7a 01 	sts	0x017A, r1
    1892:	10 92 7b 01 	sts	0x017B, r1
	}
}
    1896:	cf 91       	pop	r28
    1898:	df 91       	pop	r29
    189a:	bf 91       	pop	r27
    189c:	af 91       	pop	r26
    189e:	9f 91       	pop	r25
    18a0:	8f 91       	pop	r24
    18a2:	2f 91       	pop	r18
    18a4:	0f 90       	pop	r0
    18a6:	0f be       	out	0x3f, r0	; 63
    18a8:	0f 90       	pop	r0
    18aa:	1f 90       	pop	r1
    18ac:	18 95       	reti

000018ae <DIO_enuInit>:
#include"../../LIB/stdtypes.h"

#include"DIO_priv.h"
#include"DIO_config.h"

ES_t DIO_enuInit(void){
    18ae:	df 93       	push	r29
    18b0:	cf 93       	push	r28
    18b2:	0f 92       	push	r0
    18b4:	cd b7       	in	r28, 0x3d	; 61
    18b6:	de b7       	in	r29, 0x3e	; 62

	DDRA=CONC(PORTA_PIN7,PORTA_PIN6,PORTA_PIN5,PORTA_PIN4,PORTA_PIN3,PORTA_PIN2,PORTA_PIN1,PORTA_PIN0);
    18b8:	ea e3       	ldi	r30, 0x3A	; 58
    18ba:	f0 e0       	ldi	r31, 0x00	; 0
    18bc:	89 e0       	ldi	r24, 0x09	; 9
    18be:	80 83       	st	Z, r24
	DDRB=CONC(PORTB_PIN7,PORTB_PIN6,PORTB_PIN5,PORTB_PIN4,PORTB_PIN3,PORTB_PIN2,PORTB_PIN1,PORTB_PIN0);
    18c0:	e7 e3       	ldi	r30, 0x37	; 55
    18c2:	f0 e0       	ldi	r31, 0x00	; 0
    18c4:	10 82       	st	Z, r1
	DDRC=CONC(PORTC_PIN7,PORTC_PIN6,PORTC_PIN5,PORTC_PIN4,PORTC_PIN3,PORTC_PIN2,PORTC_PIN1,PORTC_PIN0);
    18c6:	e4 e3       	ldi	r30, 0x34	; 52
    18c8:	f0 e0       	ldi	r31, 0x00	; 0
    18ca:	10 82       	st	Z, r1
	DDRD=CONC(PORTD_PIN7,PORTD_PIN6,PORTD_PIN5,PORTD_PIN4,PORTD_PIN3,PORTD_PIN2,PORTD_PIN1,PORTD_PIN0);
    18cc:	e1 e3       	ldi	r30, 0x31	; 49
    18ce:	f0 e0       	ldi	r31, 0x00	; 0
    18d0:	10 82       	st	Z, r1

}
    18d2:	0f 90       	pop	r0
    18d4:	cf 91       	pop	r28
    18d6:	df 91       	pop	r29
    18d8:	08 95       	ret

000018da <DIO_enuSetPortDIR>:
ES_t DIO_enuSetPortDIR(u8 copy_u8port, u8 copy_u8value){
    18da:	df 93       	push	r29
    18dc:	cf 93       	push	r28
    18de:	00 d0       	rcall	.+0      	; 0x18e0 <DIO_enuSetPortDIR+0x6>
    18e0:	00 d0       	rcall	.+0      	; 0x18e2 <DIO_enuSetPortDIR+0x8>
    18e2:	0f 92       	push	r0
    18e4:	cd b7       	in	r28, 0x3d	; 61
    18e6:	de b7       	in	r29, 0x3e	; 62
    18e8:	89 83       	std	Y+1, r24	; 0x01
    18ea:	6a 83       	std	Y+2, r22	; 0x02
switch(copy_u8port){
    18ec:	89 81       	ldd	r24, Y+1	; 0x01
    18ee:	28 2f       	mov	r18, r24
    18f0:	30 e0       	ldi	r19, 0x00	; 0
    18f2:	3c 83       	std	Y+4, r19	; 0x04
    18f4:	2b 83       	std	Y+3, r18	; 0x03
    18f6:	8b 81       	ldd	r24, Y+3	; 0x03
    18f8:	9c 81       	ldd	r25, Y+4	; 0x04
    18fa:	81 30       	cpi	r24, 0x01	; 1
    18fc:	91 05       	cpc	r25, r1
    18fe:	d1 f0       	breq	.+52     	; 0x1934 <DIO_enuSetPortDIR+0x5a>
    1900:	2b 81       	ldd	r18, Y+3	; 0x03
    1902:	3c 81       	ldd	r19, Y+4	; 0x04
    1904:	22 30       	cpi	r18, 0x02	; 2
    1906:	31 05       	cpc	r19, r1
    1908:	2c f4       	brge	.+10     	; 0x1914 <DIO_enuSetPortDIR+0x3a>
    190a:	8b 81       	ldd	r24, Y+3	; 0x03
    190c:	9c 81       	ldd	r25, Y+4	; 0x04
    190e:	00 97       	sbiw	r24, 0x00	; 0
    1910:	61 f0       	breq	.+24     	; 0x192a <DIO_enuSetPortDIR+0x50>
    1912:	1e c0       	rjmp	.+60     	; 0x1950 <DIO_enuSetPortDIR+0x76>
    1914:	2b 81       	ldd	r18, Y+3	; 0x03
    1916:	3c 81       	ldd	r19, Y+4	; 0x04
    1918:	22 30       	cpi	r18, 0x02	; 2
    191a:	31 05       	cpc	r19, r1
    191c:	81 f0       	breq	.+32     	; 0x193e <DIO_enuSetPortDIR+0x64>
    191e:	8b 81       	ldd	r24, Y+3	; 0x03
    1920:	9c 81       	ldd	r25, Y+4	; 0x04
    1922:	83 30       	cpi	r24, 0x03	; 3
    1924:	91 05       	cpc	r25, r1
    1926:	81 f0       	breq	.+32     	; 0x1948 <DIO_enuSetPortDIR+0x6e>
    1928:	13 c0       	rjmp	.+38     	; 0x1950 <DIO_enuSetPortDIR+0x76>
case DIO_u8PORTA:
	DDRA=copy_u8value;
    192a:	ea e3       	ldi	r30, 0x3A	; 58
    192c:	f0 e0       	ldi	r31, 0x00	; 0
    192e:	8a 81       	ldd	r24, Y+2	; 0x02
    1930:	80 83       	st	Z, r24
    1932:	0e c0       	rjmp	.+28     	; 0x1950 <DIO_enuSetPortDIR+0x76>
	break;

case DIO_u8PORTB:
	DDRB=copy_u8value;
    1934:	e7 e3       	ldi	r30, 0x37	; 55
    1936:	f0 e0       	ldi	r31, 0x00	; 0
    1938:	8a 81       	ldd	r24, Y+2	; 0x02
    193a:	80 83       	st	Z, r24
    193c:	09 c0       	rjmp	.+18     	; 0x1950 <DIO_enuSetPortDIR+0x76>
	break;

case DIO_u8PORTC:
	DDRC=copy_u8value;
    193e:	e4 e3       	ldi	r30, 0x34	; 52
    1940:	f0 e0       	ldi	r31, 0x00	; 0
    1942:	8a 81       	ldd	r24, Y+2	; 0x02
    1944:	80 83       	st	Z, r24
    1946:	04 c0       	rjmp	.+8      	; 0x1950 <DIO_enuSetPortDIR+0x76>
	break;

case DIO_u8PORTD:
	DDRD=copy_u8value;
    1948:	e1 e3       	ldi	r30, 0x31	; 49
    194a:	f0 e0       	ldi	r31, 0x00	; 0
    194c:	8a 81       	ldd	r24, Y+2	; 0x02
    194e:	80 83       	st	Z, r24
	break;
}
}
    1950:	0f 90       	pop	r0
    1952:	0f 90       	pop	r0
    1954:	0f 90       	pop	r0
    1956:	0f 90       	pop	r0
    1958:	0f 90       	pop	r0
    195a:	cf 91       	pop	r28
    195c:	df 91       	pop	r29
    195e:	08 95       	ret

00001960 <DIO_enuSetPortVAL>:
ES_t DIO_enuSetPortVAL(u8 copy_u8port, u8 copy_u8value){
    1960:	df 93       	push	r29
    1962:	cf 93       	push	r28
    1964:	00 d0       	rcall	.+0      	; 0x1966 <DIO_enuSetPortVAL+0x6>
    1966:	00 d0       	rcall	.+0      	; 0x1968 <DIO_enuSetPortVAL+0x8>
    1968:	0f 92       	push	r0
    196a:	cd b7       	in	r28, 0x3d	; 61
    196c:	de b7       	in	r29, 0x3e	; 62
    196e:	89 83       	std	Y+1, r24	; 0x01
    1970:	6a 83       	std	Y+2, r22	; 0x02
	switch(copy_u8port){
    1972:	89 81       	ldd	r24, Y+1	; 0x01
    1974:	28 2f       	mov	r18, r24
    1976:	30 e0       	ldi	r19, 0x00	; 0
    1978:	3c 83       	std	Y+4, r19	; 0x04
    197a:	2b 83       	std	Y+3, r18	; 0x03
    197c:	8b 81       	ldd	r24, Y+3	; 0x03
    197e:	9c 81       	ldd	r25, Y+4	; 0x04
    1980:	81 30       	cpi	r24, 0x01	; 1
    1982:	91 05       	cpc	r25, r1
    1984:	d1 f0       	breq	.+52     	; 0x19ba <DIO_enuSetPortVAL+0x5a>
    1986:	2b 81       	ldd	r18, Y+3	; 0x03
    1988:	3c 81       	ldd	r19, Y+4	; 0x04
    198a:	22 30       	cpi	r18, 0x02	; 2
    198c:	31 05       	cpc	r19, r1
    198e:	2c f4       	brge	.+10     	; 0x199a <DIO_enuSetPortVAL+0x3a>
    1990:	8b 81       	ldd	r24, Y+3	; 0x03
    1992:	9c 81       	ldd	r25, Y+4	; 0x04
    1994:	00 97       	sbiw	r24, 0x00	; 0
    1996:	61 f0       	breq	.+24     	; 0x19b0 <DIO_enuSetPortVAL+0x50>
    1998:	1e c0       	rjmp	.+60     	; 0x19d6 <DIO_enuSetPortVAL+0x76>
    199a:	2b 81       	ldd	r18, Y+3	; 0x03
    199c:	3c 81       	ldd	r19, Y+4	; 0x04
    199e:	22 30       	cpi	r18, 0x02	; 2
    19a0:	31 05       	cpc	r19, r1
    19a2:	81 f0       	breq	.+32     	; 0x19c4 <DIO_enuSetPortVAL+0x64>
    19a4:	8b 81       	ldd	r24, Y+3	; 0x03
    19a6:	9c 81       	ldd	r25, Y+4	; 0x04
    19a8:	83 30       	cpi	r24, 0x03	; 3
    19aa:	91 05       	cpc	r25, r1
    19ac:	81 f0       	breq	.+32     	; 0x19ce <DIO_enuSetPortVAL+0x6e>
    19ae:	13 c0       	rjmp	.+38     	; 0x19d6 <DIO_enuSetPortVAL+0x76>
	case DIO_u8PORTA:
		PORTA=copy_u8value;
    19b0:	eb e3       	ldi	r30, 0x3B	; 59
    19b2:	f0 e0       	ldi	r31, 0x00	; 0
    19b4:	8a 81       	ldd	r24, Y+2	; 0x02
    19b6:	80 83       	st	Z, r24
    19b8:	0e c0       	rjmp	.+28     	; 0x19d6 <DIO_enuSetPortVAL+0x76>
		break;

	case DIO_u8PORTB:
		PORTB=copy_u8value;
    19ba:	e8 e3       	ldi	r30, 0x38	; 56
    19bc:	f0 e0       	ldi	r31, 0x00	; 0
    19be:	8a 81       	ldd	r24, Y+2	; 0x02
    19c0:	80 83       	st	Z, r24
    19c2:	09 c0       	rjmp	.+18     	; 0x19d6 <DIO_enuSetPortVAL+0x76>
		break;

	case DIO_u8PORTC:
		PORTC=copy_u8value;
    19c4:	e5 e3       	ldi	r30, 0x35	; 53
    19c6:	f0 e0       	ldi	r31, 0x00	; 0
    19c8:	8a 81       	ldd	r24, Y+2	; 0x02
    19ca:	80 83       	st	Z, r24
    19cc:	04 c0       	rjmp	.+8      	; 0x19d6 <DIO_enuSetPortVAL+0x76>
		break;

	case DIO_u8PORTD:
		PORTD=copy_u8value;
    19ce:	e2 e3       	ldi	r30, 0x32	; 50
    19d0:	f0 e0       	ldi	r31, 0x00	; 0
    19d2:	8a 81       	ldd	r24, Y+2	; 0x02
    19d4:	80 83       	st	Z, r24
		break;
	}
}
    19d6:	0f 90       	pop	r0
    19d8:	0f 90       	pop	r0
    19da:	0f 90       	pop	r0
    19dc:	0f 90       	pop	r0
    19de:	0f 90       	pop	r0
    19e0:	cf 91       	pop	r28
    19e2:	df 91       	pop	r29
    19e4:	08 95       	ret

000019e6 <DIO_enuTogPort>:
ES_t DIO_enuTogPort(u8 copy_u8port){
    19e6:	df 93       	push	r29
    19e8:	cf 93       	push	r28
    19ea:	00 d0       	rcall	.+0      	; 0x19ec <DIO_enuTogPort+0x6>
    19ec:	00 d0       	rcall	.+0      	; 0x19ee <DIO_enuTogPort+0x8>
    19ee:	cd b7       	in	r28, 0x3d	; 61
    19f0:	de b7       	in	r29, 0x3e	; 62
    19f2:	89 83       	std	Y+1, r24	; 0x01
	switch(copy_u8port){
    19f4:	89 81       	ldd	r24, Y+1	; 0x01
    19f6:	28 2f       	mov	r18, r24
    19f8:	30 e0       	ldi	r19, 0x00	; 0
    19fa:	3b 83       	std	Y+3, r19	; 0x03
    19fc:	2a 83       	std	Y+2, r18	; 0x02
    19fe:	8a 81       	ldd	r24, Y+2	; 0x02
    1a00:	9b 81       	ldd	r25, Y+3	; 0x03
    1a02:	81 30       	cpi	r24, 0x01	; 1
    1a04:	91 05       	cpc	r25, r1
    1a06:	e9 f0       	breq	.+58     	; 0x1a42 <DIO_enuTogPort+0x5c>
    1a08:	2a 81       	ldd	r18, Y+2	; 0x02
    1a0a:	3b 81       	ldd	r19, Y+3	; 0x03
    1a0c:	22 30       	cpi	r18, 0x02	; 2
    1a0e:	31 05       	cpc	r19, r1
    1a10:	2c f4       	brge	.+10     	; 0x1a1c <DIO_enuTogPort+0x36>
    1a12:	8a 81       	ldd	r24, Y+2	; 0x02
    1a14:	9b 81       	ldd	r25, Y+3	; 0x03
    1a16:	00 97       	sbiw	r24, 0x00	; 0
    1a18:	61 f0       	breq	.+24     	; 0x1a32 <DIO_enuTogPort+0x4c>
    1a1a:	2a c0       	rjmp	.+84     	; 0x1a70 <DIO_enuTogPort+0x8a>
    1a1c:	2a 81       	ldd	r18, Y+2	; 0x02
    1a1e:	3b 81       	ldd	r19, Y+3	; 0x03
    1a20:	22 30       	cpi	r18, 0x02	; 2
    1a22:	31 05       	cpc	r19, r1
    1a24:	b1 f0       	breq	.+44     	; 0x1a52 <DIO_enuTogPort+0x6c>
    1a26:	8a 81       	ldd	r24, Y+2	; 0x02
    1a28:	9b 81       	ldd	r25, Y+3	; 0x03
    1a2a:	83 30       	cpi	r24, 0x03	; 3
    1a2c:	91 05       	cpc	r25, r1
    1a2e:	c9 f0       	breq	.+50     	; 0x1a62 <DIO_enuTogPort+0x7c>
    1a30:	1f c0       	rjmp	.+62     	; 0x1a70 <DIO_enuTogPort+0x8a>
		case DIO_u8PORTA:
			PORTA=~PORTA;
    1a32:	ab e3       	ldi	r26, 0x3B	; 59
    1a34:	b0 e0       	ldi	r27, 0x00	; 0
    1a36:	eb e3       	ldi	r30, 0x3B	; 59
    1a38:	f0 e0       	ldi	r31, 0x00	; 0
    1a3a:	80 81       	ld	r24, Z
    1a3c:	80 95       	com	r24
    1a3e:	8c 93       	st	X, r24
    1a40:	17 c0       	rjmp	.+46     	; 0x1a70 <DIO_enuTogPort+0x8a>
			break;

		case DIO_u8PORTB:
			PORTB=~PORTB;
    1a42:	a8 e3       	ldi	r26, 0x38	; 56
    1a44:	b0 e0       	ldi	r27, 0x00	; 0
    1a46:	e8 e3       	ldi	r30, 0x38	; 56
    1a48:	f0 e0       	ldi	r31, 0x00	; 0
    1a4a:	80 81       	ld	r24, Z
    1a4c:	80 95       	com	r24
    1a4e:	8c 93       	st	X, r24
    1a50:	0f c0       	rjmp	.+30     	; 0x1a70 <DIO_enuTogPort+0x8a>
			break;

		case DIO_u8PORTC:
			PORTC=~PORTC;
    1a52:	a5 e3       	ldi	r26, 0x35	; 53
    1a54:	b0 e0       	ldi	r27, 0x00	; 0
    1a56:	e5 e3       	ldi	r30, 0x35	; 53
    1a58:	f0 e0       	ldi	r31, 0x00	; 0
    1a5a:	80 81       	ld	r24, Z
    1a5c:	80 95       	com	r24
    1a5e:	8c 93       	st	X, r24
    1a60:	07 c0       	rjmp	.+14     	; 0x1a70 <DIO_enuTogPort+0x8a>
			break;

		case DIO_u8PORTD:
			PORTD=~PORTD;
    1a62:	a2 e3       	ldi	r26, 0x32	; 50
    1a64:	b0 e0       	ldi	r27, 0x00	; 0
    1a66:	e2 e3       	ldi	r30, 0x32	; 50
    1a68:	f0 e0       	ldi	r31, 0x00	; 0
    1a6a:	80 81       	ld	r24, Z
    1a6c:	80 95       	com	r24
    1a6e:	8c 93       	st	X, r24
			break;
		}

}
    1a70:	0f 90       	pop	r0
    1a72:	0f 90       	pop	r0
    1a74:	0f 90       	pop	r0
    1a76:	0f 90       	pop	r0
    1a78:	cf 91       	pop	r28
    1a7a:	df 91       	pop	r29
    1a7c:	08 95       	ret

00001a7e <DIO_enuSetPinDIR>:
ES_t DIO_enuSetPinDIR(u8 copy_u8port, u8 copy_u8pin, u8 copy_u8value){
    1a7e:	df 93       	push	r29
    1a80:	cf 93       	push	r28
    1a82:	00 d0       	rcall	.+0      	; 0x1a84 <DIO_enuSetPinDIR+0x6>
    1a84:	00 d0       	rcall	.+0      	; 0x1a86 <DIO_enuSetPinDIR+0x8>
    1a86:	00 d0       	rcall	.+0      	; 0x1a88 <DIO_enuSetPinDIR+0xa>
    1a88:	cd b7       	in	r28, 0x3d	; 61
    1a8a:	de b7       	in	r29, 0x3e	; 62
    1a8c:	89 83       	std	Y+1, r24	; 0x01
    1a8e:	6a 83       	std	Y+2, r22	; 0x02
    1a90:	4b 83       	std	Y+3, r20	; 0x03
	if(copy_u8pin>=PIN0&&copy_u8pin<=PIN7&&copy_u8value>=INPUT&&copy_u8value<=OUTPUT){
    1a92:	8a 81       	ldd	r24, Y+2	; 0x02
    1a94:	88 30       	cpi	r24, 0x08	; 8
    1a96:	08 f0       	brcs	.+2      	; 0x1a9a <DIO_enuSetPinDIR+0x1c>
    1a98:	ca c0       	rjmp	.+404    	; 0x1c2e <DIO_enuSetPinDIR+0x1b0>
    1a9a:	8b 81       	ldd	r24, Y+3	; 0x03
    1a9c:	82 30       	cpi	r24, 0x02	; 2
    1a9e:	08 f0       	brcs	.+2      	; 0x1aa2 <DIO_enuSetPinDIR+0x24>
    1aa0:	c6 c0       	rjmp	.+396    	; 0x1c2e <DIO_enuSetPinDIR+0x1b0>
	switch(copy_u8port){
    1aa2:	89 81       	ldd	r24, Y+1	; 0x01
    1aa4:	28 2f       	mov	r18, r24
    1aa6:	30 e0       	ldi	r19, 0x00	; 0
    1aa8:	3d 83       	std	Y+5, r19	; 0x05
    1aaa:	2c 83       	std	Y+4, r18	; 0x04
    1aac:	6c 81       	ldd	r22, Y+4	; 0x04
    1aae:	7d 81       	ldd	r23, Y+5	; 0x05
    1ab0:	61 30       	cpi	r22, 0x01	; 1
    1ab2:	71 05       	cpc	r23, r1
    1ab4:	09 f4       	brne	.+2      	; 0x1ab8 <DIO_enuSetPinDIR+0x3a>
    1ab6:	41 c0       	rjmp	.+130    	; 0x1b3a <DIO_enuSetPinDIR+0xbc>
    1ab8:	8c 81       	ldd	r24, Y+4	; 0x04
    1aba:	9d 81       	ldd	r25, Y+5	; 0x05
    1abc:	82 30       	cpi	r24, 0x02	; 2
    1abe:	91 05       	cpc	r25, r1
    1ac0:	34 f4       	brge	.+12     	; 0x1ace <DIO_enuSetPinDIR+0x50>
    1ac2:	2c 81       	ldd	r18, Y+4	; 0x04
    1ac4:	3d 81       	ldd	r19, Y+5	; 0x05
    1ac6:	21 15       	cp	r18, r1
    1ac8:	31 05       	cpc	r19, r1
    1aca:	71 f0       	breq	.+28     	; 0x1ae8 <DIO_enuSetPinDIR+0x6a>
    1acc:	b0 c0       	rjmp	.+352    	; 0x1c2e <DIO_enuSetPinDIR+0x1b0>
    1ace:	6c 81       	ldd	r22, Y+4	; 0x04
    1ad0:	7d 81       	ldd	r23, Y+5	; 0x05
    1ad2:	62 30       	cpi	r22, 0x02	; 2
    1ad4:	71 05       	cpc	r23, r1
    1ad6:	09 f4       	brne	.+2      	; 0x1ada <DIO_enuSetPinDIR+0x5c>
    1ad8:	59 c0       	rjmp	.+178    	; 0x1b8c <DIO_enuSetPinDIR+0x10e>
    1ada:	8c 81       	ldd	r24, Y+4	; 0x04
    1adc:	9d 81       	ldd	r25, Y+5	; 0x05
    1ade:	83 30       	cpi	r24, 0x03	; 3
    1ae0:	91 05       	cpc	r25, r1
    1ae2:	09 f4       	brne	.+2      	; 0x1ae6 <DIO_enuSetPinDIR+0x68>
    1ae4:	7c c0       	rjmp	.+248    	; 0x1bde <DIO_enuSetPinDIR+0x160>
    1ae6:	a3 c0       	rjmp	.+326    	; 0x1c2e <DIO_enuSetPinDIR+0x1b0>
		case DIO_u8PORTA:
			DDRA&=~(masking_bit<<copy_u8pin);
    1ae8:	aa e3       	ldi	r26, 0x3A	; 58
    1aea:	b0 e0       	ldi	r27, 0x00	; 0
    1aec:	ea e3       	ldi	r30, 0x3A	; 58
    1aee:	f0 e0       	ldi	r31, 0x00	; 0
    1af0:	80 81       	ld	r24, Z
    1af2:	48 2f       	mov	r20, r24
    1af4:	8a 81       	ldd	r24, Y+2	; 0x02
    1af6:	28 2f       	mov	r18, r24
    1af8:	30 e0       	ldi	r19, 0x00	; 0
    1afa:	81 e0       	ldi	r24, 0x01	; 1
    1afc:	90 e0       	ldi	r25, 0x00	; 0
    1afe:	02 c0       	rjmp	.+4      	; 0x1b04 <DIO_enuSetPinDIR+0x86>
    1b00:	88 0f       	add	r24, r24
    1b02:	99 1f       	adc	r25, r25
    1b04:	2a 95       	dec	r18
    1b06:	e2 f7       	brpl	.-8      	; 0x1b00 <DIO_enuSetPinDIR+0x82>
    1b08:	80 95       	com	r24
    1b0a:	84 23       	and	r24, r20
    1b0c:	8c 93       	st	X, r24
			DDRA|=(copy_u8value<<copy_u8pin);
    1b0e:	aa e3       	ldi	r26, 0x3A	; 58
    1b10:	b0 e0       	ldi	r27, 0x00	; 0
    1b12:	ea e3       	ldi	r30, 0x3A	; 58
    1b14:	f0 e0       	ldi	r31, 0x00	; 0
    1b16:	80 81       	ld	r24, Z
    1b18:	48 2f       	mov	r20, r24
    1b1a:	8b 81       	ldd	r24, Y+3	; 0x03
    1b1c:	28 2f       	mov	r18, r24
    1b1e:	30 e0       	ldi	r19, 0x00	; 0
    1b20:	8a 81       	ldd	r24, Y+2	; 0x02
    1b22:	88 2f       	mov	r24, r24
    1b24:	90 e0       	ldi	r25, 0x00	; 0
    1b26:	b9 01       	movw	r22, r18
    1b28:	02 c0       	rjmp	.+4      	; 0x1b2e <DIO_enuSetPinDIR+0xb0>
    1b2a:	66 0f       	add	r22, r22
    1b2c:	77 1f       	adc	r23, r23
    1b2e:	8a 95       	dec	r24
    1b30:	e2 f7       	brpl	.-8      	; 0x1b2a <DIO_enuSetPinDIR+0xac>
    1b32:	cb 01       	movw	r24, r22
    1b34:	84 2b       	or	r24, r20
    1b36:	8c 93       	st	X, r24
    1b38:	7a c0       	rjmp	.+244    	; 0x1c2e <DIO_enuSetPinDIR+0x1b0>
			break;

		case DIO_u8PORTB:
			DDRB&=~(masking_bit<<copy_u8pin);
    1b3a:	a7 e3       	ldi	r26, 0x37	; 55
    1b3c:	b0 e0       	ldi	r27, 0x00	; 0
    1b3e:	e7 e3       	ldi	r30, 0x37	; 55
    1b40:	f0 e0       	ldi	r31, 0x00	; 0
    1b42:	80 81       	ld	r24, Z
    1b44:	48 2f       	mov	r20, r24
    1b46:	8a 81       	ldd	r24, Y+2	; 0x02
    1b48:	28 2f       	mov	r18, r24
    1b4a:	30 e0       	ldi	r19, 0x00	; 0
    1b4c:	81 e0       	ldi	r24, 0x01	; 1
    1b4e:	90 e0       	ldi	r25, 0x00	; 0
    1b50:	02 c0       	rjmp	.+4      	; 0x1b56 <DIO_enuSetPinDIR+0xd8>
    1b52:	88 0f       	add	r24, r24
    1b54:	99 1f       	adc	r25, r25
    1b56:	2a 95       	dec	r18
    1b58:	e2 f7       	brpl	.-8      	; 0x1b52 <DIO_enuSetPinDIR+0xd4>
    1b5a:	80 95       	com	r24
    1b5c:	84 23       	and	r24, r20
    1b5e:	8c 93       	st	X, r24
			DDRB|=(copy_u8value<<copy_u8pin);
    1b60:	a7 e3       	ldi	r26, 0x37	; 55
    1b62:	b0 e0       	ldi	r27, 0x00	; 0
    1b64:	e7 e3       	ldi	r30, 0x37	; 55
    1b66:	f0 e0       	ldi	r31, 0x00	; 0
    1b68:	80 81       	ld	r24, Z
    1b6a:	48 2f       	mov	r20, r24
    1b6c:	8b 81       	ldd	r24, Y+3	; 0x03
    1b6e:	28 2f       	mov	r18, r24
    1b70:	30 e0       	ldi	r19, 0x00	; 0
    1b72:	8a 81       	ldd	r24, Y+2	; 0x02
    1b74:	88 2f       	mov	r24, r24
    1b76:	90 e0       	ldi	r25, 0x00	; 0
    1b78:	b9 01       	movw	r22, r18
    1b7a:	02 c0       	rjmp	.+4      	; 0x1b80 <DIO_enuSetPinDIR+0x102>
    1b7c:	66 0f       	add	r22, r22
    1b7e:	77 1f       	adc	r23, r23
    1b80:	8a 95       	dec	r24
    1b82:	e2 f7       	brpl	.-8      	; 0x1b7c <DIO_enuSetPinDIR+0xfe>
    1b84:	cb 01       	movw	r24, r22
    1b86:	84 2b       	or	r24, r20
    1b88:	8c 93       	st	X, r24
    1b8a:	51 c0       	rjmp	.+162    	; 0x1c2e <DIO_enuSetPinDIR+0x1b0>
			break;

		case DIO_u8PORTC:
			DDRC&=~(masking_bit<<copy_u8pin);
    1b8c:	a4 e3       	ldi	r26, 0x34	; 52
    1b8e:	b0 e0       	ldi	r27, 0x00	; 0
    1b90:	e4 e3       	ldi	r30, 0x34	; 52
    1b92:	f0 e0       	ldi	r31, 0x00	; 0
    1b94:	80 81       	ld	r24, Z
    1b96:	48 2f       	mov	r20, r24
    1b98:	8a 81       	ldd	r24, Y+2	; 0x02
    1b9a:	28 2f       	mov	r18, r24
    1b9c:	30 e0       	ldi	r19, 0x00	; 0
    1b9e:	81 e0       	ldi	r24, 0x01	; 1
    1ba0:	90 e0       	ldi	r25, 0x00	; 0
    1ba2:	02 c0       	rjmp	.+4      	; 0x1ba8 <DIO_enuSetPinDIR+0x12a>
    1ba4:	88 0f       	add	r24, r24
    1ba6:	99 1f       	adc	r25, r25
    1ba8:	2a 95       	dec	r18
    1baa:	e2 f7       	brpl	.-8      	; 0x1ba4 <DIO_enuSetPinDIR+0x126>
    1bac:	80 95       	com	r24
    1bae:	84 23       	and	r24, r20
    1bb0:	8c 93       	st	X, r24
			DDRC|=(copy_u8value<<copy_u8pin);
    1bb2:	a4 e3       	ldi	r26, 0x34	; 52
    1bb4:	b0 e0       	ldi	r27, 0x00	; 0
    1bb6:	e4 e3       	ldi	r30, 0x34	; 52
    1bb8:	f0 e0       	ldi	r31, 0x00	; 0
    1bba:	80 81       	ld	r24, Z
    1bbc:	48 2f       	mov	r20, r24
    1bbe:	8b 81       	ldd	r24, Y+3	; 0x03
    1bc0:	28 2f       	mov	r18, r24
    1bc2:	30 e0       	ldi	r19, 0x00	; 0
    1bc4:	8a 81       	ldd	r24, Y+2	; 0x02
    1bc6:	88 2f       	mov	r24, r24
    1bc8:	90 e0       	ldi	r25, 0x00	; 0
    1bca:	b9 01       	movw	r22, r18
    1bcc:	02 c0       	rjmp	.+4      	; 0x1bd2 <DIO_enuSetPinDIR+0x154>
    1bce:	66 0f       	add	r22, r22
    1bd0:	77 1f       	adc	r23, r23
    1bd2:	8a 95       	dec	r24
    1bd4:	e2 f7       	brpl	.-8      	; 0x1bce <DIO_enuSetPinDIR+0x150>
    1bd6:	cb 01       	movw	r24, r22
    1bd8:	84 2b       	or	r24, r20
    1bda:	8c 93       	st	X, r24
    1bdc:	28 c0       	rjmp	.+80     	; 0x1c2e <DIO_enuSetPinDIR+0x1b0>
			break;

		case DIO_u8PORTD:
			DDRD&=~(masking_bit<<copy_u8pin);
    1bde:	a1 e3       	ldi	r26, 0x31	; 49
    1be0:	b0 e0       	ldi	r27, 0x00	; 0
    1be2:	e1 e3       	ldi	r30, 0x31	; 49
    1be4:	f0 e0       	ldi	r31, 0x00	; 0
    1be6:	80 81       	ld	r24, Z
    1be8:	48 2f       	mov	r20, r24
    1bea:	8a 81       	ldd	r24, Y+2	; 0x02
    1bec:	28 2f       	mov	r18, r24
    1bee:	30 e0       	ldi	r19, 0x00	; 0
    1bf0:	81 e0       	ldi	r24, 0x01	; 1
    1bf2:	90 e0       	ldi	r25, 0x00	; 0
    1bf4:	02 c0       	rjmp	.+4      	; 0x1bfa <DIO_enuSetPinDIR+0x17c>
    1bf6:	88 0f       	add	r24, r24
    1bf8:	99 1f       	adc	r25, r25
    1bfa:	2a 95       	dec	r18
    1bfc:	e2 f7       	brpl	.-8      	; 0x1bf6 <DIO_enuSetPinDIR+0x178>
    1bfe:	80 95       	com	r24
    1c00:	84 23       	and	r24, r20
    1c02:	8c 93       	st	X, r24
			DDRD|=(copy_u8value<<copy_u8pin);
    1c04:	a1 e3       	ldi	r26, 0x31	; 49
    1c06:	b0 e0       	ldi	r27, 0x00	; 0
    1c08:	e1 e3       	ldi	r30, 0x31	; 49
    1c0a:	f0 e0       	ldi	r31, 0x00	; 0
    1c0c:	80 81       	ld	r24, Z
    1c0e:	48 2f       	mov	r20, r24
    1c10:	8b 81       	ldd	r24, Y+3	; 0x03
    1c12:	28 2f       	mov	r18, r24
    1c14:	30 e0       	ldi	r19, 0x00	; 0
    1c16:	8a 81       	ldd	r24, Y+2	; 0x02
    1c18:	88 2f       	mov	r24, r24
    1c1a:	90 e0       	ldi	r25, 0x00	; 0
    1c1c:	b9 01       	movw	r22, r18
    1c1e:	02 c0       	rjmp	.+4      	; 0x1c24 <DIO_enuSetPinDIR+0x1a6>
    1c20:	66 0f       	add	r22, r22
    1c22:	77 1f       	adc	r23, r23
    1c24:	8a 95       	dec	r24
    1c26:	e2 f7       	brpl	.-8      	; 0x1c20 <DIO_enuSetPinDIR+0x1a2>
    1c28:	cb 01       	movw	r24, r22
    1c2a:	84 2b       	or	r24, r20
    1c2c:	8c 93       	st	X, r24
			break;
		}
	}
}
    1c2e:	26 96       	adiw	r28, 0x06	; 6
    1c30:	0f b6       	in	r0, 0x3f	; 63
    1c32:	f8 94       	cli
    1c34:	de bf       	out	0x3e, r29	; 62
    1c36:	0f be       	out	0x3f, r0	; 63
    1c38:	cd bf       	out	0x3d, r28	; 61
    1c3a:	cf 91       	pop	r28
    1c3c:	df 91       	pop	r29
    1c3e:	08 95       	ret

00001c40 <DIO_enuSetPinVAL>:

ES_t DIO_enuSetPinVAL(u8 copy_u8port, u8 copy_u8pin, u8 copy_u8value){
    1c40:	df 93       	push	r29
    1c42:	cf 93       	push	r28
    1c44:	00 d0       	rcall	.+0      	; 0x1c46 <DIO_enuSetPinVAL+0x6>
    1c46:	00 d0       	rcall	.+0      	; 0x1c48 <DIO_enuSetPinVAL+0x8>
    1c48:	00 d0       	rcall	.+0      	; 0x1c4a <DIO_enuSetPinVAL+0xa>
    1c4a:	cd b7       	in	r28, 0x3d	; 61
    1c4c:	de b7       	in	r29, 0x3e	; 62
    1c4e:	89 83       	std	Y+1, r24	; 0x01
    1c50:	6a 83       	std	Y+2, r22	; 0x02
    1c52:	4b 83       	std	Y+3, r20	; 0x03
	if(copy_u8pin>=PIN0&&copy_u8pin<=PIN7&&copy_u8value>=LOW&&copy_u8value<=HIGH){
    1c54:	8a 81       	ldd	r24, Y+2	; 0x02
    1c56:	88 30       	cpi	r24, 0x08	; 8
    1c58:	08 f0       	brcs	.+2      	; 0x1c5c <DIO_enuSetPinVAL+0x1c>
    1c5a:	ca c0       	rjmp	.+404    	; 0x1df0 <DIO_enuSetPinVAL+0x1b0>
    1c5c:	8b 81       	ldd	r24, Y+3	; 0x03
    1c5e:	82 30       	cpi	r24, 0x02	; 2
    1c60:	08 f0       	brcs	.+2      	; 0x1c64 <DIO_enuSetPinVAL+0x24>
    1c62:	c6 c0       	rjmp	.+396    	; 0x1df0 <DIO_enuSetPinVAL+0x1b0>
	switch(copy_u8port){
    1c64:	89 81       	ldd	r24, Y+1	; 0x01
    1c66:	28 2f       	mov	r18, r24
    1c68:	30 e0       	ldi	r19, 0x00	; 0
    1c6a:	3d 83       	std	Y+5, r19	; 0x05
    1c6c:	2c 83       	std	Y+4, r18	; 0x04
    1c6e:	6c 81       	ldd	r22, Y+4	; 0x04
    1c70:	7d 81       	ldd	r23, Y+5	; 0x05
    1c72:	61 30       	cpi	r22, 0x01	; 1
    1c74:	71 05       	cpc	r23, r1
    1c76:	09 f4       	brne	.+2      	; 0x1c7a <DIO_enuSetPinVAL+0x3a>
    1c78:	41 c0       	rjmp	.+130    	; 0x1cfc <DIO_enuSetPinVAL+0xbc>
    1c7a:	8c 81       	ldd	r24, Y+4	; 0x04
    1c7c:	9d 81       	ldd	r25, Y+5	; 0x05
    1c7e:	82 30       	cpi	r24, 0x02	; 2
    1c80:	91 05       	cpc	r25, r1
    1c82:	34 f4       	brge	.+12     	; 0x1c90 <DIO_enuSetPinVAL+0x50>
    1c84:	2c 81       	ldd	r18, Y+4	; 0x04
    1c86:	3d 81       	ldd	r19, Y+5	; 0x05
    1c88:	21 15       	cp	r18, r1
    1c8a:	31 05       	cpc	r19, r1
    1c8c:	71 f0       	breq	.+28     	; 0x1caa <DIO_enuSetPinVAL+0x6a>
    1c8e:	b0 c0       	rjmp	.+352    	; 0x1df0 <DIO_enuSetPinVAL+0x1b0>
    1c90:	6c 81       	ldd	r22, Y+4	; 0x04
    1c92:	7d 81       	ldd	r23, Y+5	; 0x05
    1c94:	62 30       	cpi	r22, 0x02	; 2
    1c96:	71 05       	cpc	r23, r1
    1c98:	09 f4       	brne	.+2      	; 0x1c9c <DIO_enuSetPinVAL+0x5c>
    1c9a:	59 c0       	rjmp	.+178    	; 0x1d4e <DIO_enuSetPinVAL+0x10e>
    1c9c:	8c 81       	ldd	r24, Y+4	; 0x04
    1c9e:	9d 81       	ldd	r25, Y+5	; 0x05
    1ca0:	83 30       	cpi	r24, 0x03	; 3
    1ca2:	91 05       	cpc	r25, r1
    1ca4:	09 f4       	brne	.+2      	; 0x1ca8 <DIO_enuSetPinVAL+0x68>
    1ca6:	7c c0       	rjmp	.+248    	; 0x1da0 <DIO_enuSetPinVAL+0x160>
    1ca8:	a3 c0       	rjmp	.+326    	; 0x1df0 <DIO_enuSetPinVAL+0x1b0>
		case DIO_u8PORTA:
			PORTA&=~(masking_bit<<copy_u8pin);
    1caa:	ab e3       	ldi	r26, 0x3B	; 59
    1cac:	b0 e0       	ldi	r27, 0x00	; 0
    1cae:	eb e3       	ldi	r30, 0x3B	; 59
    1cb0:	f0 e0       	ldi	r31, 0x00	; 0
    1cb2:	80 81       	ld	r24, Z
    1cb4:	48 2f       	mov	r20, r24
    1cb6:	8a 81       	ldd	r24, Y+2	; 0x02
    1cb8:	28 2f       	mov	r18, r24
    1cba:	30 e0       	ldi	r19, 0x00	; 0
    1cbc:	81 e0       	ldi	r24, 0x01	; 1
    1cbe:	90 e0       	ldi	r25, 0x00	; 0
    1cc0:	02 c0       	rjmp	.+4      	; 0x1cc6 <DIO_enuSetPinVAL+0x86>
    1cc2:	88 0f       	add	r24, r24
    1cc4:	99 1f       	adc	r25, r25
    1cc6:	2a 95       	dec	r18
    1cc8:	e2 f7       	brpl	.-8      	; 0x1cc2 <DIO_enuSetPinVAL+0x82>
    1cca:	80 95       	com	r24
    1ccc:	84 23       	and	r24, r20
    1cce:	8c 93       	st	X, r24
			PORTA|=(copy_u8value<<copy_u8pin);
    1cd0:	ab e3       	ldi	r26, 0x3B	; 59
    1cd2:	b0 e0       	ldi	r27, 0x00	; 0
    1cd4:	eb e3       	ldi	r30, 0x3B	; 59
    1cd6:	f0 e0       	ldi	r31, 0x00	; 0
    1cd8:	80 81       	ld	r24, Z
    1cda:	48 2f       	mov	r20, r24
    1cdc:	8b 81       	ldd	r24, Y+3	; 0x03
    1cde:	28 2f       	mov	r18, r24
    1ce0:	30 e0       	ldi	r19, 0x00	; 0
    1ce2:	8a 81       	ldd	r24, Y+2	; 0x02
    1ce4:	88 2f       	mov	r24, r24
    1ce6:	90 e0       	ldi	r25, 0x00	; 0
    1ce8:	b9 01       	movw	r22, r18
    1cea:	02 c0       	rjmp	.+4      	; 0x1cf0 <DIO_enuSetPinVAL+0xb0>
    1cec:	66 0f       	add	r22, r22
    1cee:	77 1f       	adc	r23, r23
    1cf0:	8a 95       	dec	r24
    1cf2:	e2 f7       	brpl	.-8      	; 0x1cec <DIO_enuSetPinVAL+0xac>
    1cf4:	cb 01       	movw	r24, r22
    1cf6:	84 2b       	or	r24, r20
    1cf8:	8c 93       	st	X, r24
    1cfa:	7a c0       	rjmp	.+244    	; 0x1df0 <DIO_enuSetPinVAL+0x1b0>
			break;

		case DIO_u8PORTB:
			PORTB&=~(masking_bit<<copy_u8pin);
    1cfc:	a8 e3       	ldi	r26, 0x38	; 56
    1cfe:	b0 e0       	ldi	r27, 0x00	; 0
    1d00:	e8 e3       	ldi	r30, 0x38	; 56
    1d02:	f0 e0       	ldi	r31, 0x00	; 0
    1d04:	80 81       	ld	r24, Z
    1d06:	48 2f       	mov	r20, r24
    1d08:	8a 81       	ldd	r24, Y+2	; 0x02
    1d0a:	28 2f       	mov	r18, r24
    1d0c:	30 e0       	ldi	r19, 0x00	; 0
    1d0e:	81 e0       	ldi	r24, 0x01	; 1
    1d10:	90 e0       	ldi	r25, 0x00	; 0
    1d12:	02 c0       	rjmp	.+4      	; 0x1d18 <DIO_enuSetPinVAL+0xd8>
    1d14:	88 0f       	add	r24, r24
    1d16:	99 1f       	adc	r25, r25
    1d18:	2a 95       	dec	r18
    1d1a:	e2 f7       	brpl	.-8      	; 0x1d14 <DIO_enuSetPinVAL+0xd4>
    1d1c:	80 95       	com	r24
    1d1e:	84 23       	and	r24, r20
    1d20:	8c 93       	st	X, r24
			PORTB|=(copy_u8value<<copy_u8pin);
    1d22:	a8 e3       	ldi	r26, 0x38	; 56
    1d24:	b0 e0       	ldi	r27, 0x00	; 0
    1d26:	e8 e3       	ldi	r30, 0x38	; 56
    1d28:	f0 e0       	ldi	r31, 0x00	; 0
    1d2a:	80 81       	ld	r24, Z
    1d2c:	48 2f       	mov	r20, r24
    1d2e:	8b 81       	ldd	r24, Y+3	; 0x03
    1d30:	28 2f       	mov	r18, r24
    1d32:	30 e0       	ldi	r19, 0x00	; 0
    1d34:	8a 81       	ldd	r24, Y+2	; 0x02
    1d36:	88 2f       	mov	r24, r24
    1d38:	90 e0       	ldi	r25, 0x00	; 0
    1d3a:	b9 01       	movw	r22, r18
    1d3c:	02 c0       	rjmp	.+4      	; 0x1d42 <DIO_enuSetPinVAL+0x102>
    1d3e:	66 0f       	add	r22, r22
    1d40:	77 1f       	adc	r23, r23
    1d42:	8a 95       	dec	r24
    1d44:	e2 f7       	brpl	.-8      	; 0x1d3e <DIO_enuSetPinVAL+0xfe>
    1d46:	cb 01       	movw	r24, r22
    1d48:	84 2b       	or	r24, r20
    1d4a:	8c 93       	st	X, r24
    1d4c:	51 c0       	rjmp	.+162    	; 0x1df0 <DIO_enuSetPinVAL+0x1b0>
			break;

		case DIO_u8PORTC:
			PORTC&=~(masking_bit<<copy_u8pin);
    1d4e:	a5 e3       	ldi	r26, 0x35	; 53
    1d50:	b0 e0       	ldi	r27, 0x00	; 0
    1d52:	e5 e3       	ldi	r30, 0x35	; 53
    1d54:	f0 e0       	ldi	r31, 0x00	; 0
    1d56:	80 81       	ld	r24, Z
    1d58:	48 2f       	mov	r20, r24
    1d5a:	8a 81       	ldd	r24, Y+2	; 0x02
    1d5c:	28 2f       	mov	r18, r24
    1d5e:	30 e0       	ldi	r19, 0x00	; 0
    1d60:	81 e0       	ldi	r24, 0x01	; 1
    1d62:	90 e0       	ldi	r25, 0x00	; 0
    1d64:	02 c0       	rjmp	.+4      	; 0x1d6a <DIO_enuSetPinVAL+0x12a>
    1d66:	88 0f       	add	r24, r24
    1d68:	99 1f       	adc	r25, r25
    1d6a:	2a 95       	dec	r18
    1d6c:	e2 f7       	brpl	.-8      	; 0x1d66 <DIO_enuSetPinVAL+0x126>
    1d6e:	80 95       	com	r24
    1d70:	84 23       	and	r24, r20
    1d72:	8c 93       	st	X, r24
			PORTC|=(copy_u8value<<copy_u8pin);
    1d74:	a5 e3       	ldi	r26, 0x35	; 53
    1d76:	b0 e0       	ldi	r27, 0x00	; 0
    1d78:	e5 e3       	ldi	r30, 0x35	; 53
    1d7a:	f0 e0       	ldi	r31, 0x00	; 0
    1d7c:	80 81       	ld	r24, Z
    1d7e:	48 2f       	mov	r20, r24
    1d80:	8b 81       	ldd	r24, Y+3	; 0x03
    1d82:	28 2f       	mov	r18, r24
    1d84:	30 e0       	ldi	r19, 0x00	; 0
    1d86:	8a 81       	ldd	r24, Y+2	; 0x02
    1d88:	88 2f       	mov	r24, r24
    1d8a:	90 e0       	ldi	r25, 0x00	; 0
    1d8c:	b9 01       	movw	r22, r18
    1d8e:	02 c0       	rjmp	.+4      	; 0x1d94 <DIO_enuSetPinVAL+0x154>
    1d90:	66 0f       	add	r22, r22
    1d92:	77 1f       	adc	r23, r23
    1d94:	8a 95       	dec	r24
    1d96:	e2 f7       	brpl	.-8      	; 0x1d90 <DIO_enuSetPinVAL+0x150>
    1d98:	cb 01       	movw	r24, r22
    1d9a:	84 2b       	or	r24, r20
    1d9c:	8c 93       	st	X, r24
    1d9e:	28 c0       	rjmp	.+80     	; 0x1df0 <DIO_enuSetPinVAL+0x1b0>
			break;

		case DIO_u8PORTD:
			PORTD&=~(masking_bit<<copy_u8pin);
    1da0:	a2 e3       	ldi	r26, 0x32	; 50
    1da2:	b0 e0       	ldi	r27, 0x00	; 0
    1da4:	e2 e3       	ldi	r30, 0x32	; 50
    1da6:	f0 e0       	ldi	r31, 0x00	; 0
    1da8:	80 81       	ld	r24, Z
    1daa:	48 2f       	mov	r20, r24
    1dac:	8a 81       	ldd	r24, Y+2	; 0x02
    1dae:	28 2f       	mov	r18, r24
    1db0:	30 e0       	ldi	r19, 0x00	; 0
    1db2:	81 e0       	ldi	r24, 0x01	; 1
    1db4:	90 e0       	ldi	r25, 0x00	; 0
    1db6:	02 c0       	rjmp	.+4      	; 0x1dbc <DIO_enuSetPinVAL+0x17c>
    1db8:	88 0f       	add	r24, r24
    1dba:	99 1f       	adc	r25, r25
    1dbc:	2a 95       	dec	r18
    1dbe:	e2 f7       	brpl	.-8      	; 0x1db8 <DIO_enuSetPinVAL+0x178>
    1dc0:	80 95       	com	r24
    1dc2:	84 23       	and	r24, r20
    1dc4:	8c 93       	st	X, r24
			PORTD|=(copy_u8value<<copy_u8pin);
    1dc6:	a2 e3       	ldi	r26, 0x32	; 50
    1dc8:	b0 e0       	ldi	r27, 0x00	; 0
    1dca:	e2 e3       	ldi	r30, 0x32	; 50
    1dcc:	f0 e0       	ldi	r31, 0x00	; 0
    1dce:	80 81       	ld	r24, Z
    1dd0:	48 2f       	mov	r20, r24
    1dd2:	8b 81       	ldd	r24, Y+3	; 0x03
    1dd4:	28 2f       	mov	r18, r24
    1dd6:	30 e0       	ldi	r19, 0x00	; 0
    1dd8:	8a 81       	ldd	r24, Y+2	; 0x02
    1dda:	88 2f       	mov	r24, r24
    1ddc:	90 e0       	ldi	r25, 0x00	; 0
    1dde:	b9 01       	movw	r22, r18
    1de0:	02 c0       	rjmp	.+4      	; 0x1de6 <DIO_enuSetPinVAL+0x1a6>
    1de2:	66 0f       	add	r22, r22
    1de4:	77 1f       	adc	r23, r23
    1de6:	8a 95       	dec	r24
    1de8:	e2 f7       	brpl	.-8      	; 0x1de2 <DIO_enuSetPinVAL+0x1a2>
    1dea:	cb 01       	movw	r24, r22
    1dec:	84 2b       	or	r24, r20
    1dee:	8c 93       	st	X, r24
			break;
		}
	}
}
    1df0:	26 96       	adiw	r28, 0x06	; 6
    1df2:	0f b6       	in	r0, 0x3f	; 63
    1df4:	f8 94       	cli
    1df6:	de bf       	out	0x3e, r29	; 62
    1df8:	0f be       	out	0x3f, r0	; 63
    1dfa:	cd bf       	out	0x3d, r28	; 61
    1dfc:	cf 91       	pop	r28
    1dfe:	df 91       	pop	r29
    1e00:	08 95       	ret

00001e02 <DIO_enuTogPin>:
ES_t DIO_enuTogPin(u8 copy_u8port,u8 copy_u8pin){
    1e02:	df 93       	push	r29
    1e04:	cf 93       	push	r28
    1e06:	00 d0       	rcall	.+0      	; 0x1e08 <DIO_enuTogPin+0x6>
    1e08:	00 d0       	rcall	.+0      	; 0x1e0a <DIO_enuTogPin+0x8>
    1e0a:	0f 92       	push	r0
    1e0c:	cd b7       	in	r28, 0x3d	; 61
    1e0e:	de b7       	in	r29, 0x3e	; 62
    1e10:	89 83       	std	Y+1, r24	; 0x01
    1e12:	6a 83       	std	Y+2, r22	; 0x02
	switch(copy_u8port){
    1e14:	89 81       	ldd	r24, Y+1	; 0x01
    1e16:	28 2f       	mov	r18, r24
    1e18:	30 e0       	ldi	r19, 0x00	; 0
    1e1a:	3c 83       	std	Y+4, r19	; 0x04
    1e1c:	2b 83       	std	Y+3, r18	; 0x03
    1e1e:	8b 81       	ldd	r24, Y+3	; 0x03
    1e20:	9c 81       	ldd	r25, Y+4	; 0x04
    1e22:	81 30       	cpi	r24, 0x01	; 1
    1e24:	91 05       	cpc	r25, r1
    1e26:	49 f1       	breq	.+82     	; 0x1e7a <DIO_enuTogPin+0x78>
    1e28:	2b 81       	ldd	r18, Y+3	; 0x03
    1e2a:	3c 81       	ldd	r19, Y+4	; 0x04
    1e2c:	22 30       	cpi	r18, 0x02	; 2
    1e2e:	31 05       	cpc	r19, r1
    1e30:	2c f4       	brge	.+10     	; 0x1e3c <DIO_enuTogPin+0x3a>
    1e32:	8b 81       	ldd	r24, Y+3	; 0x03
    1e34:	9c 81       	ldd	r25, Y+4	; 0x04
    1e36:	00 97       	sbiw	r24, 0x00	; 0
    1e38:	61 f0       	breq	.+24     	; 0x1e52 <DIO_enuTogPin+0x50>
    1e3a:	5a c0       	rjmp	.+180    	; 0x1ef0 <DIO_enuTogPin+0xee>
    1e3c:	2b 81       	ldd	r18, Y+3	; 0x03
    1e3e:	3c 81       	ldd	r19, Y+4	; 0x04
    1e40:	22 30       	cpi	r18, 0x02	; 2
    1e42:	31 05       	cpc	r19, r1
    1e44:	71 f1       	breq	.+92     	; 0x1ea2 <DIO_enuTogPin+0xa0>
    1e46:	8b 81       	ldd	r24, Y+3	; 0x03
    1e48:	9c 81       	ldd	r25, Y+4	; 0x04
    1e4a:	83 30       	cpi	r24, 0x03	; 3
    1e4c:	91 05       	cpc	r25, r1
    1e4e:	e9 f1       	breq	.+122    	; 0x1eca <DIO_enuTogPin+0xc8>
    1e50:	4f c0       	rjmp	.+158    	; 0x1ef0 <DIO_enuTogPin+0xee>
			case DIO_u8PORTA:
				PORTA^=(masking_bit<<copy_u8pin);
    1e52:	ab e3       	ldi	r26, 0x3B	; 59
    1e54:	b0 e0       	ldi	r27, 0x00	; 0
    1e56:	eb e3       	ldi	r30, 0x3B	; 59
    1e58:	f0 e0       	ldi	r31, 0x00	; 0
    1e5a:	80 81       	ld	r24, Z
    1e5c:	48 2f       	mov	r20, r24
    1e5e:	8a 81       	ldd	r24, Y+2	; 0x02
    1e60:	28 2f       	mov	r18, r24
    1e62:	30 e0       	ldi	r19, 0x00	; 0
    1e64:	81 e0       	ldi	r24, 0x01	; 1
    1e66:	90 e0       	ldi	r25, 0x00	; 0
    1e68:	02 2e       	mov	r0, r18
    1e6a:	02 c0       	rjmp	.+4      	; 0x1e70 <DIO_enuTogPin+0x6e>
    1e6c:	88 0f       	add	r24, r24
    1e6e:	99 1f       	adc	r25, r25
    1e70:	0a 94       	dec	r0
    1e72:	e2 f7       	brpl	.-8      	; 0x1e6c <DIO_enuTogPin+0x6a>
    1e74:	84 27       	eor	r24, r20
    1e76:	8c 93       	st	X, r24
    1e78:	3b c0       	rjmp	.+118    	; 0x1ef0 <DIO_enuTogPin+0xee>
				break;

			case DIO_u8PORTB:
				PORTB^=(masking_bit<<copy_u8pin);
    1e7a:	a8 e3       	ldi	r26, 0x38	; 56
    1e7c:	b0 e0       	ldi	r27, 0x00	; 0
    1e7e:	e8 e3       	ldi	r30, 0x38	; 56
    1e80:	f0 e0       	ldi	r31, 0x00	; 0
    1e82:	80 81       	ld	r24, Z
    1e84:	48 2f       	mov	r20, r24
    1e86:	8a 81       	ldd	r24, Y+2	; 0x02
    1e88:	28 2f       	mov	r18, r24
    1e8a:	30 e0       	ldi	r19, 0x00	; 0
    1e8c:	81 e0       	ldi	r24, 0x01	; 1
    1e8e:	90 e0       	ldi	r25, 0x00	; 0
    1e90:	02 2e       	mov	r0, r18
    1e92:	02 c0       	rjmp	.+4      	; 0x1e98 <DIO_enuTogPin+0x96>
    1e94:	88 0f       	add	r24, r24
    1e96:	99 1f       	adc	r25, r25
    1e98:	0a 94       	dec	r0
    1e9a:	e2 f7       	brpl	.-8      	; 0x1e94 <DIO_enuTogPin+0x92>
    1e9c:	84 27       	eor	r24, r20
    1e9e:	8c 93       	st	X, r24
    1ea0:	27 c0       	rjmp	.+78     	; 0x1ef0 <DIO_enuTogPin+0xee>
				break;

			case DIO_u8PORTC:
				PORTC^=(masking_bit<<copy_u8pin);
    1ea2:	a5 e3       	ldi	r26, 0x35	; 53
    1ea4:	b0 e0       	ldi	r27, 0x00	; 0
    1ea6:	e5 e3       	ldi	r30, 0x35	; 53
    1ea8:	f0 e0       	ldi	r31, 0x00	; 0
    1eaa:	80 81       	ld	r24, Z
    1eac:	48 2f       	mov	r20, r24
    1eae:	8a 81       	ldd	r24, Y+2	; 0x02
    1eb0:	28 2f       	mov	r18, r24
    1eb2:	30 e0       	ldi	r19, 0x00	; 0
    1eb4:	81 e0       	ldi	r24, 0x01	; 1
    1eb6:	90 e0       	ldi	r25, 0x00	; 0
    1eb8:	02 2e       	mov	r0, r18
    1eba:	02 c0       	rjmp	.+4      	; 0x1ec0 <DIO_enuTogPin+0xbe>
    1ebc:	88 0f       	add	r24, r24
    1ebe:	99 1f       	adc	r25, r25
    1ec0:	0a 94       	dec	r0
    1ec2:	e2 f7       	brpl	.-8      	; 0x1ebc <DIO_enuTogPin+0xba>
    1ec4:	84 27       	eor	r24, r20
    1ec6:	8c 93       	st	X, r24
    1ec8:	13 c0       	rjmp	.+38     	; 0x1ef0 <DIO_enuTogPin+0xee>
				break;

			case DIO_u8PORTD:
				PORTD^=(masking_bit<<copy_u8pin);
    1eca:	a2 e3       	ldi	r26, 0x32	; 50
    1ecc:	b0 e0       	ldi	r27, 0x00	; 0
    1ece:	e2 e3       	ldi	r30, 0x32	; 50
    1ed0:	f0 e0       	ldi	r31, 0x00	; 0
    1ed2:	80 81       	ld	r24, Z
    1ed4:	48 2f       	mov	r20, r24
    1ed6:	8a 81       	ldd	r24, Y+2	; 0x02
    1ed8:	28 2f       	mov	r18, r24
    1eda:	30 e0       	ldi	r19, 0x00	; 0
    1edc:	81 e0       	ldi	r24, 0x01	; 1
    1ede:	90 e0       	ldi	r25, 0x00	; 0
    1ee0:	02 2e       	mov	r0, r18
    1ee2:	02 c0       	rjmp	.+4      	; 0x1ee8 <DIO_enuTogPin+0xe6>
    1ee4:	88 0f       	add	r24, r24
    1ee6:	99 1f       	adc	r25, r25
    1ee8:	0a 94       	dec	r0
    1eea:	e2 f7       	brpl	.-8      	; 0x1ee4 <DIO_enuTogPin+0xe2>
    1eec:	84 27       	eor	r24, r20
    1eee:	8c 93       	st	X, r24
				break;
			}
}
    1ef0:	0f 90       	pop	r0
    1ef2:	0f 90       	pop	r0
    1ef4:	0f 90       	pop	r0
    1ef6:	0f 90       	pop	r0
    1ef8:	0f 90       	pop	r0
    1efa:	cf 91       	pop	r28
    1efc:	df 91       	pop	r29
    1efe:	08 95       	ret

00001f00 <DIO_enuGetPortval>:

ES_t DIO_enuGetPortval(u8 copy_u8port, u8 *copy_u8value){
    1f00:	df 93       	push	r29
    1f02:	cf 93       	push	r28
    1f04:	00 d0       	rcall	.+0      	; 0x1f06 <DIO_enuGetPortval+0x6>
    1f06:	00 d0       	rcall	.+0      	; 0x1f08 <DIO_enuGetPortval+0x8>
    1f08:	00 d0       	rcall	.+0      	; 0x1f0a <DIO_enuGetPortval+0xa>
    1f0a:	cd b7       	in	r28, 0x3d	; 61
    1f0c:	de b7       	in	r29, 0x3e	; 62
    1f0e:	89 83       	std	Y+1, r24	; 0x01
    1f10:	7b 83       	std	Y+3, r23	; 0x03
    1f12:	6a 83       	std	Y+2, r22	; 0x02
	switch(copy_u8port){
    1f14:	89 81       	ldd	r24, Y+1	; 0x01
    1f16:	28 2f       	mov	r18, r24
    1f18:	30 e0       	ldi	r19, 0x00	; 0
    1f1a:	3d 83       	std	Y+5, r19	; 0x05
    1f1c:	2c 83       	std	Y+4, r18	; 0x04
    1f1e:	8c 81       	ldd	r24, Y+4	; 0x04
    1f20:	9d 81       	ldd	r25, Y+5	; 0x05
    1f22:	81 30       	cpi	r24, 0x01	; 1
    1f24:	91 05       	cpc	r25, r1
    1f26:	e1 f0       	breq	.+56     	; 0x1f60 <DIO_enuGetPortval+0x60>
    1f28:	2c 81       	ldd	r18, Y+4	; 0x04
    1f2a:	3d 81       	ldd	r19, Y+5	; 0x05
    1f2c:	22 30       	cpi	r18, 0x02	; 2
    1f2e:	31 05       	cpc	r19, r1
    1f30:	2c f4       	brge	.+10     	; 0x1f3c <DIO_enuGetPortval+0x3c>
    1f32:	8c 81       	ldd	r24, Y+4	; 0x04
    1f34:	9d 81       	ldd	r25, Y+5	; 0x05
    1f36:	00 97       	sbiw	r24, 0x00	; 0
    1f38:	61 f0       	breq	.+24     	; 0x1f52 <DIO_enuGetPortval+0x52>
    1f3a:	26 c0       	rjmp	.+76     	; 0x1f88 <DIO_enuGetPortval+0x88>
    1f3c:	2c 81       	ldd	r18, Y+4	; 0x04
    1f3e:	3d 81       	ldd	r19, Y+5	; 0x05
    1f40:	22 30       	cpi	r18, 0x02	; 2
    1f42:	31 05       	cpc	r19, r1
    1f44:	a1 f0       	breq	.+40     	; 0x1f6e <DIO_enuGetPortval+0x6e>
    1f46:	8c 81       	ldd	r24, Y+4	; 0x04
    1f48:	9d 81       	ldd	r25, Y+5	; 0x05
    1f4a:	83 30       	cpi	r24, 0x03	; 3
    1f4c:	91 05       	cpc	r25, r1
    1f4e:	b1 f0       	breq	.+44     	; 0x1f7c <DIO_enuGetPortval+0x7c>
    1f50:	1b c0       	rjmp	.+54     	; 0x1f88 <DIO_enuGetPortval+0x88>
			case DIO_u8PORTA:
				*copy_u8value=PINA;
    1f52:	e9 e3       	ldi	r30, 0x39	; 57
    1f54:	f0 e0       	ldi	r31, 0x00	; 0
    1f56:	80 81       	ld	r24, Z
    1f58:	ea 81       	ldd	r30, Y+2	; 0x02
    1f5a:	fb 81       	ldd	r31, Y+3	; 0x03
    1f5c:	80 83       	st	Z, r24
    1f5e:	14 c0       	rjmp	.+40     	; 0x1f88 <DIO_enuGetPortval+0x88>
				break;

			case DIO_u8PORTB:
				*copy_u8value=PINB;
    1f60:	e6 e3       	ldi	r30, 0x36	; 54
    1f62:	f0 e0       	ldi	r31, 0x00	; 0
    1f64:	80 81       	ld	r24, Z
    1f66:	ea 81       	ldd	r30, Y+2	; 0x02
    1f68:	fb 81       	ldd	r31, Y+3	; 0x03
    1f6a:	80 83       	st	Z, r24
    1f6c:	0d c0       	rjmp	.+26     	; 0x1f88 <DIO_enuGetPortval+0x88>
				break;

			case DIO_u8PORTC:
				*copy_u8value=PINC;
    1f6e:	e3 e3       	ldi	r30, 0x33	; 51
    1f70:	f0 e0       	ldi	r31, 0x00	; 0
    1f72:	80 81       	ld	r24, Z
    1f74:	ea 81       	ldd	r30, Y+2	; 0x02
    1f76:	fb 81       	ldd	r31, Y+3	; 0x03
    1f78:	80 83       	st	Z, r24
    1f7a:	06 c0       	rjmp	.+12     	; 0x1f88 <DIO_enuGetPortval+0x88>
				break;

			case DIO_u8PORTD:
				*copy_u8value=PIND;
    1f7c:	e0 e3       	ldi	r30, 0x30	; 48
    1f7e:	f0 e0       	ldi	r31, 0x00	; 0
    1f80:	80 81       	ld	r24, Z
    1f82:	ea 81       	ldd	r30, Y+2	; 0x02
    1f84:	fb 81       	ldd	r31, Y+3	; 0x03
    1f86:	80 83       	st	Z, r24
				break;
			}

}
    1f88:	26 96       	adiw	r28, 0x06	; 6
    1f8a:	0f b6       	in	r0, 0x3f	; 63
    1f8c:	f8 94       	cli
    1f8e:	de bf       	out	0x3e, r29	; 62
    1f90:	0f be       	out	0x3f, r0	; 63
    1f92:	cd bf       	out	0x3d, r28	; 61
    1f94:	cf 91       	pop	r28
    1f96:	df 91       	pop	r29
    1f98:	08 95       	ret

00001f9a <DIO_enuGetPinval>:
ES_t DIO_enuGetPinval(u8 copy_u8port,u8 copy_u8pin, u8 *copy_u8value){
    1f9a:	df 93       	push	r29
    1f9c:	cf 93       	push	r28
    1f9e:	cd b7       	in	r28, 0x3d	; 61
    1fa0:	de b7       	in	r29, 0x3e	; 62
    1fa2:	27 97       	sbiw	r28, 0x07	; 7
    1fa4:	0f b6       	in	r0, 0x3f	; 63
    1fa6:	f8 94       	cli
    1fa8:	de bf       	out	0x3e, r29	; 62
    1faa:	0f be       	out	0x3f, r0	; 63
    1fac:	cd bf       	out	0x3d, r28	; 61
    1fae:	89 83       	std	Y+1, r24	; 0x01
    1fb0:	6a 83       	std	Y+2, r22	; 0x02
    1fb2:	5c 83       	std	Y+4, r21	; 0x04
    1fb4:	4b 83       	std	Y+3, r20	; 0x03
	switch(copy_u8port){
    1fb6:	89 81       	ldd	r24, Y+1	; 0x01
    1fb8:	28 2f       	mov	r18, r24
    1fba:	30 e0       	ldi	r19, 0x00	; 0
    1fbc:	3e 83       	std	Y+6, r19	; 0x06
    1fbe:	2d 83       	std	Y+5, r18	; 0x05
    1fc0:	4d 81       	ldd	r20, Y+5	; 0x05
    1fc2:	5e 81       	ldd	r21, Y+6	; 0x06
    1fc4:	41 30       	cpi	r20, 0x01	; 1
    1fc6:	51 05       	cpc	r21, r1
    1fc8:	59 f1       	breq	.+86     	; 0x2020 <DIO_enuGetPinval+0x86>
    1fca:	8d 81       	ldd	r24, Y+5	; 0x05
    1fcc:	9e 81       	ldd	r25, Y+6	; 0x06
    1fce:	82 30       	cpi	r24, 0x02	; 2
    1fd0:	91 05       	cpc	r25, r1
    1fd2:	34 f4       	brge	.+12     	; 0x1fe0 <DIO_enuGetPinval+0x46>
    1fd4:	2d 81       	ldd	r18, Y+5	; 0x05
    1fd6:	3e 81       	ldd	r19, Y+6	; 0x06
    1fd8:	21 15       	cp	r18, r1
    1fda:	31 05       	cpc	r19, r1
    1fdc:	69 f0       	breq	.+26     	; 0x1ff8 <DIO_enuGetPinval+0x5e>
    1fde:	5b c0       	rjmp	.+182    	; 0x2096 <DIO_enuGetPinval+0xfc>
    1fe0:	4d 81       	ldd	r20, Y+5	; 0x05
    1fe2:	5e 81       	ldd	r21, Y+6	; 0x06
    1fe4:	42 30       	cpi	r20, 0x02	; 2
    1fe6:	51 05       	cpc	r21, r1
    1fe8:	79 f1       	breq	.+94     	; 0x2048 <DIO_enuGetPinval+0xae>
    1fea:	8d 81       	ldd	r24, Y+5	; 0x05
    1fec:	9e 81       	ldd	r25, Y+6	; 0x06
    1fee:	83 30       	cpi	r24, 0x03	; 3
    1ff0:	91 05       	cpc	r25, r1
    1ff2:	09 f4       	brne	.+2      	; 0x1ff6 <DIO_enuGetPinval+0x5c>
    1ff4:	3d c0       	rjmp	.+122    	; 0x2070 <DIO_enuGetPinval+0xd6>
    1ff6:	4f c0       	rjmp	.+158    	; 0x2096 <DIO_enuGetPinval+0xfc>
			case DIO_u8PORTA:
				*copy_u8value=((PINA>>copy_u8pin) &masking_bit);
    1ff8:	e9 e3       	ldi	r30, 0x39	; 57
    1ffa:	f0 e0       	ldi	r31, 0x00	; 0
    1ffc:	80 81       	ld	r24, Z
    1ffe:	28 2f       	mov	r18, r24
    2000:	30 e0       	ldi	r19, 0x00	; 0
    2002:	8a 81       	ldd	r24, Y+2	; 0x02
    2004:	88 2f       	mov	r24, r24
    2006:	90 e0       	ldi	r25, 0x00	; 0
    2008:	a9 01       	movw	r20, r18
    200a:	02 c0       	rjmp	.+4      	; 0x2010 <DIO_enuGetPinval+0x76>
    200c:	55 95       	asr	r21
    200e:	47 95       	ror	r20
    2010:	8a 95       	dec	r24
    2012:	e2 f7       	brpl	.-8      	; 0x200c <DIO_enuGetPinval+0x72>
    2014:	ca 01       	movw	r24, r20
    2016:	81 70       	andi	r24, 0x01	; 1
    2018:	eb 81       	ldd	r30, Y+3	; 0x03
    201a:	fc 81       	ldd	r31, Y+4	; 0x04
    201c:	80 83       	st	Z, r24
    201e:	3b c0       	rjmp	.+118    	; 0x2096 <DIO_enuGetPinval+0xfc>
				break;

			case DIO_u8PORTB:
				*copy_u8value=((PINB>>copy_u8pin) &masking_bit);
    2020:	e6 e3       	ldi	r30, 0x36	; 54
    2022:	f0 e0       	ldi	r31, 0x00	; 0
    2024:	80 81       	ld	r24, Z
    2026:	28 2f       	mov	r18, r24
    2028:	30 e0       	ldi	r19, 0x00	; 0
    202a:	8a 81       	ldd	r24, Y+2	; 0x02
    202c:	88 2f       	mov	r24, r24
    202e:	90 e0       	ldi	r25, 0x00	; 0
    2030:	a9 01       	movw	r20, r18
    2032:	02 c0       	rjmp	.+4      	; 0x2038 <DIO_enuGetPinval+0x9e>
    2034:	55 95       	asr	r21
    2036:	47 95       	ror	r20
    2038:	8a 95       	dec	r24
    203a:	e2 f7       	brpl	.-8      	; 0x2034 <DIO_enuGetPinval+0x9a>
    203c:	ca 01       	movw	r24, r20
    203e:	81 70       	andi	r24, 0x01	; 1
    2040:	eb 81       	ldd	r30, Y+3	; 0x03
    2042:	fc 81       	ldd	r31, Y+4	; 0x04
    2044:	80 83       	st	Z, r24
    2046:	27 c0       	rjmp	.+78     	; 0x2096 <DIO_enuGetPinval+0xfc>
				break;

			case DIO_u8PORTC:
				*copy_u8value=((PINC>>copy_u8pin) &masking_bit);
    2048:	e3 e3       	ldi	r30, 0x33	; 51
    204a:	f0 e0       	ldi	r31, 0x00	; 0
    204c:	80 81       	ld	r24, Z
    204e:	28 2f       	mov	r18, r24
    2050:	30 e0       	ldi	r19, 0x00	; 0
    2052:	8a 81       	ldd	r24, Y+2	; 0x02
    2054:	88 2f       	mov	r24, r24
    2056:	90 e0       	ldi	r25, 0x00	; 0
    2058:	a9 01       	movw	r20, r18
    205a:	02 c0       	rjmp	.+4      	; 0x2060 <DIO_enuGetPinval+0xc6>
    205c:	55 95       	asr	r21
    205e:	47 95       	ror	r20
    2060:	8a 95       	dec	r24
    2062:	e2 f7       	brpl	.-8      	; 0x205c <DIO_enuGetPinval+0xc2>
    2064:	ca 01       	movw	r24, r20
    2066:	81 70       	andi	r24, 0x01	; 1
    2068:	eb 81       	ldd	r30, Y+3	; 0x03
    206a:	fc 81       	ldd	r31, Y+4	; 0x04
    206c:	80 83       	st	Z, r24
    206e:	13 c0       	rjmp	.+38     	; 0x2096 <DIO_enuGetPinval+0xfc>
				break;

			case DIO_u8PORTD:
				*copy_u8value=((PIND>>copy_u8pin) &masking_bit);
    2070:	e0 e3       	ldi	r30, 0x30	; 48
    2072:	f0 e0       	ldi	r31, 0x00	; 0
    2074:	80 81       	ld	r24, Z
    2076:	28 2f       	mov	r18, r24
    2078:	30 e0       	ldi	r19, 0x00	; 0
    207a:	8a 81       	ldd	r24, Y+2	; 0x02
    207c:	88 2f       	mov	r24, r24
    207e:	90 e0       	ldi	r25, 0x00	; 0
    2080:	a9 01       	movw	r20, r18
    2082:	02 c0       	rjmp	.+4      	; 0x2088 <DIO_enuGetPinval+0xee>
    2084:	55 95       	asr	r21
    2086:	47 95       	ror	r20
    2088:	8a 95       	dec	r24
    208a:	e2 f7       	brpl	.-8      	; 0x2084 <DIO_enuGetPinval+0xea>
    208c:	ca 01       	movw	r24, r20
    208e:	81 70       	andi	r24, 0x01	; 1
    2090:	eb 81       	ldd	r30, Y+3	; 0x03
    2092:	fc 81       	ldd	r31, Y+4	; 0x04
    2094:	80 83       	st	Z, r24
				break;
			}

}
    2096:	27 96       	adiw	r28, 0x07	; 7
    2098:	0f b6       	in	r0, 0x3f	; 63
    209a:	f8 94       	cli
    209c:	de bf       	out	0x3e, r29	; 62
    209e:	0f be       	out	0x3f, r0	; 63
    20a0:	cd bf       	out	0x3d, r28	; 61
    20a2:	cf 91       	pop	r28
    20a4:	df 91       	pop	r29
    20a6:	08 95       	ret

000020a8 <ADC_init>:

#include"../../LIB/stdtypes.h"
#include"ADC_int.h"

void ADC_init(void)
{
    20a8:	df 93       	push	r29
    20aa:	cf 93       	push	r28
    20ac:	cd b7       	in	r28, 0x3d	; 61
    20ae:	de b7       	in	r29, 0x3e	; 62
	//VREF CONFIG
	ADMUX|=(MASKING_BIT<<REFS0);
    20b0:	a7 e2       	ldi	r26, 0x27	; 39
    20b2:	b0 e0       	ldi	r27, 0x00	; 0
    20b4:	e7 e2       	ldi	r30, 0x27	; 39
    20b6:	f0 e0       	ldi	r31, 0x00	; 0
    20b8:	80 81       	ld	r24, Z
    20ba:	80 64       	ori	r24, 0x40	; 64
    20bc:	8c 93       	st	X, r24
	ADMUX|=(MASKING_BIT<<REFS1);
    20be:	a7 e2       	ldi	r26, 0x27	; 39
    20c0:	b0 e0       	ldi	r27, 0x00	; 0
    20c2:	e7 e2       	ldi	r30, 0x27	; 39
    20c4:	f0 e0       	ldi	r31, 0x00	; 0
    20c6:	80 81       	ld	r24, Z
    20c8:	80 68       	ori	r24, 0x80	; 128
    20ca:	8c 93       	st	X, r24
	//CHANNEL3
	ADMUX|=(MASKING_BIT<<0);
    20cc:	a7 e2       	ldi	r26, 0x27	; 39
    20ce:	b0 e0       	ldi	r27, 0x00	; 0
    20d0:	e7 e2       	ldi	r30, 0x27	; 39
    20d2:	f0 e0       	ldi	r31, 0x00	; 0
    20d4:	80 81       	ld	r24, Z
    20d6:	81 60       	ori	r24, 0x01	; 1
    20d8:	8c 93       	st	X, r24
	ADMUX|=(MASKING_BIT<<1);
    20da:	a7 e2       	ldi	r26, 0x27	; 39
    20dc:	b0 e0       	ldi	r27, 0x00	; 0
    20de:	e7 e2       	ldi	r30, 0x27	; 39
    20e0:	f0 e0       	ldi	r31, 0x00	; 0
    20e2:	80 81       	ld	r24, Z
    20e4:	82 60       	ori	r24, 0x02	; 2
    20e6:	8c 93       	st	X, r24
//	ADMUX|=(MASKING_BIT<<2);
	//ENABLE ADC
	ADCSRA|=(MASKING_BIT<<ADEN);
    20e8:	a6 e2       	ldi	r26, 0x26	; 38
    20ea:	b0 e0       	ldi	r27, 0x00	; 0
    20ec:	e6 e2       	ldi	r30, 0x26	; 38
    20ee:	f0 e0       	ldi	r31, 0x00	; 0
    20f0:	80 81       	ld	r24, Z
    20f2:	80 68       	ori	r24, 0x80	; 128
    20f4:	8c 93       	st	X, r24
	//AUTO TRIGGER ENABLE
	ADCSRA|=(MASKING_BIT<<ADATE);
    20f6:	a6 e2       	ldi	r26, 0x26	; 38
    20f8:	b0 e0       	ldi	r27, 0x00	; 0
    20fa:	e6 e2       	ldi	r30, 0x26	; 38
    20fc:	f0 e0       	ldi	r31, 0x00	; 0
    20fe:	80 81       	ld	r24, Z
    2100:	80 62       	ori	r24, 0x20	; 32
    2102:	8c 93       	st	X, r24
	//CLOCK ADJ
	ADCSRA|=(MASKING_BIT<<ADPS2);
    2104:	a6 e2       	ldi	r26, 0x26	; 38
    2106:	b0 e0       	ldi	r27, 0x00	; 0
    2108:	e6 e2       	ldi	r30, 0x26	; 38
    210a:	f0 e0       	ldi	r31, 0x00	; 0
    210c:	80 81       	ld	r24, Z
    210e:	84 60       	ori	r24, 0x04	; 4
    2110:	8c 93       	st	X, r24
	ADCSRA|=(MASKING_BIT<<ADPS1);
    2112:	a6 e2       	ldi	r26, 0x26	; 38
    2114:	b0 e0       	ldi	r27, 0x00	; 0
    2116:	e6 e2       	ldi	r30, 0x26	; 38
    2118:	f0 e0       	ldi	r31, 0x00	; 0
    211a:	80 81       	ld	r24, Z
    211c:	82 60       	ori	r24, 0x02	; 2
    211e:	8c 93       	st	X, r24
	//CTC INT
	//SFIOR|=(1>>5);
	//SFIOR|=(1>>6);

}
    2120:	cf 91       	pop	r28
    2122:	df 91       	pop	r29
    2124:	08 95       	ret

00002126 <ADC_read>:


void ADC_read(u16 *copy_u16Read)
{
    2126:	df 93       	push	r29
    2128:	cf 93       	push	r28
    212a:	00 d0       	rcall	.+0      	; 0x212c <ADC_read+0x6>
    212c:	cd b7       	in	r28, 0x3d	; 61
    212e:	de b7       	in	r29, 0x3e	; 62
    2130:	9a 83       	std	Y+2, r25	; 0x02
    2132:	89 83       	std	Y+1, r24	; 0x01
	ADCSRA|=(MASKING_BIT<<ADSC);
    2134:	a6 e2       	ldi	r26, 0x26	; 38
    2136:	b0 e0       	ldi	r27, 0x00	; 0
    2138:	e6 e2       	ldi	r30, 0x26	; 38
    213a:	f0 e0       	ldi	r31, 0x00	; 0
    213c:	80 81       	ld	r24, Z
    213e:	80 64       	ori	r24, 0x40	; 64
    2140:	8c 93       	st	X, r24
	while(((ADCSRA>>ADIF)&MASKING_BIT)==0);
    2142:	e6 e2       	ldi	r30, 0x26	; 38
    2144:	f0 e0       	ldi	r31, 0x00	; 0
    2146:	80 81       	ld	r24, Z
    2148:	82 95       	swap	r24
    214a:	8f 70       	andi	r24, 0x0F	; 15
    214c:	88 2f       	mov	r24, r24
    214e:	90 e0       	ldi	r25, 0x00	; 0
    2150:	81 70       	andi	r24, 0x01	; 1
    2152:	90 70       	andi	r25, 0x00	; 0
    2154:	00 97       	sbiw	r24, 0x00	; 0
    2156:	a9 f3       	breq	.-22     	; 0x2142 <ADC_read+0x1c>
	ADCSRA|=(MASKING_BIT<<ADIF);
    2158:	a6 e2       	ldi	r26, 0x26	; 38
    215a:	b0 e0       	ldi	r27, 0x00	; 0
    215c:	e6 e2       	ldi	r30, 0x26	; 38
    215e:	f0 e0       	ldi	r31, 0x00	; 0
    2160:	80 81       	ld	r24, Z
    2162:	80 61       	ori	r24, 0x10	; 16
    2164:	8c 93       	st	X, r24
	*copy_u16Read=(ADCL);
    2166:	e4 e2       	ldi	r30, 0x24	; 36
    2168:	f0 e0       	ldi	r31, 0x00	; 0
    216a:	80 81       	ld	r24, Z
    216c:	88 2f       	mov	r24, r24
    216e:	90 e0       	ldi	r25, 0x00	; 0
    2170:	e9 81       	ldd	r30, Y+1	; 0x01
    2172:	fa 81       	ldd	r31, Y+2	; 0x02
    2174:	91 83       	std	Z+1, r25	; 0x01
    2176:	80 83       	st	Z, r24
	*copy_u16Read|=(ADCH<<8);
    2178:	e9 81       	ldd	r30, Y+1	; 0x01
    217a:	fa 81       	ldd	r31, Y+2	; 0x02
    217c:	20 81       	ld	r18, Z
    217e:	31 81       	ldd	r19, Z+1	; 0x01
    2180:	e5 e2       	ldi	r30, 0x25	; 37
    2182:	f0 e0       	ldi	r31, 0x00	; 0
    2184:	80 81       	ld	r24, Z
    2186:	88 2f       	mov	r24, r24
    2188:	90 e0       	ldi	r25, 0x00	; 0
    218a:	98 2f       	mov	r25, r24
    218c:	88 27       	eor	r24, r24
    218e:	82 2b       	or	r24, r18
    2190:	93 2b       	or	r25, r19
    2192:	e9 81       	ldd	r30, Y+1	; 0x01
    2194:	fa 81       	ldd	r31, Y+2	; 0x02
    2196:	91 83       	std	Z+1, r25	; 0x01
    2198:	80 83       	st	Z, r24
}
    219a:	0f 90       	pop	r0
    219c:	0f 90       	pop	r0
    219e:	cf 91       	pop	r28
    21a0:	df 91       	pop	r29
    21a2:	08 95       	ret

000021a4 <SWITCH_init>:




ES_t SWITCH_init(void)
{
    21a4:	df 93       	push	r29
    21a6:	cf 93       	push	r28
    21a8:	0f 92       	push	r0
    21aa:	cd b7       	in	r28, 0x3d	; 61
    21ac:	de b7       	in	r29, 0x3e	; 62
	DIO_enuSetPinDIR(SWITCH1_PORT,SWITCH1_PIN,DIO_PIN_INPUT);
    21ae:	80 e0       	ldi	r24, 0x00	; 0
    21b0:	60 e0       	ldi	r22, 0x00	; 0
    21b2:	40 e0       	ldi	r20, 0x00	; 0
    21b4:	0e 94 3f 0d 	call	0x1a7e	; 0x1a7e <DIO_enuSetPinDIR>
	DIO_enuSetPinVAL(SWITCH1_PORT,SWITCH1_PIN,DIO_HIGH);
    21b8:	80 e0       	ldi	r24, 0x00	; 0
    21ba:	60 e0       	ldi	r22, 0x00	; 0
    21bc:	41 e0       	ldi	r20, 0x01	; 1
    21be:	0e 94 20 0e 	call	0x1c40	; 0x1c40 <DIO_enuSetPinVAL>

	DIO_enuSetPinDIR(SWITCH2_PORT,SWITCH2_PIN,DIO_PIN_INPUT);
    21c2:	80 e0       	ldi	r24, 0x00	; 0
    21c4:	61 e0       	ldi	r22, 0x01	; 1
    21c6:	40 e0       	ldi	r20, 0x00	; 0
    21c8:	0e 94 3f 0d 	call	0x1a7e	; 0x1a7e <DIO_enuSetPinDIR>
	DIO_enuSetPinVAL(SWITCH2_PORT,SWITCH2_PIN,DIO_HIGH);
    21cc:	80 e0       	ldi	r24, 0x00	; 0
    21ce:	61 e0       	ldi	r22, 0x01	; 1
    21d0:	41 e0       	ldi	r20, 0x01	; 1
    21d2:	0e 94 20 0e 	call	0x1c40	; 0x1c40 <DIO_enuSetPinVAL>

	DIO_enuSetPinDIR(SWITCH3_PORT,SWITCH3_PIN,DIO_PIN_INPUT);
    21d6:	80 e0       	ldi	r24, 0x00	; 0
    21d8:	62 e0       	ldi	r22, 0x02	; 2
    21da:	40 e0       	ldi	r20, 0x00	; 0
    21dc:	0e 94 3f 0d 	call	0x1a7e	; 0x1a7e <DIO_enuSetPinDIR>
	DIO_enuSetPinVAL(SWITCH3_PORT,SWITCH3_PIN,DIO_HIGH);
    21e0:	80 e0       	ldi	r24, 0x00	; 0
    21e2:	62 e0       	ldi	r22, 0x02	; 2
    21e4:	41 e0       	ldi	r20, 0x01	; 1
    21e6:	0e 94 20 0e 	call	0x1c40	; 0x1c40 <DIO_enuSetPinVAL>

}
    21ea:	0f 90       	pop	r0
    21ec:	cf 91       	pop	r28
    21ee:	df 91       	pop	r29
    21f0:	08 95       	ret

000021f2 <SWITCH_read>:


ES_t SWITCH_read(u8 copy_SWITCH_port,u8 copy_SWITCH_pin,u8 *value)
{
    21f2:	df 93       	push	r29
    21f4:	cf 93       	push	r28
    21f6:	00 d0       	rcall	.+0      	; 0x21f8 <SWITCH_read+0x6>
    21f8:	00 d0       	rcall	.+0      	; 0x21fa <SWITCH_read+0x8>
    21fa:	00 d0       	rcall	.+0      	; 0x21fc <SWITCH_read+0xa>
    21fc:	cd b7       	in	r28, 0x3d	; 61
    21fe:	de b7       	in	r29, 0x3e	; 62
    2200:	8a 83       	std	Y+2, r24	; 0x02
    2202:	6b 83       	std	Y+3, r22	; 0x03
    2204:	5d 83       	std	Y+5, r21	; 0x05
    2206:	4c 83       	std	Y+4, r20	; 0x04
	DIO_enuGetPinval(copy_SWITCH_port,copy_SWITCH_pin,value); ///////////////////////////////!!!!!!!
    2208:	2c 81       	ldd	r18, Y+4	; 0x04
    220a:	3d 81       	ldd	r19, Y+5	; 0x05
    220c:	8a 81       	ldd	r24, Y+2	; 0x02
    220e:	6b 81       	ldd	r22, Y+3	; 0x03
    2210:	a9 01       	movw	r20, r18
    2212:	0e 94 cd 0f 	call	0x1f9a	; 0x1f9a <DIO_enuGetPinval>
	u8 read;
	DIO_enuGetPinval(copy_SWITCH_port,copy_SWITCH_pin,&read);
    2216:	8a 81       	ldd	r24, Y+2	; 0x02
    2218:	6b 81       	ldd	r22, Y+3	; 0x03
    221a:	9e 01       	movw	r18, r28
    221c:	2f 5f       	subi	r18, 0xFF	; 255
    221e:	3f 4f       	sbci	r19, 0xFF	; 255
    2220:	a9 01       	movw	r20, r18
    2222:	0e 94 cd 0f 	call	0x1f9a	; 0x1f9a <DIO_enuGetPinval>
    2226:	08 c0       	rjmp	.+16     	; 0x2238 <SWITCH_read+0x46>
	while(read==0)
	{
		DIO_enuGetPinval(copy_SWITCH_port,copy_SWITCH_pin,&read);
    2228:	8a 81       	ldd	r24, Y+2	; 0x02
    222a:	6b 81       	ldd	r22, Y+3	; 0x03
    222c:	9e 01       	movw	r18, r28
    222e:	2f 5f       	subi	r18, 0xFF	; 255
    2230:	3f 4f       	sbci	r19, 0xFF	; 255
    2232:	a9 01       	movw	r20, r18
    2234:	0e 94 cd 0f 	call	0x1f9a	; 0x1f9a <DIO_enuGetPinval>
ES_t SWITCH_read(u8 copy_SWITCH_port,u8 copy_SWITCH_pin,u8 *value)
{
	DIO_enuGetPinval(copy_SWITCH_port,copy_SWITCH_pin,value); ///////////////////////////////!!!!!!!
	u8 read;
	DIO_enuGetPinval(copy_SWITCH_port,copy_SWITCH_pin,&read);
	while(read==0)
    2238:	89 81       	ldd	r24, Y+1	; 0x01
    223a:	88 23       	and	r24, r24
    223c:	a9 f3       	breq	.-22     	; 0x2228 <SWITCH_read+0x36>
	{
		DIO_enuGetPinval(copy_SWITCH_port,copy_SWITCH_pin,&read);
	}

}
    223e:	26 96       	adiw	r28, 0x06	; 6
    2240:	0f b6       	in	r0, 0x3f	; 63
    2242:	f8 94       	cli
    2244:	de bf       	out	0x3e, r29	; 62
    2246:	0f be       	out	0x3f, r0	; 63
    2248:	cd bf       	out	0x3d, r28	; 61
    224a:	cf 91       	pop	r28
    224c:	df 91       	pop	r29
    224e:	08 95       	ret

00002250 <SSD_voidDispaly>:
#include <util/delay.h>
#include"SSD_int.h"


void SSD_voidDispaly(char copy_value)
{
    2250:	df 93       	push	r29
    2252:	cf 93       	push	r28
    2254:	cd b7       	in	r28, 0x3d	; 61
    2256:	de b7       	in	r29, 0x3e	; 62
    2258:	6d 97       	sbiw	r28, 0x1d	; 29
    225a:	0f b6       	in	r0, 0x3f	; 63
    225c:	f8 94       	cli
    225e:	de bf       	out	0x3e, r29	; 62
    2260:	0f be       	out	0x3f, r0	; 63
    2262:	cd bf       	out	0x3d, r28	; 61
    2264:	8d 8f       	std	Y+29, r24	; 0x1d

	DDRB=0x0F;
    2266:	e7 e3       	ldi	r30, 0x37	; 55
    2268:	f0 e0       	ldi	r31, 0x00	; 0
    226a:	8f e0       	ldi	r24, 0x0F	; 15
    226c:	80 83       	st	Z, r24
	DDRA|=(1<<4)|(1<<5);
    226e:	aa e3       	ldi	r26, 0x3A	; 58
    2270:	b0 e0       	ldi	r27, 0x00	; 0
    2272:	ea e3       	ldi	r30, 0x3A	; 58
    2274:	f0 e0       	ldi	r31, 0x00	; 0
    2276:	80 81       	ld	r24, Z
    2278:	80 63       	ori	r24, 0x30	; 48
    227a:	8c 93       	st	X, r24

	PORTA=0b00010111;//(1<<4);
    227c:	eb e3       	ldi	r30, 0x3B	; 59
    227e:	f0 e0       	ldi	r31, 0x00	; 0
    2280:	87 e1       	ldi	r24, 0x17	; 23
    2282:	80 83       	st	Z, r24
	PORTB=(PORTB & 0xF0)| ((copy_value/10) & 0x0F);
    2284:	a8 e3       	ldi	r26, 0x38	; 56
    2286:	b0 e0       	ldi	r27, 0x00	; 0
    2288:	e8 e3       	ldi	r30, 0x38	; 56
    228a:	f0 e0       	ldi	r31, 0x00	; 0
    228c:	80 81       	ld	r24, Z
    228e:	28 2f       	mov	r18, r24
    2290:	20 7f       	andi	r18, 0xF0	; 240
    2292:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2294:	9a e0       	ldi	r25, 0x0A	; 10
    2296:	69 2f       	mov	r22, r25
    2298:	0e 94 cc 17 	call	0x2f98	; 0x2f98 <__udivmodqi4>
    229c:	8f 70       	andi	r24, 0x0F	; 15
    229e:	82 2b       	or	r24, r18
    22a0:	8c 93       	st	X, r24
    22a2:	80 e0       	ldi	r24, 0x00	; 0
    22a4:	90 e0       	ldi	r25, 0x00	; 0
    22a6:	a0 e4       	ldi	r26, 0x40	; 64
    22a8:	b0 e4       	ldi	r27, 0x40	; 64
    22aa:	89 8f       	std	Y+25, r24	; 0x19
    22ac:	9a 8f       	std	Y+26, r25	; 0x1a
    22ae:	ab 8f       	std	Y+27, r26	; 0x1b
    22b0:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    22b2:	69 8d       	ldd	r22, Y+25	; 0x19
    22b4:	7a 8d       	ldd	r23, Y+26	; 0x1a
    22b6:	8b 8d       	ldd	r24, Y+27	; 0x1b
    22b8:	9c 8d       	ldd	r25, Y+28	; 0x1c
    22ba:	20 e0       	ldi	r18, 0x00	; 0
    22bc:	30 e0       	ldi	r19, 0x00	; 0
    22be:	4a e7       	ldi	r20, 0x7A	; 122
    22c0:	53 e4       	ldi	r21, 0x43	; 67
    22c2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    22c6:	dc 01       	movw	r26, r24
    22c8:	cb 01       	movw	r24, r22
    22ca:	8d 8b       	std	Y+21, r24	; 0x15
    22cc:	9e 8b       	std	Y+22, r25	; 0x16
    22ce:	af 8b       	std	Y+23, r26	; 0x17
    22d0:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    22d2:	6d 89       	ldd	r22, Y+21	; 0x15
    22d4:	7e 89       	ldd	r23, Y+22	; 0x16
    22d6:	8f 89       	ldd	r24, Y+23	; 0x17
    22d8:	98 8d       	ldd	r25, Y+24	; 0x18
    22da:	20 e0       	ldi	r18, 0x00	; 0
    22dc:	30 e0       	ldi	r19, 0x00	; 0
    22de:	40 e8       	ldi	r20, 0x80	; 128
    22e0:	5f e3       	ldi	r21, 0x3F	; 63
    22e2:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    22e6:	88 23       	and	r24, r24
    22e8:	2c f4       	brge	.+10     	; 0x22f4 <SSD_voidDispaly+0xa4>
		__ticks = 1;
    22ea:	81 e0       	ldi	r24, 0x01	; 1
    22ec:	90 e0       	ldi	r25, 0x00	; 0
    22ee:	9c 8b       	std	Y+20, r25	; 0x14
    22f0:	8b 8b       	std	Y+19, r24	; 0x13
    22f2:	3f c0       	rjmp	.+126    	; 0x2372 <SSD_voidDispaly+0x122>
	else if (__tmp > 65535)
    22f4:	6d 89       	ldd	r22, Y+21	; 0x15
    22f6:	7e 89       	ldd	r23, Y+22	; 0x16
    22f8:	8f 89       	ldd	r24, Y+23	; 0x17
    22fa:	98 8d       	ldd	r25, Y+24	; 0x18
    22fc:	20 e0       	ldi	r18, 0x00	; 0
    22fe:	3f ef       	ldi	r19, 0xFF	; 255
    2300:	4f e7       	ldi	r20, 0x7F	; 127
    2302:	57 e4       	ldi	r21, 0x47	; 71
    2304:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    2308:	18 16       	cp	r1, r24
    230a:	4c f5       	brge	.+82     	; 0x235e <SSD_voidDispaly+0x10e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    230c:	69 8d       	ldd	r22, Y+25	; 0x19
    230e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2310:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2312:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2314:	20 e0       	ldi	r18, 0x00	; 0
    2316:	30 e0       	ldi	r19, 0x00	; 0
    2318:	40 e2       	ldi	r20, 0x20	; 32
    231a:	51 e4       	ldi	r21, 0x41	; 65
    231c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2320:	dc 01       	movw	r26, r24
    2322:	cb 01       	movw	r24, r22
    2324:	bc 01       	movw	r22, r24
    2326:	cd 01       	movw	r24, r26
    2328:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    232c:	dc 01       	movw	r26, r24
    232e:	cb 01       	movw	r24, r22
    2330:	9c 8b       	std	Y+20, r25	; 0x14
    2332:	8b 8b       	std	Y+19, r24	; 0x13
    2334:	0f c0       	rjmp	.+30     	; 0x2354 <SSD_voidDispaly+0x104>
    2336:	89 e1       	ldi	r24, 0x19	; 25
    2338:	90 e0       	ldi	r25, 0x00	; 0
    233a:	9a 8b       	std	Y+18, r25	; 0x12
    233c:	89 8b       	std	Y+17, r24	; 0x11
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    233e:	89 89       	ldd	r24, Y+17	; 0x11
    2340:	9a 89       	ldd	r25, Y+18	; 0x12
    2342:	01 97       	sbiw	r24, 0x01	; 1
    2344:	f1 f7       	brne	.-4      	; 0x2342 <SSD_voidDispaly+0xf2>
    2346:	9a 8b       	std	Y+18, r25	; 0x12
    2348:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    234a:	8b 89       	ldd	r24, Y+19	; 0x13
    234c:	9c 89       	ldd	r25, Y+20	; 0x14
    234e:	01 97       	sbiw	r24, 0x01	; 1
    2350:	9c 8b       	std	Y+20, r25	; 0x14
    2352:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2354:	8b 89       	ldd	r24, Y+19	; 0x13
    2356:	9c 89       	ldd	r25, Y+20	; 0x14
    2358:	00 97       	sbiw	r24, 0x00	; 0
    235a:	69 f7       	brne	.-38     	; 0x2336 <SSD_voidDispaly+0xe6>
    235c:	14 c0       	rjmp	.+40     	; 0x2386 <SSD_voidDispaly+0x136>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    235e:	6d 89       	ldd	r22, Y+21	; 0x15
    2360:	7e 89       	ldd	r23, Y+22	; 0x16
    2362:	8f 89       	ldd	r24, Y+23	; 0x17
    2364:	98 8d       	ldd	r25, Y+24	; 0x18
    2366:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    236a:	dc 01       	movw	r26, r24
    236c:	cb 01       	movw	r24, r22
    236e:	9c 8b       	std	Y+20, r25	; 0x14
    2370:	8b 8b       	std	Y+19, r24	; 0x13
    2372:	8b 89       	ldd	r24, Y+19	; 0x13
    2374:	9c 89       	ldd	r25, Y+20	; 0x14
    2376:	98 8b       	std	Y+16, r25	; 0x10
    2378:	8f 87       	std	Y+15, r24	; 0x0f
    237a:	8f 85       	ldd	r24, Y+15	; 0x0f
    237c:	98 89       	ldd	r25, Y+16	; 0x10
    237e:	01 97       	sbiw	r24, 0x01	; 1
    2380:	f1 f7       	brne	.-4      	; 0x237e <SSD_voidDispaly+0x12e>
    2382:	98 8b       	std	Y+16, r25	; 0x10
    2384:	8f 87       	std	Y+15, r24	; 0x0f

	_delay_ms(3);

	PORTA=0b00100111;//(1<<5);
    2386:	eb e3       	ldi	r30, 0x3B	; 59
    2388:	f0 e0       	ldi	r31, 0x00	; 0
    238a:	87 e2       	ldi	r24, 0x27	; 39
    238c:	80 83       	st	Z, r24
	PORTB=(PORTB & 0xF0)| ((copy_value%10) & 0x0F);// to display sec0 on first segment
    238e:	a8 e3       	ldi	r26, 0x38	; 56
    2390:	b0 e0       	ldi	r27, 0x00	; 0
    2392:	e8 e3       	ldi	r30, 0x38	; 56
    2394:	f0 e0       	ldi	r31, 0x00	; 0
    2396:	80 81       	ld	r24, Z
    2398:	28 2f       	mov	r18, r24
    239a:	20 7f       	andi	r18, 0xF0	; 240
    239c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    239e:	9a e0       	ldi	r25, 0x0A	; 10
    23a0:	69 2f       	mov	r22, r25
    23a2:	0e 94 cc 17 	call	0x2f98	; 0x2f98 <__udivmodqi4>
    23a6:	89 2f       	mov	r24, r25
    23a8:	8f 70       	andi	r24, 0x0F	; 15
    23aa:	82 2b       	or	r24, r18
    23ac:	8c 93       	st	X, r24
    23ae:	80 e0       	ldi	r24, 0x00	; 0
    23b0:	90 e0       	ldi	r25, 0x00	; 0
    23b2:	a0 e4       	ldi	r26, 0x40	; 64
    23b4:	b0 e4       	ldi	r27, 0x40	; 64
    23b6:	8b 87       	std	Y+11, r24	; 0x0b
    23b8:	9c 87       	std	Y+12, r25	; 0x0c
    23ba:	ad 87       	std	Y+13, r26	; 0x0d
    23bc:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    23be:	6b 85       	ldd	r22, Y+11	; 0x0b
    23c0:	7c 85       	ldd	r23, Y+12	; 0x0c
    23c2:	8d 85       	ldd	r24, Y+13	; 0x0d
    23c4:	9e 85       	ldd	r25, Y+14	; 0x0e
    23c6:	20 e0       	ldi	r18, 0x00	; 0
    23c8:	30 e0       	ldi	r19, 0x00	; 0
    23ca:	4a e7       	ldi	r20, 0x7A	; 122
    23cc:	53 e4       	ldi	r21, 0x43	; 67
    23ce:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    23d2:	dc 01       	movw	r26, r24
    23d4:	cb 01       	movw	r24, r22
    23d6:	8f 83       	std	Y+7, r24	; 0x07
    23d8:	98 87       	std	Y+8, r25	; 0x08
    23da:	a9 87       	std	Y+9, r26	; 0x09
    23dc:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    23de:	6f 81       	ldd	r22, Y+7	; 0x07
    23e0:	78 85       	ldd	r23, Y+8	; 0x08
    23e2:	89 85       	ldd	r24, Y+9	; 0x09
    23e4:	9a 85       	ldd	r25, Y+10	; 0x0a
    23e6:	20 e0       	ldi	r18, 0x00	; 0
    23e8:	30 e0       	ldi	r19, 0x00	; 0
    23ea:	40 e8       	ldi	r20, 0x80	; 128
    23ec:	5f e3       	ldi	r21, 0x3F	; 63
    23ee:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    23f2:	88 23       	and	r24, r24
    23f4:	2c f4       	brge	.+10     	; 0x2400 <SSD_voidDispaly+0x1b0>
		__ticks = 1;
    23f6:	81 e0       	ldi	r24, 0x01	; 1
    23f8:	90 e0       	ldi	r25, 0x00	; 0
    23fa:	9e 83       	std	Y+6, r25	; 0x06
    23fc:	8d 83       	std	Y+5, r24	; 0x05
    23fe:	3f c0       	rjmp	.+126    	; 0x247e <SSD_voidDispaly+0x22e>
	else if (__tmp > 65535)
    2400:	6f 81       	ldd	r22, Y+7	; 0x07
    2402:	78 85       	ldd	r23, Y+8	; 0x08
    2404:	89 85       	ldd	r24, Y+9	; 0x09
    2406:	9a 85       	ldd	r25, Y+10	; 0x0a
    2408:	20 e0       	ldi	r18, 0x00	; 0
    240a:	3f ef       	ldi	r19, 0xFF	; 255
    240c:	4f e7       	ldi	r20, 0x7F	; 127
    240e:	57 e4       	ldi	r21, 0x47	; 71
    2410:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    2414:	18 16       	cp	r1, r24
    2416:	4c f5       	brge	.+82     	; 0x246a <SSD_voidDispaly+0x21a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2418:	6b 85       	ldd	r22, Y+11	; 0x0b
    241a:	7c 85       	ldd	r23, Y+12	; 0x0c
    241c:	8d 85       	ldd	r24, Y+13	; 0x0d
    241e:	9e 85       	ldd	r25, Y+14	; 0x0e
    2420:	20 e0       	ldi	r18, 0x00	; 0
    2422:	30 e0       	ldi	r19, 0x00	; 0
    2424:	40 e2       	ldi	r20, 0x20	; 32
    2426:	51 e4       	ldi	r21, 0x41	; 65
    2428:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    242c:	dc 01       	movw	r26, r24
    242e:	cb 01       	movw	r24, r22
    2430:	bc 01       	movw	r22, r24
    2432:	cd 01       	movw	r24, r26
    2434:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2438:	dc 01       	movw	r26, r24
    243a:	cb 01       	movw	r24, r22
    243c:	9e 83       	std	Y+6, r25	; 0x06
    243e:	8d 83       	std	Y+5, r24	; 0x05
    2440:	0f c0       	rjmp	.+30     	; 0x2460 <SSD_voidDispaly+0x210>
    2442:	89 e1       	ldi	r24, 0x19	; 25
    2444:	90 e0       	ldi	r25, 0x00	; 0
    2446:	9c 83       	std	Y+4, r25	; 0x04
    2448:	8b 83       	std	Y+3, r24	; 0x03
    244a:	8b 81       	ldd	r24, Y+3	; 0x03
    244c:	9c 81       	ldd	r25, Y+4	; 0x04
    244e:	01 97       	sbiw	r24, 0x01	; 1
    2450:	f1 f7       	brne	.-4      	; 0x244e <SSD_voidDispaly+0x1fe>
    2452:	9c 83       	std	Y+4, r25	; 0x04
    2454:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2456:	8d 81       	ldd	r24, Y+5	; 0x05
    2458:	9e 81       	ldd	r25, Y+6	; 0x06
    245a:	01 97       	sbiw	r24, 0x01	; 1
    245c:	9e 83       	std	Y+6, r25	; 0x06
    245e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2460:	8d 81       	ldd	r24, Y+5	; 0x05
    2462:	9e 81       	ldd	r25, Y+6	; 0x06
    2464:	00 97       	sbiw	r24, 0x00	; 0
    2466:	69 f7       	brne	.-38     	; 0x2442 <SSD_voidDispaly+0x1f2>
    2468:	14 c0       	rjmp	.+40     	; 0x2492 <SSD_voidDispaly+0x242>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    246a:	6f 81       	ldd	r22, Y+7	; 0x07
    246c:	78 85       	ldd	r23, Y+8	; 0x08
    246e:	89 85       	ldd	r24, Y+9	; 0x09
    2470:	9a 85       	ldd	r25, Y+10	; 0x0a
    2472:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2476:	dc 01       	movw	r26, r24
    2478:	cb 01       	movw	r24, r22
    247a:	9e 83       	std	Y+6, r25	; 0x06
    247c:	8d 83       	std	Y+5, r24	; 0x05
    247e:	8d 81       	ldd	r24, Y+5	; 0x05
    2480:	9e 81       	ldd	r25, Y+6	; 0x06
    2482:	9a 83       	std	Y+2, r25	; 0x02
    2484:	89 83       	std	Y+1, r24	; 0x01
    2486:	89 81       	ldd	r24, Y+1	; 0x01
    2488:	9a 81       	ldd	r25, Y+2	; 0x02
    248a:	01 97       	sbiw	r24, 0x01	; 1
    248c:	f1 f7       	brne	.-4      	; 0x248a <SSD_voidDispaly+0x23a>
    248e:	9a 83       	std	Y+2, r25	; 0x02
    2490:	89 83       	std	Y+1, r24	; 0x01
//	PORTD|=(1<<A);//disable cathode
//	PORTD&=~(1<<B);
//	//PORTB|=(copy_value%10);
//	PORTB=(PORTB & 0xF0)| ((copy_value/10)& 0x0F);
//	_delay_ms(3);
}
    2492:	6d 96       	adiw	r28, 0x1d	; 29
    2494:	0f b6       	in	r0, 0x3f	; 63
    2496:	f8 94       	cli
    2498:	de bf       	out	0x3e, r29	; 62
    249a:	0f be       	out	0x3f, r0	; 63
    249c:	cd bf       	out	0x3d, r28	; 61
    249e:	cf 91       	pop	r28
    24a0:	df 91       	pop	r29
    24a2:	08 95       	ret

000024a4 <SSD_voidDispalyBlink>:

void SSD_voidDispalyBlink(char copy_value)
{
    24a4:	df 93       	push	r29
    24a6:	cf 93       	push	r28
    24a8:	cd b7       	in	r28, 0x3d	; 61
    24aa:	de b7       	in	r29, 0x3e	; 62
    24ac:	ab 97       	sbiw	r28, 0x2b	; 43
    24ae:	0f b6       	in	r0, 0x3f	; 63
    24b0:	f8 94       	cli
    24b2:	de bf       	out	0x3e, r29	; 62
    24b4:	0f be       	out	0x3f, r0	; 63
    24b6:	cd bf       	out	0x3d, r28	; 61
    24b8:	8b a7       	std	Y+43, r24	; 0x2b
	DDRB=0x0F;
    24ba:	e7 e3       	ldi	r30, 0x37	; 55
    24bc:	f0 e0       	ldi	r31, 0x00	; 0
    24be:	8f e0       	ldi	r24, 0x0F	; 15
    24c0:	80 83       	st	Z, r24
	DDRA|=(1<<4)|(1<<5);
    24c2:	aa e3       	ldi	r26, 0x3A	; 58
    24c4:	b0 e0       	ldi	r27, 0x00	; 0
    24c6:	ea e3       	ldi	r30, 0x3A	; 58
    24c8:	f0 e0       	ldi	r31, 0x00	; 0
    24ca:	80 81       	ld	r24, Z
    24cc:	80 63       	ori	r24, 0x30	; 48
    24ce:	8c 93       	st	X, r24

	PORTA=0b00010111;
    24d0:	eb e3       	ldi	r30, 0x3B	; 59
    24d2:	f0 e0       	ldi	r31, 0x00	; 0
    24d4:	87 e1       	ldi	r24, 0x17	; 23
    24d6:	80 83       	st	Z, r24
	PORTB=(PORTB & 0xF0)| ((copy_value/10) & 0x0F);
    24d8:	a8 e3       	ldi	r26, 0x38	; 56
    24da:	b0 e0       	ldi	r27, 0x00	; 0
    24dc:	e8 e3       	ldi	r30, 0x38	; 56
    24de:	f0 e0       	ldi	r31, 0x00	; 0
    24e0:	80 81       	ld	r24, Z
    24e2:	28 2f       	mov	r18, r24
    24e4:	20 7f       	andi	r18, 0xF0	; 240
    24e6:	8b a5       	ldd	r24, Y+43	; 0x2b
    24e8:	9a e0       	ldi	r25, 0x0A	; 10
    24ea:	69 2f       	mov	r22, r25
    24ec:	0e 94 cc 17 	call	0x2f98	; 0x2f98 <__udivmodqi4>
    24f0:	8f 70       	andi	r24, 0x0F	; 15
    24f2:	82 2b       	or	r24, r18
    24f4:	8c 93       	st	X, r24
    24f6:	80 e0       	ldi	r24, 0x00	; 0
    24f8:	90 e0       	ldi	r25, 0x00	; 0
    24fa:	a0 e4       	ldi	r26, 0x40	; 64
    24fc:	b0 e4       	ldi	r27, 0x40	; 64
    24fe:	8f a3       	std	Y+39, r24	; 0x27
    2500:	98 a7       	std	Y+40, r25	; 0x28
    2502:	a9 a7       	std	Y+41, r26	; 0x29
    2504:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2506:	6f a1       	ldd	r22, Y+39	; 0x27
    2508:	78 a5       	ldd	r23, Y+40	; 0x28
    250a:	89 a5       	ldd	r24, Y+41	; 0x29
    250c:	9a a5       	ldd	r25, Y+42	; 0x2a
    250e:	20 e0       	ldi	r18, 0x00	; 0
    2510:	30 e0       	ldi	r19, 0x00	; 0
    2512:	4a e7       	ldi	r20, 0x7A	; 122
    2514:	53 e4       	ldi	r21, 0x43	; 67
    2516:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    251a:	dc 01       	movw	r26, r24
    251c:	cb 01       	movw	r24, r22
    251e:	8b a3       	std	Y+35, r24	; 0x23
    2520:	9c a3       	std	Y+36, r25	; 0x24
    2522:	ad a3       	std	Y+37, r26	; 0x25
    2524:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2526:	6b a1       	ldd	r22, Y+35	; 0x23
    2528:	7c a1       	ldd	r23, Y+36	; 0x24
    252a:	8d a1       	ldd	r24, Y+37	; 0x25
    252c:	9e a1       	ldd	r25, Y+38	; 0x26
    252e:	20 e0       	ldi	r18, 0x00	; 0
    2530:	30 e0       	ldi	r19, 0x00	; 0
    2532:	40 e8       	ldi	r20, 0x80	; 128
    2534:	5f e3       	ldi	r21, 0x3F	; 63
    2536:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    253a:	88 23       	and	r24, r24
    253c:	2c f4       	brge	.+10     	; 0x2548 <SSD_voidDispalyBlink+0xa4>
		__ticks = 1;
    253e:	81 e0       	ldi	r24, 0x01	; 1
    2540:	90 e0       	ldi	r25, 0x00	; 0
    2542:	9a a3       	std	Y+34, r25	; 0x22
    2544:	89 a3       	std	Y+33, r24	; 0x21
    2546:	3f c0       	rjmp	.+126    	; 0x25c6 <SSD_voidDispalyBlink+0x122>
	else if (__tmp > 65535)
    2548:	6b a1       	ldd	r22, Y+35	; 0x23
    254a:	7c a1       	ldd	r23, Y+36	; 0x24
    254c:	8d a1       	ldd	r24, Y+37	; 0x25
    254e:	9e a1       	ldd	r25, Y+38	; 0x26
    2550:	20 e0       	ldi	r18, 0x00	; 0
    2552:	3f ef       	ldi	r19, 0xFF	; 255
    2554:	4f e7       	ldi	r20, 0x7F	; 127
    2556:	57 e4       	ldi	r21, 0x47	; 71
    2558:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    255c:	18 16       	cp	r1, r24
    255e:	4c f5       	brge	.+82     	; 0x25b2 <SSD_voidDispalyBlink+0x10e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2560:	6f a1       	ldd	r22, Y+39	; 0x27
    2562:	78 a5       	ldd	r23, Y+40	; 0x28
    2564:	89 a5       	ldd	r24, Y+41	; 0x29
    2566:	9a a5       	ldd	r25, Y+42	; 0x2a
    2568:	20 e0       	ldi	r18, 0x00	; 0
    256a:	30 e0       	ldi	r19, 0x00	; 0
    256c:	40 e2       	ldi	r20, 0x20	; 32
    256e:	51 e4       	ldi	r21, 0x41	; 65
    2570:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2574:	dc 01       	movw	r26, r24
    2576:	cb 01       	movw	r24, r22
    2578:	bc 01       	movw	r22, r24
    257a:	cd 01       	movw	r24, r26
    257c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2580:	dc 01       	movw	r26, r24
    2582:	cb 01       	movw	r24, r22
    2584:	9a a3       	std	Y+34, r25	; 0x22
    2586:	89 a3       	std	Y+33, r24	; 0x21
    2588:	0f c0       	rjmp	.+30     	; 0x25a8 <SSD_voidDispalyBlink+0x104>
    258a:	89 e1       	ldi	r24, 0x19	; 25
    258c:	90 e0       	ldi	r25, 0x00	; 0
    258e:	98 a3       	std	Y+32, r25	; 0x20
    2590:	8f 8f       	std	Y+31, r24	; 0x1f
    2592:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2594:	98 a1       	ldd	r25, Y+32	; 0x20
    2596:	01 97       	sbiw	r24, 0x01	; 1
    2598:	f1 f7       	brne	.-4      	; 0x2596 <SSD_voidDispalyBlink+0xf2>
    259a:	98 a3       	std	Y+32, r25	; 0x20
    259c:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    259e:	89 a1       	ldd	r24, Y+33	; 0x21
    25a0:	9a a1       	ldd	r25, Y+34	; 0x22
    25a2:	01 97       	sbiw	r24, 0x01	; 1
    25a4:	9a a3       	std	Y+34, r25	; 0x22
    25a6:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    25a8:	89 a1       	ldd	r24, Y+33	; 0x21
    25aa:	9a a1       	ldd	r25, Y+34	; 0x22
    25ac:	00 97       	sbiw	r24, 0x00	; 0
    25ae:	69 f7       	brne	.-38     	; 0x258a <SSD_voidDispalyBlink+0xe6>
    25b0:	14 c0       	rjmp	.+40     	; 0x25da <SSD_voidDispalyBlink+0x136>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    25b2:	6b a1       	ldd	r22, Y+35	; 0x23
    25b4:	7c a1       	ldd	r23, Y+36	; 0x24
    25b6:	8d a1       	ldd	r24, Y+37	; 0x25
    25b8:	9e a1       	ldd	r25, Y+38	; 0x26
    25ba:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    25be:	dc 01       	movw	r26, r24
    25c0:	cb 01       	movw	r24, r22
    25c2:	9a a3       	std	Y+34, r25	; 0x22
    25c4:	89 a3       	std	Y+33, r24	; 0x21
    25c6:	89 a1       	ldd	r24, Y+33	; 0x21
    25c8:	9a a1       	ldd	r25, Y+34	; 0x22
    25ca:	9e 8f       	std	Y+30, r25	; 0x1e
    25cc:	8d 8f       	std	Y+29, r24	; 0x1d
    25ce:	8d 8d       	ldd	r24, Y+29	; 0x1d
    25d0:	9e 8d       	ldd	r25, Y+30	; 0x1e
    25d2:	01 97       	sbiw	r24, 0x01	; 1
    25d4:	f1 f7       	brne	.-4      	; 0x25d2 <SSD_voidDispalyBlink+0x12e>
    25d6:	9e 8f       	std	Y+30, r25	; 0x1e
    25d8:	8d 8f       	std	Y+29, r24	; 0x1d

	_delay_ms(3);

	PORTA=0b00100111;
    25da:	eb e3       	ldi	r30, 0x3B	; 59
    25dc:	f0 e0       	ldi	r31, 0x00	; 0
    25de:	87 e2       	ldi	r24, 0x27	; 39
    25e0:	80 83       	st	Z, r24
	PORTB=(PORTB & 0xF0)| ((copy_value%10) & 0x0F);// to display sec0 on first segment
    25e2:	a8 e3       	ldi	r26, 0x38	; 56
    25e4:	b0 e0       	ldi	r27, 0x00	; 0
    25e6:	e8 e3       	ldi	r30, 0x38	; 56
    25e8:	f0 e0       	ldi	r31, 0x00	; 0
    25ea:	80 81       	ld	r24, Z
    25ec:	28 2f       	mov	r18, r24
    25ee:	20 7f       	andi	r18, 0xF0	; 240
    25f0:	8b a5       	ldd	r24, Y+43	; 0x2b
    25f2:	9a e0       	ldi	r25, 0x0A	; 10
    25f4:	69 2f       	mov	r22, r25
    25f6:	0e 94 cc 17 	call	0x2f98	; 0x2f98 <__udivmodqi4>
    25fa:	89 2f       	mov	r24, r25
    25fc:	8f 70       	andi	r24, 0x0F	; 15
    25fe:	82 2b       	or	r24, r18
    2600:	8c 93       	st	X, r24
    2602:	80 e0       	ldi	r24, 0x00	; 0
    2604:	90 e0       	ldi	r25, 0x00	; 0
    2606:	a0 e4       	ldi	r26, 0x40	; 64
    2608:	b0 e4       	ldi	r27, 0x40	; 64
    260a:	89 8f       	std	Y+25, r24	; 0x19
    260c:	9a 8f       	std	Y+26, r25	; 0x1a
    260e:	ab 8f       	std	Y+27, r26	; 0x1b
    2610:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2612:	69 8d       	ldd	r22, Y+25	; 0x19
    2614:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2616:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2618:	9c 8d       	ldd	r25, Y+28	; 0x1c
    261a:	20 e0       	ldi	r18, 0x00	; 0
    261c:	30 e0       	ldi	r19, 0x00	; 0
    261e:	4a e7       	ldi	r20, 0x7A	; 122
    2620:	53 e4       	ldi	r21, 0x43	; 67
    2622:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2626:	dc 01       	movw	r26, r24
    2628:	cb 01       	movw	r24, r22
    262a:	8d 8b       	std	Y+21, r24	; 0x15
    262c:	9e 8b       	std	Y+22, r25	; 0x16
    262e:	af 8b       	std	Y+23, r26	; 0x17
    2630:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2632:	6d 89       	ldd	r22, Y+21	; 0x15
    2634:	7e 89       	ldd	r23, Y+22	; 0x16
    2636:	8f 89       	ldd	r24, Y+23	; 0x17
    2638:	98 8d       	ldd	r25, Y+24	; 0x18
    263a:	20 e0       	ldi	r18, 0x00	; 0
    263c:	30 e0       	ldi	r19, 0x00	; 0
    263e:	40 e8       	ldi	r20, 0x80	; 128
    2640:	5f e3       	ldi	r21, 0x3F	; 63
    2642:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    2646:	88 23       	and	r24, r24
    2648:	2c f4       	brge	.+10     	; 0x2654 <SSD_voidDispalyBlink+0x1b0>
		__ticks = 1;
    264a:	81 e0       	ldi	r24, 0x01	; 1
    264c:	90 e0       	ldi	r25, 0x00	; 0
    264e:	9c 8b       	std	Y+20, r25	; 0x14
    2650:	8b 8b       	std	Y+19, r24	; 0x13
    2652:	3f c0       	rjmp	.+126    	; 0x26d2 <SSD_voidDispalyBlink+0x22e>
	else if (__tmp > 65535)
    2654:	6d 89       	ldd	r22, Y+21	; 0x15
    2656:	7e 89       	ldd	r23, Y+22	; 0x16
    2658:	8f 89       	ldd	r24, Y+23	; 0x17
    265a:	98 8d       	ldd	r25, Y+24	; 0x18
    265c:	20 e0       	ldi	r18, 0x00	; 0
    265e:	3f ef       	ldi	r19, 0xFF	; 255
    2660:	4f e7       	ldi	r20, 0x7F	; 127
    2662:	57 e4       	ldi	r21, 0x47	; 71
    2664:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    2668:	18 16       	cp	r1, r24
    266a:	4c f5       	brge	.+82     	; 0x26be <SSD_voidDispalyBlink+0x21a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    266c:	69 8d       	ldd	r22, Y+25	; 0x19
    266e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2670:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2672:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2674:	20 e0       	ldi	r18, 0x00	; 0
    2676:	30 e0       	ldi	r19, 0x00	; 0
    2678:	40 e2       	ldi	r20, 0x20	; 32
    267a:	51 e4       	ldi	r21, 0x41	; 65
    267c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2680:	dc 01       	movw	r26, r24
    2682:	cb 01       	movw	r24, r22
    2684:	bc 01       	movw	r22, r24
    2686:	cd 01       	movw	r24, r26
    2688:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    268c:	dc 01       	movw	r26, r24
    268e:	cb 01       	movw	r24, r22
    2690:	9c 8b       	std	Y+20, r25	; 0x14
    2692:	8b 8b       	std	Y+19, r24	; 0x13
    2694:	0f c0       	rjmp	.+30     	; 0x26b4 <SSD_voidDispalyBlink+0x210>
    2696:	89 e1       	ldi	r24, 0x19	; 25
    2698:	90 e0       	ldi	r25, 0x00	; 0
    269a:	9a 8b       	std	Y+18, r25	; 0x12
    269c:	89 8b       	std	Y+17, r24	; 0x11
    269e:	89 89       	ldd	r24, Y+17	; 0x11
    26a0:	9a 89       	ldd	r25, Y+18	; 0x12
    26a2:	01 97       	sbiw	r24, 0x01	; 1
    26a4:	f1 f7       	brne	.-4      	; 0x26a2 <SSD_voidDispalyBlink+0x1fe>
    26a6:	9a 8b       	std	Y+18, r25	; 0x12
    26a8:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    26aa:	8b 89       	ldd	r24, Y+19	; 0x13
    26ac:	9c 89       	ldd	r25, Y+20	; 0x14
    26ae:	01 97       	sbiw	r24, 0x01	; 1
    26b0:	9c 8b       	std	Y+20, r25	; 0x14
    26b2:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    26b4:	8b 89       	ldd	r24, Y+19	; 0x13
    26b6:	9c 89       	ldd	r25, Y+20	; 0x14
    26b8:	00 97       	sbiw	r24, 0x00	; 0
    26ba:	69 f7       	brne	.-38     	; 0x2696 <SSD_voidDispalyBlink+0x1f2>
    26bc:	14 c0       	rjmp	.+40     	; 0x26e6 <SSD_voidDispalyBlink+0x242>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    26be:	6d 89       	ldd	r22, Y+21	; 0x15
    26c0:	7e 89       	ldd	r23, Y+22	; 0x16
    26c2:	8f 89       	ldd	r24, Y+23	; 0x17
    26c4:	98 8d       	ldd	r25, Y+24	; 0x18
    26c6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    26ca:	dc 01       	movw	r26, r24
    26cc:	cb 01       	movw	r24, r22
    26ce:	9c 8b       	std	Y+20, r25	; 0x14
    26d0:	8b 8b       	std	Y+19, r24	; 0x13
    26d2:	8b 89       	ldd	r24, Y+19	; 0x13
    26d4:	9c 89       	ldd	r25, Y+20	; 0x14
    26d6:	98 8b       	std	Y+16, r25	; 0x10
    26d8:	8f 87       	std	Y+15, r24	; 0x0f
    26da:	8f 85       	ldd	r24, Y+15	; 0x0f
    26dc:	98 89       	ldd	r25, Y+16	; 0x10
    26de:	01 97       	sbiw	r24, 0x01	; 1
    26e0:	f1 f7       	brne	.-4      	; 0x26de <SSD_voidDispalyBlink+0x23a>
    26e2:	98 8b       	std	Y+16, r25	; 0x10
    26e4:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(3);

	PORTA=0b11000111;
    26e6:	eb e3       	ldi	r30, 0x3B	; 59
    26e8:	f0 e0       	ldi	r31, 0x00	; 0
    26ea:	87 ec       	ldi	r24, 0xC7	; 199
    26ec:	80 83       	st	Z, r24
    26ee:	80 e0       	ldi	r24, 0x00	; 0
    26f0:	90 e0       	ldi	r25, 0x00	; 0
    26f2:	a8 e4       	ldi	r26, 0x48	; 72
    26f4:	b3 e4       	ldi	r27, 0x43	; 67
    26f6:	8b 87       	std	Y+11, r24	; 0x0b
    26f8:	9c 87       	std	Y+12, r25	; 0x0c
    26fa:	ad 87       	std	Y+13, r26	; 0x0d
    26fc:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    26fe:	6b 85       	ldd	r22, Y+11	; 0x0b
    2700:	7c 85       	ldd	r23, Y+12	; 0x0c
    2702:	8d 85       	ldd	r24, Y+13	; 0x0d
    2704:	9e 85       	ldd	r25, Y+14	; 0x0e
    2706:	20 e0       	ldi	r18, 0x00	; 0
    2708:	30 e0       	ldi	r19, 0x00	; 0
    270a:	4a e7       	ldi	r20, 0x7A	; 122
    270c:	53 e4       	ldi	r21, 0x43	; 67
    270e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2712:	dc 01       	movw	r26, r24
    2714:	cb 01       	movw	r24, r22
    2716:	8f 83       	std	Y+7, r24	; 0x07
    2718:	98 87       	std	Y+8, r25	; 0x08
    271a:	a9 87       	std	Y+9, r26	; 0x09
    271c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    271e:	6f 81       	ldd	r22, Y+7	; 0x07
    2720:	78 85       	ldd	r23, Y+8	; 0x08
    2722:	89 85       	ldd	r24, Y+9	; 0x09
    2724:	9a 85       	ldd	r25, Y+10	; 0x0a
    2726:	20 e0       	ldi	r18, 0x00	; 0
    2728:	30 e0       	ldi	r19, 0x00	; 0
    272a:	40 e8       	ldi	r20, 0x80	; 128
    272c:	5f e3       	ldi	r21, 0x3F	; 63
    272e:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    2732:	88 23       	and	r24, r24
    2734:	2c f4       	brge	.+10     	; 0x2740 <SSD_voidDispalyBlink+0x29c>
		__ticks = 1;
    2736:	81 e0       	ldi	r24, 0x01	; 1
    2738:	90 e0       	ldi	r25, 0x00	; 0
    273a:	9e 83       	std	Y+6, r25	; 0x06
    273c:	8d 83       	std	Y+5, r24	; 0x05
    273e:	3f c0       	rjmp	.+126    	; 0x27be <SSD_voidDispalyBlink+0x31a>
	else if (__tmp > 65535)
    2740:	6f 81       	ldd	r22, Y+7	; 0x07
    2742:	78 85       	ldd	r23, Y+8	; 0x08
    2744:	89 85       	ldd	r24, Y+9	; 0x09
    2746:	9a 85       	ldd	r25, Y+10	; 0x0a
    2748:	20 e0       	ldi	r18, 0x00	; 0
    274a:	3f ef       	ldi	r19, 0xFF	; 255
    274c:	4f e7       	ldi	r20, 0x7F	; 127
    274e:	57 e4       	ldi	r21, 0x47	; 71
    2750:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    2754:	18 16       	cp	r1, r24
    2756:	4c f5       	brge	.+82     	; 0x27aa <SSD_voidDispalyBlink+0x306>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2758:	6b 85       	ldd	r22, Y+11	; 0x0b
    275a:	7c 85       	ldd	r23, Y+12	; 0x0c
    275c:	8d 85       	ldd	r24, Y+13	; 0x0d
    275e:	9e 85       	ldd	r25, Y+14	; 0x0e
    2760:	20 e0       	ldi	r18, 0x00	; 0
    2762:	30 e0       	ldi	r19, 0x00	; 0
    2764:	40 e2       	ldi	r20, 0x20	; 32
    2766:	51 e4       	ldi	r21, 0x41	; 65
    2768:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    276c:	dc 01       	movw	r26, r24
    276e:	cb 01       	movw	r24, r22
    2770:	bc 01       	movw	r22, r24
    2772:	cd 01       	movw	r24, r26
    2774:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2778:	dc 01       	movw	r26, r24
    277a:	cb 01       	movw	r24, r22
    277c:	9e 83       	std	Y+6, r25	; 0x06
    277e:	8d 83       	std	Y+5, r24	; 0x05
    2780:	0f c0       	rjmp	.+30     	; 0x27a0 <SSD_voidDispalyBlink+0x2fc>
    2782:	89 e1       	ldi	r24, 0x19	; 25
    2784:	90 e0       	ldi	r25, 0x00	; 0
    2786:	9c 83       	std	Y+4, r25	; 0x04
    2788:	8b 83       	std	Y+3, r24	; 0x03
    278a:	8b 81       	ldd	r24, Y+3	; 0x03
    278c:	9c 81       	ldd	r25, Y+4	; 0x04
    278e:	01 97       	sbiw	r24, 0x01	; 1
    2790:	f1 f7       	brne	.-4      	; 0x278e <SSD_voidDispalyBlink+0x2ea>
    2792:	9c 83       	std	Y+4, r25	; 0x04
    2794:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2796:	8d 81       	ldd	r24, Y+5	; 0x05
    2798:	9e 81       	ldd	r25, Y+6	; 0x06
    279a:	01 97       	sbiw	r24, 0x01	; 1
    279c:	9e 83       	std	Y+6, r25	; 0x06
    279e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    27a0:	8d 81       	ldd	r24, Y+5	; 0x05
    27a2:	9e 81       	ldd	r25, Y+6	; 0x06
    27a4:	00 97       	sbiw	r24, 0x00	; 0
    27a6:	69 f7       	brne	.-38     	; 0x2782 <SSD_voidDispalyBlink+0x2de>
    27a8:	14 c0       	rjmp	.+40     	; 0x27d2 <SSD_voidDispalyBlink+0x32e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    27aa:	6f 81       	ldd	r22, Y+7	; 0x07
    27ac:	78 85       	ldd	r23, Y+8	; 0x08
    27ae:	89 85       	ldd	r24, Y+9	; 0x09
    27b0:	9a 85       	ldd	r25, Y+10	; 0x0a
    27b2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    27b6:	dc 01       	movw	r26, r24
    27b8:	cb 01       	movw	r24, r22
    27ba:	9e 83       	std	Y+6, r25	; 0x06
    27bc:	8d 83       	std	Y+5, r24	; 0x05
    27be:	8d 81       	ldd	r24, Y+5	; 0x05
    27c0:	9e 81       	ldd	r25, Y+6	; 0x06
    27c2:	9a 83       	std	Y+2, r25	; 0x02
    27c4:	89 83       	std	Y+1, r24	; 0x01
    27c6:	89 81       	ldd	r24, Y+1	; 0x01
    27c8:	9a 81       	ldd	r25, Y+2	; 0x02
    27ca:	01 97       	sbiw	r24, 0x01	; 1
    27cc:	f1 f7       	brne	.-4      	; 0x27ca <SSD_voidDispalyBlink+0x326>
    27ce:	9a 83       	std	Y+2, r25	; 0x02
    27d0:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(200);
}
    27d2:	ab 96       	adiw	r28, 0x2b	; 43
    27d4:	0f b6       	in	r0, 0x3f	; 63
    27d6:	f8 94       	cli
    27d8:	de bf       	out	0x3e, r29	; 62
    27da:	0f be       	out	0x3f, r0	; 63
    27dc:	cd bf       	out	0x3d, r28	; 61
    27de:	cf 91       	pop	r28
    27e0:	df 91       	pop	r29
    27e2:	08 95       	ret

000027e4 <Display_Off>:

void Display_Off()
{
    27e4:	df 93       	push	r29
    27e6:	cf 93       	push	r28
    27e8:	cd b7       	in	r28, 0x3d	; 61
    27ea:	de b7       	in	r29, 0x3e	; 62
	PORTA=0b11000111;
    27ec:	eb e3       	ldi	r30, 0x3B	; 59
    27ee:	f0 e0       	ldi	r31, 0x00	; 0
    27f0:	87 ec       	ldi	r24, 0xC7	; 199
    27f2:	80 83       	st	Z, r24
}
    27f4:	cf 91       	pop	r28
    27f6:	df 91       	pop	r29
    27f8:	08 95       	ret

000027fa <LED_init>:
#include"LED_priv.h"
#include"LED_config.h"
//#include"LED_int.h"

ES_t LED_init(void)
{
    27fa:	df 93       	push	r29
    27fc:	cf 93       	push	r28
    27fe:	0f 92       	push	r0
    2800:	cd b7       	in	r28, 0x3d	; 61
    2802:	de b7       	in	r29, 0x3e	; 62
	DIO_enuSetPinDIR(LED_PORT,LED_PIN,DIO_PIN_OUTPUT);
    2804:	82 e0       	ldi	r24, 0x02	; 2
    2806:	62 e0       	ldi	r22, 0x02	; 2
    2808:	41 e0       	ldi	r20, 0x01	; 1
    280a:	0e 94 3f 0d 	call	0x1a7e	; 0x1a7e <DIO_enuSetPinDIR>
}
    280e:	0f 90       	pop	r0
    2810:	cf 91       	pop	r28
    2812:	df 91       	pop	r29
    2814:	08 95       	ret

00002816 <LED_enuON>:

ES_t LED_enuON(u8 copy_port,u8 copy_pin)
{
    2816:	df 93       	push	r29
    2818:	cf 93       	push	r28
    281a:	00 d0       	rcall	.+0      	; 0x281c <LED_enuON+0x6>
    281c:	0f 92       	push	r0
    281e:	cd b7       	in	r28, 0x3d	; 61
    2820:	de b7       	in	r29, 0x3e	; 62
    2822:	89 83       	std	Y+1, r24	; 0x01
    2824:	6a 83       	std	Y+2, r22	; 0x02
	DIO_enuSetPinVAL(copy_port,copy_pin,DIO_HIGH);
    2826:	89 81       	ldd	r24, Y+1	; 0x01
    2828:	6a 81       	ldd	r22, Y+2	; 0x02
    282a:	41 e0       	ldi	r20, 0x01	; 1
    282c:	0e 94 20 0e 	call	0x1c40	; 0x1c40 <DIO_enuSetPinVAL>
}
    2830:	0f 90       	pop	r0
    2832:	0f 90       	pop	r0
    2834:	0f 90       	pop	r0
    2836:	cf 91       	pop	r28
    2838:	df 91       	pop	r29
    283a:	08 95       	ret

0000283c <LED_enuON_Blink>:

ES_t LED_enuON_Blink(u8 copy_port,u8 copy_pin)
{
    283c:	df 93       	push	r29
    283e:	cf 93       	push	r28
    2840:	cd b7       	in	r28, 0x3d	; 61
    2842:	de b7       	in	r29, 0x3e	; 62
    2844:	61 97       	sbiw	r28, 0x11	; 17
    2846:	0f b6       	in	r0, 0x3f	; 63
    2848:	f8 94       	cli
    284a:	de bf       	out	0x3e, r29	; 62
    284c:	0f be       	out	0x3f, r0	; 63
    284e:	cd bf       	out	0x3d, r28	; 61
    2850:	8f 87       	std	Y+15, r24	; 0x0f
    2852:	68 8b       	std	Y+16, r22	; 0x10
	DIO_enuSetPinVAL(copy_port,copy_pin,DIO_HIGH);
    2854:	8f 85       	ldd	r24, Y+15	; 0x0f
    2856:	68 89       	ldd	r22, Y+16	; 0x10
    2858:	41 e0       	ldi	r20, 0x01	; 1
    285a:	0e 94 20 0e 	call	0x1c40	; 0x1c40 <DIO_enuSetPinVAL>
    285e:	80 e0       	ldi	r24, 0x00	; 0
    2860:	90 e0       	ldi	r25, 0x00	; 0
    2862:	a8 e4       	ldi	r26, 0x48	; 72
    2864:	b3 e4       	ldi	r27, 0x43	; 67
    2866:	8b 87       	std	Y+11, r24	; 0x0b
    2868:	9c 87       	std	Y+12, r25	; 0x0c
    286a:	ad 87       	std	Y+13, r26	; 0x0d
    286c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    286e:	6b 85       	ldd	r22, Y+11	; 0x0b
    2870:	7c 85       	ldd	r23, Y+12	; 0x0c
    2872:	8d 85       	ldd	r24, Y+13	; 0x0d
    2874:	9e 85       	ldd	r25, Y+14	; 0x0e
    2876:	20 e0       	ldi	r18, 0x00	; 0
    2878:	30 e0       	ldi	r19, 0x00	; 0
    287a:	4a e7       	ldi	r20, 0x7A	; 122
    287c:	53 e4       	ldi	r21, 0x43	; 67
    287e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2882:	dc 01       	movw	r26, r24
    2884:	cb 01       	movw	r24, r22
    2886:	8f 83       	std	Y+7, r24	; 0x07
    2888:	98 87       	std	Y+8, r25	; 0x08
    288a:	a9 87       	std	Y+9, r26	; 0x09
    288c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    288e:	6f 81       	ldd	r22, Y+7	; 0x07
    2890:	78 85       	ldd	r23, Y+8	; 0x08
    2892:	89 85       	ldd	r24, Y+9	; 0x09
    2894:	9a 85       	ldd	r25, Y+10	; 0x0a
    2896:	20 e0       	ldi	r18, 0x00	; 0
    2898:	30 e0       	ldi	r19, 0x00	; 0
    289a:	40 e8       	ldi	r20, 0x80	; 128
    289c:	5f e3       	ldi	r21, 0x3F	; 63
    289e:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    28a2:	88 23       	and	r24, r24
    28a4:	2c f4       	brge	.+10     	; 0x28b0 <LED_enuON_Blink+0x74>
		__ticks = 1;
    28a6:	81 e0       	ldi	r24, 0x01	; 1
    28a8:	90 e0       	ldi	r25, 0x00	; 0
    28aa:	9e 83       	std	Y+6, r25	; 0x06
    28ac:	8d 83       	std	Y+5, r24	; 0x05
    28ae:	3f c0       	rjmp	.+126    	; 0x292e <LED_enuON_Blink+0xf2>
	else if (__tmp > 65535)
    28b0:	6f 81       	ldd	r22, Y+7	; 0x07
    28b2:	78 85       	ldd	r23, Y+8	; 0x08
    28b4:	89 85       	ldd	r24, Y+9	; 0x09
    28b6:	9a 85       	ldd	r25, Y+10	; 0x0a
    28b8:	20 e0       	ldi	r18, 0x00	; 0
    28ba:	3f ef       	ldi	r19, 0xFF	; 255
    28bc:	4f e7       	ldi	r20, 0x7F	; 127
    28be:	57 e4       	ldi	r21, 0x47	; 71
    28c0:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    28c4:	18 16       	cp	r1, r24
    28c6:	4c f5       	brge	.+82     	; 0x291a <LED_enuON_Blink+0xde>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    28c8:	6b 85       	ldd	r22, Y+11	; 0x0b
    28ca:	7c 85       	ldd	r23, Y+12	; 0x0c
    28cc:	8d 85       	ldd	r24, Y+13	; 0x0d
    28ce:	9e 85       	ldd	r25, Y+14	; 0x0e
    28d0:	20 e0       	ldi	r18, 0x00	; 0
    28d2:	30 e0       	ldi	r19, 0x00	; 0
    28d4:	40 e2       	ldi	r20, 0x20	; 32
    28d6:	51 e4       	ldi	r21, 0x41	; 65
    28d8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    28dc:	dc 01       	movw	r26, r24
    28de:	cb 01       	movw	r24, r22
    28e0:	bc 01       	movw	r22, r24
    28e2:	cd 01       	movw	r24, r26
    28e4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    28e8:	dc 01       	movw	r26, r24
    28ea:	cb 01       	movw	r24, r22
    28ec:	9e 83       	std	Y+6, r25	; 0x06
    28ee:	8d 83       	std	Y+5, r24	; 0x05
    28f0:	0f c0       	rjmp	.+30     	; 0x2910 <LED_enuON_Blink+0xd4>
    28f2:	89 e1       	ldi	r24, 0x19	; 25
    28f4:	90 e0       	ldi	r25, 0x00	; 0
    28f6:	9c 83       	std	Y+4, r25	; 0x04
    28f8:	8b 83       	std	Y+3, r24	; 0x03
    28fa:	8b 81       	ldd	r24, Y+3	; 0x03
    28fc:	9c 81       	ldd	r25, Y+4	; 0x04
    28fe:	01 97       	sbiw	r24, 0x01	; 1
    2900:	f1 f7       	brne	.-4      	; 0x28fe <LED_enuON_Blink+0xc2>
    2902:	9c 83       	std	Y+4, r25	; 0x04
    2904:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2906:	8d 81       	ldd	r24, Y+5	; 0x05
    2908:	9e 81       	ldd	r25, Y+6	; 0x06
    290a:	01 97       	sbiw	r24, 0x01	; 1
    290c:	9e 83       	std	Y+6, r25	; 0x06
    290e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2910:	8d 81       	ldd	r24, Y+5	; 0x05
    2912:	9e 81       	ldd	r25, Y+6	; 0x06
    2914:	00 97       	sbiw	r24, 0x00	; 0
    2916:	69 f7       	brne	.-38     	; 0x28f2 <LED_enuON_Blink+0xb6>
    2918:	14 c0       	rjmp	.+40     	; 0x2942 <LED_enuON_Blink+0x106>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    291a:	6f 81       	ldd	r22, Y+7	; 0x07
    291c:	78 85       	ldd	r23, Y+8	; 0x08
    291e:	89 85       	ldd	r24, Y+9	; 0x09
    2920:	9a 85       	ldd	r25, Y+10	; 0x0a
    2922:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2926:	dc 01       	movw	r26, r24
    2928:	cb 01       	movw	r24, r22
    292a:	9e 83       	std	Y+6, r25	; 0x06
    292c:	8d 83       	std	Y+5, r24	; 0x05
    292e:	8d 81       	ldd	r24, Y+5	; 0x05
    2930:	9e 81       	ldd	r25, Y+6	; 0x06
    2932:	9a 83       	std	Y+2, r25	; 0x02
    2934:	89 83       	std	Y+1, r24	; 0x01
    2936:	89 81       	ldd	r24, Y+1	; 0x01
    2938:	9a 81       	ldd	r25, Y+2	; 0x02
    293a:	01 97       	sbiw	r24, 0x01	; 1
    293c:	f1 f7       	brne	.-4      	; 0x293a <LED_enuON_Blink+0xfe>
    293e:	9a 83       	std	Y+2, r25	; 0x02
    2940:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(200);
}
    2942:	61 96       	adiw	r28, 0x11	; 17
    2944:	0f b6       	in	r0, 0x3f	; 63
    2946:	f8 94       	cli
    2948:	de bf       	out	0x3e, r29	; 62
    294a:	0f be       	out	0x3f, r0	; 63
    294c:	cd bf       	out	0x3d, r28	; 61
    294e:	cf 91       	pop	r28
    2950:	df 91       	pop	r29
    2952:	08 95       	ret

00002954 <LED_enuOFF>:

ES_t LED_enuOFF(u8 copy_port,u8 copy_pin)
{
    2954:	df 93       	push	r29
    2956:	cf 93       	push	r28
    2958:	00 d0       	rcall	.+0      	; 0x295a <LED_enuOFF+0x6>
    295a:	0f 92       	push	r0
    295c:	cd b7       	in	r28, 0x3d	; 61
    295e:	de b7       	in	r29, 0x3e	; 62
    2960:	89 83       	std	Y+1, r24	; 0x01
    2962:	6a 83       	std	Y+2, r22	; 0x02
	DIO_enuSetPinVAL(copy_port,copy_pin,DIO_LOW);
    2964:	89 81       	ldd	r24, Y+1	; 0x01
    2966:	6a 81       	ldd	r22, Y+2	; 0x02
    2968:	40 e0       	ldi	r20, 0x00	; 0
    296a:	0e 94 20 0e 	call	0x1c40	; 0x1c40 <DIO_enuSetPinVAL>
}
    296e:	0f 90       	pop	r0
    2970:	0f 90       	pop	r0
    2972:	0f 90       	pop	r0
    2974:	cf 91       	pop	r28
    2976:	df 91       	pop	r29
    2978:	08 95       	ret

0000297a <LED_enuTOG>:

ES_t LED_enuTOG(u8 copy_port,u8 copy_pin)
{
    297a:	df 93       	push	r29
    297c:	cf 93       	push	r28
    297e:	00 d0       	rcall	.+0      	; 0x2980 <LED_enuTOG+0x6>
    2980:	0f 92       	push	r0
    2982:	cd b7       	in	r28, 0x3d	; 61
    2984:	de b7       	in	r29, 0x3e	; 62
    2986:	89 83       	std	Y+1, r24	; 0x01
    2988:	6a 83       	std	Y+2, r22	; 0x02
	DIO_enuTogPin(copy_port,copy_pin);
    298a:	89 81       	ldd	r24, Y+1	; 0x01
    298c:	6a 81       	ldd	r22, Y+2	; 0x02
    298e:	0e 94 01 0f 	call	0x1e02	; 0x1e02 <DIO_enuTogPin>
}
    2992:	0f 90       	pop	r0
    2994:	0f 90       	pop	r0
    2996:	0f 90       	pop	r0
    2998:	cf 91       	pop	r28
    299a:	df 91       	pop	r29
    299c:	08 95       	ret

0000299e <GI_Enable>:
 */

#include"GI_int.h"

void GI_Enable()
{
    299e:	df 93       	push	r29
    29a0:	cf 93       	push	r28
    29a2:	cd b7       	in	r28, 0x3d	; 61
    29a4:	de b7       	in	r29, 0x3e	; 62
	SREG|=(1<<7);
    29a6:	af e5       	ldi	r26, 0x5F	; 95
    29a8:	b0 e0       	ldi	r27, 0x00	; 0
    29aa:	ef e5       	ldi	r30, 0x5F	; 95
    29ac:	f0 e0       	ldi	r31, 0x00	; 0
    29ae:	80 81       	ld	r24, Z
    29b0:	80 68       	ori	r24, 0x80	; 128
    29b2:	8c 93       	st	X, r24
}
    29b4:	cf 91       	pop	r28
    29b6:	df 91       	pop	r29
    29b8:	08 95       	ret

000029ba <GI_Disable>:
void GI_Disable()
{
    29ba:	df 93       	push	r29
    29bc:	cf 93       	push	r28
    29be:	cd b7       	in	r28, 0x3d	; 61
    29c0:	de b7       	in	r29, 0x3e	; 62
	SREG&=~(1<<7);
    29c2:	af e5       	ldi	r26, 0x5F	; 95
    29c4:	b0 e0       	ldi	r27, 0x00	; 0
    29c6:	ef e5       	ldi	r30, 0x5F	; 95
    29c8:	f0 e0       	ldi	r31, 0x00	; 0
    29ca:	80 81       	ld	r24, Z
    29cc:	8f 77       	andi	r24, 0x7F	; 127
    29ce:	8c 93       	st	X, r24
}
    29d0:	cf 91       	pop	r28
    29d2:	df 91       	pop	r29
    29d4:	08 95       	ret

000029d6 <EEPROM_voidSendDataByte>:
#include"E2PROM_priv.h"
#include"E2PROM_config.h"


void EEPROM_voidSendDataByte(u16 Copy_u16LocationAddress, u8 Copy_u8DataByte)
{
    29d6:	df 93       	push	r29
    29d8:	cf 93       	push	r28
    29da:	cd b7       	in	r28, 0x3d	; 61
    29dc:	de b7       	in	r29, 0x3e	; 62
    29de:	62 97       	sbiw	r28, 0x12	; 18
    29e0:	0f b6       	in	r0, 0x3f	; 63
    29e2:	f8 94       	cli
    29e4:	de bf       	out	0x3e, r29	; 62
    29e6:	0f be       	out	0x3f, r0	; 63
    29e8:	cd bf       	out	0x3d, r28	; 61
    29ea:	99 8b       	std	Y+17, r25	; 0x11
    29ec:	88 8b       	std	Y+16, r24	; 0x10
    29ee:	6a 8b       	std	Y+18, r22	; 0x12
	u8 Local_u8AddressPacket;

		Local_u8AddressPacket = EEPROM_FIXED_ADDRESS | (A2_CONNECTION <<2) | (u8)(Copy_u16LocationAddress >>8);
    29f0:	88 89       	ldd	r24, Y+16	; 0x10
    29f2:	99 89       	ldd	r25, Y+17	; 0x11
    29f4:	89 2f       	mov	r24, r25
    29f6:	99 27       	eor	r25, r25
    29f8:	80 65       	ori	r24, 0x50	; 80
    29fa:	8f 87       	std	Y+15, r24	; 0x0f

		/*Send start condition*/
		TWI_enuSendStartConditionWithACK();
    29fc:	0e 94 f3 07 	call	0xfe6	; 0xfe6 <TWI_enuSendStartConditionWithACK>


		/*Send the address packet*/
		TWI_enuSendSLA(Local_u8AddressPacket,0);
    2a00:	8f 85       	ldd	r24, Y+15	; 0x0f
    2a02:	60 e0       	ldi	r22, 0x00	; 0
    2a04:	0e 94 20 08 	call	0x1040	; 0x1040 <TWI_enuSendSLA>

		/*Send the rest 8bits of the location address*/
		TWI_enuWriteData((u8)Copy_u16LocationAddress);
    2a08:	88 89       	ldd	r24, Y+16	; 0x10
    2a0a:	0e 94 50 08 	call	0x10a0	; 0x10a0 <TWI_enuWriteData>

		/*Send the data byte to the memory location*/
		TWI_enuWriteData(Copy_u8DataByte);
    2a0e:	8a 89       	ldd	r24, Y+18	; 0x12
    2a10:	0e 94 50 08 	call	0x10a0	; 0x10a0 <TWI_enuWriteData>

		/*Send stop condition*/
		TWI_enuStopCondition();
    2a14:	0e 94 ca 08 	call	0x1194	; 0x1194 <TWI_enuStopCondition>
    2a18:	80 e0       	ldi	r24, 0x00	; 0
    2a1a:	90 e0       	ldi	r25, 0x00	; 0
    2a1c:	a0 e2       	ldi	r26, 0x20	; 32
    2a1e:	b1 e4       	ldi	r27, 0x41	; 65
    2a20:	8b 87       	std	Y+11, r24	; 0x0b
    2a22:	9c 87       	std	Y+12, r25	; 0x0c
    2a24:	ad 87       	std	Y+13, r26	; 0x0d
    2a26:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2a28:	6b 85       	ldd	r22, Y+11	; 0x0b
    2a2a:	7c 85       	ldd	r23, Y+12	; 0x0c
    2a2c:	8d 85       	ldd	r24, Y+13	; 0x0d
    2a2e:	9e 85       	ldd	r25, Y+14	; 0x0e
    2a30:	20 e0       	ldi	r18, 0x00	; 0
    2a32:	30 e0       	ldi	r19, 0x00	; 0
    2a34:	4a e7       	ldi	r20, 0x7A	; 122
    2a36:	53 e4       	ldi	r21, 0x43	; 67
    2a38:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a3c:	dc 01       	movw	r26, r24
    2a3e:	cb 01       	movw	r24, r22
    2a40:	8f 83       	std	Y+7, r24	; 0x07
    2a42:	98 87       	std	Y+8, r25	; 0x08
    2a44:	a9 87       	std	Y+9, r26	; 0x09
    2a46:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2a48:	6f 81       	ldd	r22, Y+7	; 0x07
    2a4a:	78 85       	ldd	r23, Y+8	; 0x08
    2a4c:	89 85       	ldd	r24, Y+9	; 0x09
    2a4e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2a50:	20 e0       	ldi	r18, 0x00	; 0
    2a52:	30 e0       	ldi	r19, 0x00	; 0
    2a54:	40 e8       	ldi	r20, 0x80	; 128
    2a56:	5f e3       	ldi	r21, 0x3F	; 63
    2a58:	0e 94 55 04 	call	0x8aa	; 0x8aa <__ltsf2>
    2a5c:	88 23       	and	r24, r24
    2a5e:	2c f4       	brge	.+10     	; 0x2a6a <EEPROM_voidSendDataByte+0x94>
		__ticks = 1;
    2a60:	81 e0       	ldi	r24, 0x01	; 1
    2a62:	90 e0       	ldi	r25, 0x00	; 0
    2a64:	9e 83       	std	Y+6, r25	; 0x06
    2a66:	8d 83       	std	Y+5, r24	; 0x05
    2a68:	3f c0       	rjmp	.+126    	; 0x2ae8 <EEPROM_voidSendDataByte+0x112>
	else if (__tmp > 65535)
    2a6a:	6f 81       	ldd	r22, Y+7	; 0x07
    2a6c:	78 85       	ldd	r23, Y+8	; 0x08
    2a6e:	89 85       	ldd	r24, Y+9	; 0x09
    2a70:	9a 85       	ldd	r25, Y+10	; 0x0a
    2a72:	20 e0       	ldi	r18, 0x00	; 0
    2a74:	3f ef       	ldi	r19, 0xFF	; 255
    2a76:	4f e7       	ldi	r20, 0x7F	; 127
    2a78:	57 e4       	ldi	r21, 0x47	; 71
    2a7a:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gtsf2>
    2a7e:	18 16       	cp	r1, r24
    2a80:	4c f5       	brge	.+82     	; 0x2ad4 <EEPROM_voidSendDataByte+0xfe>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2a82:	6b 85       	ldd	r22, Y+11	; 0x0b
    2a84:	7c 85       	ldd	r23, Y+12	; 0x0c
    2a86:	8d 85       	ldd	r24, Y+13	; 0x0d
    2a88:	9e 85       	ldd	r25, Y+14	; 0x0e
    2a8a:	20 e0       	ldi	r18, 0x00	; 0
    2a8c:	30 e0       	ldi	r19, 0x00	; 0
    2a8e:	40 e2       	ldi	r20, 0x20	; 32
    2a90:	51 e4       	ldi	r21, 0x41	; 65
    2a92:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a96:	dc 01       	movw	r26, r24
    2a98:	cb 01       	movw	r24, r22
    2a9a:	bc 01       	movw	r22, r24
    2a9c:	cd 01       	movw	r24, r26
    2a9e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2aa2:	dc 01       	movw	r26, r24
    2aa4:	cb 01       	movw	r24, r22
    2aa6:	9e 83       	std	Y+6, r25	; 0x06
    2aa8:	8d 83       	std	Y+5, r24	; 0x05
    2aaa:	0f c0       	rjmp	.+30     	; 0x2aca <EEPROM_voidSendDataByte+0xf4>
    2aac:	89 e1       	ldi	r24, 0x19	; 25
    2aae:	90 e0       	ldi	r25, 0x00	; 0
    2ab0:	9c 83       	std	Y+4, r25	; 0x04
    2ab2:	8b 83       	std	Y+3, r24	; 0x03
    2ab4:	8b 81       	ldd	r24, Y+3	; 0x03
    2ab6:	9c 81       	ldd	r25, Y+4	; 0x04
    2ab8:	01 97       	sbiw	r24, 0x01	; 1
    2aba:	f1 f7       	brne	.-4      	; 0x2ab8 <EEPROM_voidSendDataByte+0xe2>
    2abc:	9c 83       	std	Y+4, r25	; 0x04
    2abe:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2ac0:	8d 81       	ldd	r24, Y+5	; 0x05
    2ac2:	9e 81       	ldd	r25, Y+6	; 0x06
    2ac4:	01 97       	sbiw	r24, 0x01	; 1
    2ac6:	9e 83       	std	Y+6, r25	; 0x06
    2ac8:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2aca:	8d 81       	ldd	r24, Y+5	; 0x05
    2acc:	9e 81       	ldd	r25, Y+6	; 0x06
    2ace:	00 97       	sbiw	r24, 0x00	; 0
    2ad0:	69 f7       	brne	.-38     	; 0x2aac <EEPROM_voidSendDataByte+0xd6>
    2ad2:	14 c0       	rjmp	.+40     	; 0x2afc <EEPROM_voidSendDataByte+0x126>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2ad4:	6f 81       	ldd	r22, Y+7	; 0x07
    2ad6:	78 85       	ldd	r23, Y+8	; 0x08
    2ad8:	89 85       	ldd	r24, Y+9	; 0x09
    2ada:	9a 85       	ldd	r25, Y+10	; 0x0a
    2adc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2ae0:	dc 01       	movw	r26, r24
    2ae2:	cb 01       	movw	r24, r22
    2ae4:	9e 83       	std	Y+6, r25	; 0x06
    2ae6:	8d 83       	std	Y+5, r24	; 0x05
    2ae8:	8d 81       	ldd	r24, Y+5	; 0x05
    2aea:	9e 81       	ldd	r25, Y+6	; 0x06
    2aec:	9a 83       	std	Y+2, r25	; 0x02
    2aee:	89 83       	std	Y+1, r24	; 0x01
    2af0:	89 81       	ldd	r24, Y+1	; 0x01
    2af2:	9a 81       	ldd	r25, Y+2	; 0x02
    2af4:	01 97       	sbiw	r24, 0x01	; 1
    2af6:	f1 f7       	brne	.-4      	; 0x2af4 <EEPROM_voidSendDataByte+0x11e>
    2af8:	9a 83       	std	Y+2, r25	; 0x02
    2afa:	89 83       	std	Y+1, r24	; 0x01

		/*Delay until the write cycle is finished*/
		_delay_ms(10);
}
    2afc:	62 96       	adiw	r28, 0x12	; 18
    2afe:	0f b6       	in	r0, 0x3f	; 63
    2b00:	f8 94       	cli
    2b02:	de bf       	out	0x3e, r29	; 62
    2b04:	0f be       	out	0x3f, r0	; 63
    2b06:	cd bf       	out	0x3d, r28	; 61
    2b08:	cf 91       	pop	r28
    2b0a:	df 91       	pop	r29
    2b0c:	08 95       	ret

00002b0e <EEPROM_u8ReadDataByte>:

u8 EEPROM_u8ReadDataByte(u16 Copy_u16LocationAddress){
    2b0e:	df 93       	push	r29
    2b10:	cf 93       	push	r28
    2b12:	00 d0       	rcall	.+0      	; 0x2b14 <EEPROM_u8ReadDataByte+0x6>
    2b14:	00 d0       	rcall	.+0      	; 0x2b16 <EEPROM_u8ReadDataByte+0x8>
    2b16:	cd b7       	in	r28, 0x3d	; 61
    2b18:	de b7       	in	r29, 0x3e	; 62
    2b1a:	9c 83       	std	Y+4, r25	; 0x04
    2b1c:	8b 83       	std	Y+3, r24	; 0x03
	u8 Local_u8AddressPacket, Local_u8Data;

		Local_u8AddressPacket = EEPROM_FIXED_ADDRESS | (A2_CONNECTION <<2) | (u8)(Copy_u16LocationAddress >>8);
    2b1e:	8b 81       	ldd	r24, Y+3	; 0x03
    2b20:	9c 81       	ldd	r25, Y+4	; 0x04
    2b22:	89 2f       	mov	r24, r25
    2b24:	99 27       	eor	r25, r25
    2b26:	80 65       	ori	r24, 0x50	; 80
    2b28:	89 83       	std	Y+1, r24	; 0x01

		/*Send start condition*/
		TWI_enuSendStartConditionWithACK();
    2b2a:	0e 94 f3 07 	call	0xfe6	; 0xfe6 <TWI_enuSendStartConditionWithACK>

		/*Send the address packet with write request*/
		TWI_enuSendSLA(Local_u8AddressPacket,0);
    2b2e:	89 81       	ldd	r24, Y+1	; 0x01
    2b30:	60 e0       	ldi	r22, 0x00	; 0
    2b32:	0e 94 20 08 	call	0x1040	; 0x1040 <TWI_enuSendSLA>

		/*Send the rest 8bits of the location address*/
		TWI_enuWriteData((u8)Copy_u16LocationAddress);
    2b36:	8b 81       	ldd	r24, Y+3	; 0x03
    2b38:	0e 94 50 08 	call	0x10a0	; 0x10a0 <TWI_enuWriteData>

		/*Send repeated start to change write request into read request*/
		TWI_ErrorStatusSendRepeatedStartConditionWithACK();
    2b3c:	0e 94 0d 08 	call	0x101a	; 0x101a <TWI_ErrorStatusSendRepeatedStartConditionWithACK>

		/*Send the address packet with read request*/
		TWI_enuSendSLA(Local_u8AddressPacket,1);
    2b40:	89 81       	ldd	r24, Y+1	; 0x01
    2b42:	61 e0       	ldi	r22, 0x01	; 1
    2b44:	0e 94 20 08 	call	0x1040	; 0x1040 <TWI_enuSendSLA>

		/*Get the data from memory*/
		TWI_enuRecieveData(&Local_u8Data,1);
    2b48:	ce 01       	movw	r24, r28
    2b4a:	02 96       	adiw	r24, 0x02	; 2
    2b4c:	61 e0       	ldi	r22, 0x01	; 1
    2b4e:	0e 94 6a 08 	call	0x10d4	; 0x10d4 <TWI_enuRecieveData>

		/*send the stop condition*/
		TWI_enuStopCondition();
    2b52:	0e 94 ca 08 	call	0x1194	; 0x1194 <TWI_enuStopCondition>

		return Local_u8Data;
    2b56:	8a 81       	ldd	r24, Y+2	; 0x02
}
    2b58:	0f 90       	pop	r0
    2b5a:	0f 90       	pop	r0
    2b5c:	0f 90       	pop	r0
    2b5e:	0f 90       	pop	r0
    2b60:	cf 91       	pop	r28
    2b62:	df 91       	pop	r29
    2b64:	08 95       	ret

00002b66 <DC_Motor_Init>:
#include"DC_Motor_int.h"
#include"DC_Motor_config.h"


void DC_Motor_Init(void)
{
    2b66:	df 93       	push	r29
    2b68:	cf 93       	push	r28
    2b6a:	cd b7       	in	r28, 0x3d	; 61
    2b6c:	de b7       	in	r29, 0x3e	; 62
	DIO_enuSetPinDIR(HEATER_EN_PORT,HEATER_EN_PIN,DIO_PIN_OUTPUT);
    2b6e:	82 e0       	ldi	r24, 0x02	; 2
    2b70:	66 e0       	ldi	r22, 0x06	; 6
    2b72:	41 e0       	ldi	r20, 0x01	; 1
    2b74:	0e 94 3f 0d 	call	0x1a7e	; 0x1a7e <DIO_enuSetPinDIR>
	DIO_enuSetPinDIR(HEATER_IN2_PORT,HEATER_IN2_PIN,DIO_PIN_OUTPUT);
    2b78:	82 e0       	ldi	r24, 0x02	; 2
    2b7a:	65 e0       	ldi	r22, 0x05	; 5
    2b7c:	41 e0       	ldi	r20, 0x01	; 1
    2b7e:	0e 94 3f 0d 	call	0x1a7e	; 0x1a7e <DIO_enuSetPinDIR>
	DIO_enuSetPinDIR(HEATER_IN1_PORT,HEATER_IN1_PIN,DIO_PIN_OUTPUT);
    2b82:	82 e0       	ldi	r24, 0x02	; 2
    2b84:	64 e0       	ldi	r22, 0x04	; 4
    2b86:	41 e0       	ldi	r20, 0x01	; 1
    2b88:	0e 94 3f 0d 	call	0x1a7e	; 0x1a7e <DIO_enuSetPinDIR>

	DIO_enuSetPinDIR(COOLER_EN_PORT,COOLER_EN_PIN,DIO_PIN_OUTPUT);
    2b8c:	83 e0       	ldi	r24, 0x03	; 3
    2b8e:	62 e0       	ldi	r22, 0x02	; 2
    2b90:	41 e0       	ldi	r20, 0x01	; 1
    2b92:	0e 94 3f 0d 	call	0x1a7e	; 0x1a7e <DIO_enuSetPinDIR>
	DIO_enuSetPinDIR(COOLER_IN2_PORT,COOLER_IN2_PIN,DIO_PIN_OUTPUT);
    2b96:	83 e0       	ldi	r24, 0x03	; 3
    2b98:	61 e0       	ldi	r22, 0x01	; 1
    2b9a:	41 e0       	ldi	r20, 0x01	; 1
    2b9c:	0e 94 3f 0d 	call	0x1a7e	; 0x1a7e <DIO_enuSetPinDIR>
	DIO_enuSetPinDIR(COOLER_IN1_PORT,COOLER_IN1_PIN,DIO_PIN_OUTPUT);
    2ba0:	83 e0       	ldi	r24, 0x03	; 3
    2ba2:	60 e0       	ldi	r22, 0x00	; 0
    2ba4:	41 e0       	ldi	r20, 0x01	; 1
    2ba6:	0e 94 3f 0d 	call	0x1a7e	; 0x1a7e <DIO_enuSetPinDIR>
}
    2baa:	cf 91       	pop	r28
    2bac:	df 91       	pop	r29
    2bae:	08 95       	ret

00002bb0 <DC_Motor_ON>:

void DC_Motor_ON(u8 copy_mode,u8 copy_name)
{
    2bb0:	df 93       	push	r29
    2bb2:	cf 93       	push	r28
    2bb4:	cd b7       	in	r28, 0x3d	; 61
    2bb6:	de b7       	in	r29, 0x3e	; 62
    2bb8:	28 97       	sbiw	r28, 0x08	; 8
    2bba:	0f b6       	in	r0, 0x3f	; 63
    2bbc:	f8 94       	cli
    2bbe:	de bf       	out	0x3e, r29	; 62
    2bc0:	0f be       	out	0x3f, r0	; 63
    2bc2:	cd bf       	out	0x3d, r28	; 61
    2bc4:	89 83       	std	Y+1, r24	; 0x01
    2bc6:	6a 83       	std	Y+2, r22	; 0x02
	switch(copy_name)
    2bc8:	8a 81       	ldd	r24, Y+2	; 0x02
    2bca:	28 2f       	mov	r18, r24
    2bcc:	30 e0       	ldi	r19, 0x00	; 0
    2bce:	38 87       	std	Y+8, r19	; 0x08
    2bd0:	2f 83       	std	Y+7, r18	; 0x07
    2bd2:	8f 81       	ldd	r24, Y+7	; 0x07
    2bd4:	98 85       	ldd	r25, Y+8	; 0x08
    2bd6:	00 97       	sbiw	r24, 0x00	; 0
    2bd8:	31 f0       	breq	.+12     	; 0x2be6 <DC_Motor_ON+0x36>
    2bda:	2f 81       	ldd	r18, Y+7	; 0x07
    2bdc:	38 85       	ldd	r19, Y+8	; 0x08
    2bde:	21 30       	cpi	r18, 0x01	; 1
    2be0:	31 05       	cpc	r19, r1
    2be2:	81 f1       	breq	.+96     	; 0x2c44 <DC_Motor_ON+0x94>
    2be4:	5d c0       	rjmp	.+186    	; 0x2ca0 <DC_Motor_ON+0xf0>
	{
		case MOTOR_COOLER:
			switch(copy_mode)
    2be6:	89 81       	ldd	r24, Y+1	; 0x01
    2be8:	28 2f       	mov	r18, r24
    2bea:	30 e0       	ldi	r19, 0x00	; 0
    2bec:	3e 83       	std	Y+6, r19	; 0x06
    2bee:	2d 83       	std	Y+5, r18	; 0x05
    2bf0:	8d 81       	ldd	r24, Y+5	; 0x05
    2bf2:	9e 81       	ldd	r25, Y+6	; 0x06
    2bf4:	00 97       	sbiw	r24, 0x00	; 0
    2bf6:	31 f0       	breq	.+12     	; 0x2c04 <DC_Motor_ON+0x54>
    2bf8:	2d 81       	ldd	r18, Y+5	; 0x05
    2bfa:	3e 81       	ldd	r19, Y+6	; 0x06
    2bfc:	21 30       	cpi	r18, 0x01	; 1
    2bfe:	31 05       	cpc	r19, r1
    2c00:	89 f0       	breq	.+34     	; 0x2c24 <DC_Motor_ON+0x74>
    2c02:	4e c0       	rjmp	.+156    	; 0x2ca0 <DC_Motor_ON+0xf0>
			{
				case CLOCK_WISE:
					DIO_enuSetPinVAL(COOLER_EN_PORT,COOLER_EN_PIN,DIO_HIGH);
    2c04:	83 e0       	ldi	r24, 0x03	; 3
    2c06:	62 e0       	ldi	r22, 0x02	; 2
    2c08:	41 e0       	ldi	r20, 0x01	; 1
    2c0a:	0e 94 20 0e 	call	0x1c40	; 0x1c40 <DIO_enuSetPinVAL>
					DIO_enuSetPinVAL(COOLER_IN1_PORT,COOLER_IN1_PIN,DIO_HIGH);
    2c0e:	83 e0       	ldi	r24, 0x03	; 3
    2c10:	60 e0       	ldi	r22, 0x00	; 0
    2c12:	41 e0       	ldi	r20, 0x01	; 1
    2c14:	0e 94 20 0e 	call	0x1c40	; 0x1c40 <DIO_enuSetPinVAL>
					DIO_enuSetPinVAL(COOLER_IN2_PORT,COOLER_IN2_PIN,DIO_LOW);
    2c18:	83 e0       	ldi	r24, 0x03	; 3
    2c1a:	61 e0       	ldi	r22, 0x01	; 1
    2c1c:	40 e0       	ldi	r20, 0x00	; 0
    2c1e:	0e 94 20 0e 	call	0x1c40	; 0x1c40 <DIO_enuSetPinVAL>
    2c22:	3e c0       	rjmp	.+124    	; 0x2ca0 <DC_Motor_ON+0xf0>
					break;

				case ANTI_CLOCK:
					DIO_enuSetPinVAL(COOLER_EN_PORT,COOLER_EN_PIN,DIO_HIGH);
    2c24:	83 e0       	ldi	r24, 0x03	; 3
    2c26:	62 e0       	ldi	r22, 0x02	; 2
    2c28:	41 e0       	ldi	r20, 0x01	; 1
    2c2a:	0e 94 20 0e 	call	0x1c40	; 0x1c40 <DIO_enuSetPinVAL>
					DIO_enuSetPinVAL(COOLER_IN1_PORT,COOLER_IN1_PIN,DIO_LOW);
    2c2e:	83 e0       	ldi	r24, 0x03	; 3
    2c30:	60 e0       	ldi	r22, 0x00	; 0
    2c32:	40 e0       	ldi	r20, 0x00	; 0
    2c34:	0e 94 20 0e 	call	0x1c40	; 0x1c40 <DIO_enuSetPinVAL>
					DIO_enuSetPinVAL(COOLER_IN2_PORT,COOLER_IN2_PIN,DIO_HIGH);
    2c38:	83 e0       	ldi	r24, 0x03	; 3
    2c3a:	61 e0       	ldi	r22, 0x01	; 1
    2c3c:	41 e0       	ldi	r20, 0x01	; 1
    2c3e:	0e 94 20 0e 	call	0x1c40	; 0x1c40 <DIO_enuSetPinVAL>
    2c42:	2e c0       	rjmp	.+92     	; 0x2ca0 <DC_Motor_ON+0xf0>
					break;
			}
			break;
		case MOTOR_HEATER:
			switch(copy_mode)
    2c44:	89 81       	ldd	r24, Y+1	; 0x01
    2c46:	28 2f       	mov	r18, r24
    2c48:	30 e0       	ldi	r19, 0x00	; 0
    2c4a:	3c 83       	std	Y+4, r19	; 0x04
    2c4c:	2b 83       	std	Y+3, r18	; 0x03
    2c4e:	8b 81       	ldd	r24, Y+3	; 0x03
    2c50:	9c 81       	ldd	r25, Y+4	; 0x04
    2c52:	00 97       	sbiw	r24, 0x00	; 0
    2c54:	31 f0       	breq	.+12     	; 0x2c62 <DC_Motor_ON+0xb2>
    2c56:	2b 81       	ldd	r18, Y+3	; 0x03
    2c58:	3c 81       	ldd	r19, Y+4	; 0x04
    2c5a:	21 30       	cpi	r18, 0x01	; 1
    2c5c:	31 05       	cpc	r19, r1
    2c5e:	89 f0       	breq	.+34     	; 0x2c82 <DC_Motor_ON+0xd2>
    2c60:	1f c0       	rjmp	.+62     	; 0x2ca0 <DC_Motor_ON+0xf0>
			{
				case CLOCK_WISE:
					DIO_enuSetPinVAL(HEATER_EN_PORT,HEATER_EN_PIN,DIO_HIGH);
    2c62:	82 e0       	ldi	r24, 0x02	; 2
    2c64:	66 e0       	ldi	r22, 0x06	; 6
    2c66:	41 e0       	ldi	r20, 0x01	; 1
    2c68:	0e 94 20 0e 	call	0x1c40	; 0x1c40 <DIO_enuSetPinVAL>
					DIO_enuSetPinVAL(HEATER_IN1_PORT,HEATER_IN1_PIN,DIO_HIGH);
    2c6c:	82 e0       	ldi	r24, 0x02	; 2
    2c6e:	64 e0       	ldi	r22, 0x04	; 4
    2c70:	41 e0       	ldi	r20, 0x01	; 1
    2c72:	0e 94 20 0e 	call	0x1c40	; 0x1c40 <DIO_enuSetPinVAL>
					DIO_enuSetPinVAL(HEATER_IN2_PORT,HEATER_IN2_PIN,DIO_LOW);
    2c76:	82 e0       	ldi	r24, 0x02	; 2
    2c78:	65 e0       	ldi	r22, 0x05	; 5
    2c7a:	40 e0       	ldi	r20, 0x00	; 0
    2c7c:	0e 94 20 0e 	call	0x1c40	; 0x1c40 <DIO_enuSetPinVAL>
    2c80:	0f c0       	rjmp	.+30     	; 0x2ca0 <DC_Motor_ON+0xf0>
					break;

				case ANTI_CLOCK:
					DIO_enuSetPinVAL(COOLER_EN_PORT,HEATER_EN_PIN,DIO_HIGH);
    2c82:	83 e0       	ldi	r24, 0x03	; 3
    2c84:	66 e0       	ldi	r22, 0x06	; 6
    2c86:	41 e0       	ldi	r20, 0x01	; 1
    2c88:	0e 94 20 0e 	call	0x1c40	; 0x1c40 <DIO_enuSetPinVAL>
					DIO_enuSetPinVAL(COOLER_IN1_PORT,HEATER_IN1_PIN,DIO_LOW);
    2c8c:	83 e0       	ldi	r24, 0x03	; 3
    2c8e:	64 e0       	ldi	r22, 0x04	; 4
    2c90:	40 e0       	ldi	r20, 0x00	; 0
    2c92:	0e 94 20 0e 	call	0x1c40	; 0x1c40 <DIO_enuSetPinVAL>
					DIO_enuSetPinVAL(COOLER_IN2_PORT,HEATER_IN2_PIN,DIO_HIGH);
    2c96:	83 e0       	ldi	r24, 0x03	; 3
    2c98:	65 e0       	ldi	r22, 0x05	; 5
    2c9a:	41 e0       	ldi	r20, 0x01	; 1
    2c9c:	0e 94 20 0e 	call	0x1c40	; 0x1c40 <DIO_enuSetPinVAL>
					break;
			}
			break;
	}
}
    2ca0:	28 96       	adiw	r28, 0x08	; 8
    2ca2:	0f b6       	in	r0, 0x3f	; 63
    2ca4:	f8 94       	cli
    2ca6:	de bf       	out	0x3e, r29	; 62
    2ca8:	0f be       	out	0x3f, r0	; 63
    2caa:	cd bf       	out	0x3d, r28	; 61
    2cac:	cf 91       	pop	r28
    2cae:	df 91       	pop	r29
    2cb0:	08 95       	ret

00002cb2 <DC_Motor_OFF>:

void DC_Motor_OFF(u8 copy_name)
{
    2cb2:	df 93       	push	r29
    2cb4:	cf 93       	push	r28
    2cb6:	00 d0       	rcall	.+0      	; 0x2cb8 <DC_Motor_OFF+0x6>
    2cb8:	0f 92       	push	r0
    2cba:	cd b7       	in	r28, 0x3d	; 61
    2cbc:	de b7       	in	r29, 0x3e	; 62
    2cbe:	89 83       	std	Y+1, r24	; 0x01
	switch(copy_name)
    2cc0:	89 81       	ldd	r24, Y+1	; 0x01
    2cc2:	28 2f       	mov	r18, r24
    2cc4:	30 e0       	ldi	r19, 0x00	; 0
    2cc6:	3b 83       	std	Y+3, r19	; 0x03
    2cc8:	2a 83       	std	Y+2, r18	; 0x02
    2cca:	8a 81       	ldd	r24, Y+2	; 0x02
    2ccc:	9b 81       	ldd	r25, Y+3	; 0x03
    2cce:	00 97       	sbiw	r24, 0x00	; 0
    2cd0:	31 f0       	breq	.+12     	; 0x2cde <DC_Motor_OFF+0x2c>
    2cd2:	2a 81       	ldd	r18, Y+2	; 0x02
    2cd4:	3b 81       	ldd	r19, Y+3	; 0x03
    2cd6:	21 30       	cpi	r18, 0x01	; 1
    2cd8:	31 05       	cpc	r19, r1
    2cda:	39 f0       	breq	.+14     	; 0x2cea <DC_Motor_OFF+0x38>
    2cdc:	0b c0       	rjmp	.+22     	; 0x2cf4 <DC_Motor_OFF+0x42>
	{
		case MOTOR_COOLER:
			DIO_enuSetPinVAL(COOLER_EN_PORT,COOLER_EN_PIN,DIO_LOW);
    2cde:	83 e0       	ldi	r24, 0x03	; 3
    2ce0:	62 e0       	ldi	r22, 0x02	; 2
    2ce2:	40 e0       	ldi	r20, 0x00	; 0
    2ce4:	0e 94 20 0e 	call	0x1c40	; 0x1c40 <DIO_enuSetPinVAL>
    2ce8:	05 c0       	rjmp	.+10     	; 0x2cf4 <DC_Motor_OFF+0x42>
			break;
		case MOTOR_HEATER:
			DIO_enuSetPinVAL(HEATER_EN_PORT,HEATER_EN_PIN,DIO_LOW);
    2cea:	82 e0       	ldi	r24, 0x02	; 2
    2cec:	66 e0       	ldi	r22, 0x06	; 6
    2cee:	40 e0       	ldi	r20, 0x00	; 0
    2cf0:	0e 94 20 0e 	call	0x1c40	; 0x1c40 <DIO_enuSetPinVAL>
			break;
	}
}
    2cf4:	0f 90       	pop	r0
    2cf6:	0f 90       	pop	r0
    2cf8:	0f 90       	pop	r0
    2cfa:	cf 91       	pop	r28
    2cfc:	df 91       	pop	r29
    2cfe:	08 95       	ret

00002d00 <Timer_voidSetting_mode_disable>:
u8 Setting_mode=0;
u16 current_temp=60;
u8 ON_OFF_MODE=0;

void Timer_voidSetting_mode_disable()
{
    2d00:	df 93       	push	r29
    2d02:	cf 93       	push	r28
    2d04:	cd b7       	in	r28, 0x3d	; 61
    2d06:	de b7       	in	r29, 0x3e	; 62
	Setting_mode=0;
    2d08:	10 92 7c 01 	sts	0x017C, r1
}
    2d0c:	cf 91       	pop	r28
    2d0e:	df 91       	pop	r29
    2d10:	08 95       	ret

00002d12 <TIMER_ADC_Read>:

void TIMER_ADC_Read()
{
    2d12:	df 93       	push	r29
    2d14:	cf 93       	push	r28
    2d16:	cd b7       	in	r28, 0x3d	; 61
    2d18:	de b7       	in	r29, 0x3e	; 62
	ADC_read(&current_temp);
    2d1a:	89 e6       	ldi	r24, 0x69	; 105
    2d1c:	91 e0       	ldi	r25, 0x01	; 1
    2d1e:	0e 94 93 10 	call	0x2126	; 0x2126 <ADC_read>
	current_temp*=0.25;
    2d22:	80 91 69 01 	lds	r24, 0x0169
    2d26:	90 91 6a 01 	lds	r25, 0x016A
    2d2a:	cc 01       	movw	r24, r24
    2d2c:	a0 e0       	ldi	r26, 0x00	; 0
    2d2e:	b0 e0       	ldi	r27, 0x00	; 0
    2d30:	bc 01       	movw	r22, r24
    2d32:	cd 01       	movw	r24, r26
    2d34:	0e 94 37 05 	call	0xa6e	; 0xa6e <__floatunsisf>
    2d38:	dc 01       	movw	r26, r24
    2d3a:	cb 01       	movw	r24, r22
    2d3c:	bc 01       	movw	r22, r24
    2d3e:	cd 01       	movw	r24, r26
    2d40:	20 e0       	ldi	r18, 0x00	; 0
    2d42:	30 e0       	ldi	r19, 0x00	; 0
    2d44:	40 e8       	ldi	r20, 0x80	; 128
    2d46:	5e e3       	ldi	r21, 0x3E	; 62
    2d48:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2d4c:	dc 01       	movw	r26, r24
    2d4e:	cb 01       	movw	r24, r22
    2d50:	bc 01       	movw	r22, r24
    2d52:	cd 01       	movw	r24, r26
    2d54:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2d58:	dc 01       	movw	r26, r24
    2d5a:	cb 01       	movw	r24, r22
    2d5c:	90 93 6a 01 	sts	0x016A, r25
    2d60:	80 93 69 01 	sts	0x0169, r24
}
    2d64:	cf 91       	pop	r28
    2d66:	df 91       	pop	r29
    2d68:	08 95       	ret

00002d6a <main>:

int main()
{
    2d6a:	df 93       	push	r29
    2d6c:	cf 93       	push	r28
    2d6e:	00 d0       	rcall	.+0      	; 0x2d70 <main+0x6>
    2d70:	0f 92       	push	r0
    2d72:	cd b7       	in	r28, 0x3d	; 61
    2d74:	de b7       	in	r29, 0x3e	; 62
	SWITCH_init();
    2d76:	0e 94 d2 10 	call	0x21a4	; 0x21a4 <SWITCH_init>
	TWI_enuInit(5);
    2d7a:	85 e0       	ldi	r24, 0x05	; 5
    2d7c:	0e 94 a5 07 	call	0xf4a	; 0xf4a <TWI_enuInit>

	LED_init();
    2d80:	0e 94 fd 13 	call	0x27fa	; 0x27fa <LED_init>
	DC_Motor_Init();
    2d84:	0e 94 b3 15 	call	0x2b66	; 0x2b66 <DC_Motor_Init>
	ADC_init();
    2d88:	0e 94 54 10 	call	0x20a8	; 0x20a8 <ADC_init>
	TIMER0_enuEnableOVF_Interrupt();
    2d8c:	0e 94 36 0b 	call	0x166c	; 0x166c <TIMER0_enuEnableOVF_Interrupt>
	//Timer0_enuSetCTC_Value(250);


	//if(EEPROM_u8ReadDataByte(40)==0xff)
	//{
		EEPROM_voidSendDataByte(40,60);
    2d90:	88 e2       	ldi	r24, 0x28	; 40
    2d92:	90 e0       	ldi	r25, 0x00	; 0
    2d94:	6c e3       	ldi	r22, 0x3C	; 60
    2d96:	0e 94 eb 14 	call	0x29d6	; 0x29d6 <EEPROM_voidSendDataByte>
	//}

	temp=EEPROM_u8ReadDataByte(40);
    2d9a:	88 e2       	ldi	r24, 0x28	; 40
    2d9c:	90 e0       	ldi	r25, 0x00	; 0
    2d9e:	0e 94 87 15 	call	0x2b0e	; 0x2b0e <EEPROM_u8ReadDataByte>
    2da2:	80 93 68 01 	sts	0x0168, r24

	TIMER_voidCall_Back_OVF(Timer_voidSetting_mode_disable);
    2da6:	80 e8       	ldi	r24, 0x80	; 128
    2da8:	96 e1       	ldi	r25, 0x16	; 22
    2daa:	0e 94 85 0b 	call	0x170a	; 0x170a <TIMER_voidCall_Back_OVF>
	//TIMER_voidCall_Back_CTC(TIMER_ADC_Read);

	GI_Enable();
    2dae:	0e 94 cf 14 	call	0x299e	; 0x299e <GI_Enable>

	u8 Local_on_off_read=1;
    2db2:	81 e0       	ldi	r24, 0x01	; 1
    2db4:	89 83       	std	Y+1, r24	; 0x01


	while(1)
	{
		ADC_read(&current_temp);
    2db6:	89 e6       	ldi	r24, 0x69	; 105
    2db8:	91 e0       	ldi	r25, 0x01	; 1
    2dba:	0e 94 93 10 	call	0x2126	; 0x2126 <ADC_read>
		current_temp*=0.25;
    2dbe:	80 91 69 01 	lds	r24, 0x0169
    2dc2:	90 91 6a 01 	lds	r25, 0x016A
    2dc6:	cc 01       	movw	r24, r24
    2dc8:	a0 e0       	ldi	r26, 0x00	; 0
    2dca:	b0 e0       	ldi	r27, 0x00	; 0
    2dcc:	bc 01       	movw	r22, r24
    2dce:	cd 01       	movw	r24, r26
    2dd0:	0e 94 37 05 	call	0xa6e	; 0xa6e <__floatunsisf>
    2dd4:	dc 01       	movw	r26, r24
    2dd6:	cb 01       	movw	r24, r22
    2dd8:	bc 01       	movw	r22, r24
    2dda:	cd 01       	movw	r24, r26
    2ddc:	20 e0       	ldi	r18, 0x00	; 0
    2dde:	30 e0       	ldi	r19, 0x00	; 0
    2de0:	40 e8       	ldi	r20, 0x80	; 128
    2de2:	5e e3       	ldi	r21, 0x3E	; 62
    2de4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2de8:	dc 01       	movw	r26, r24
    2dea:	cb 01       	movw	r24, r22
    2dec:	bc 01       	movw	r22, r24
    2dee:	cd 01       	movw	r24, r26
    2df0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2df4:	dc 01       	movw	r26, r24
    2df6:	cb 01       	movw	r24, r22
    2df8:	90 93 6a 01 	sts	0x016A, r25
    2dfc:	80 93 69 01 	sts	0x0169, r24
		SWITCH_read(ON_OFF_BUTTON_PORT,ON_OFF_BUTTON_PIN,&Local_on_off_read);
    2e00:	80 e0       	ldi	r24, 0x00	; 0
    2e02:	62 e0       	ldi	r22, 0x02	; 2
    2e04:	9e 01       	movw	r18, r28
    2e06:	2f 5f       	subi	r18, 0xFF	; 255
    2e08:	3f 4f       	sbci	r19, 0xFF	; 255
    2e0a:	a9 01       	movw	r20, r18
    2e0c:	0e 94 f9 10 	call	0x21f2	; 0x21f2 <SWITCH_read>
		if(Local_on_off_read==0)
    2e10:	89 81       	ldd	r24, Y+1	; 0x01
    2e12:	88 23       	and	r24, r24
    2e14:	29 f4       	brne	.+10     	; 0x2e20 <main+0xb6>
		{
			ON_OFF_MODE++;
    2e16:	80 91 7d 01 	lds	r24, 0x017D
    2e1a:	8f 5f       	subi	r24, 0xFF	; 255
    2e1c:	80 93 7d 01 	sts	0x017D, r24
		}

		if(ON_OFF_MODE==1)
    2e20:	80 91 7d 01 	lds	r24, 0x017D
    2e24:	81 30       	cpi	r24, 0x01	; 1
    2e26:	09 f0       	breq	.+2      	; 0x2e2a <main+0xc0>
    2e28:	a9 c0       	rjmp	.+338    	; 0x2f7c <main+0x212>
		{
	        u8 up_button= 1;
    2e2a:	81 e0       	ldi	r24, 0x01	; 1
    2e2c:	8a 83       	std	Y+2, r24	; 0x02
	        SWITCH_read(UP_BUTTON_PORT,UP_BUTTON_PIN,&up_button);
    2e2e:	9e 01       	movw	r18, r28
    2e30:	2e 5f       	subi	r18, 0xFE	; 254
    2e32:	3f 4f       	sbci	r19, 0xFF	; 255
    2e34:	80 e0       	ldi	r24, 0x00	; 0
    2e36:	60 e0       	ldi	r22, 0x00	; 0
    2e38:	a9 01       	movw	r20, r18
    2e3a:	0e 94 f9 10 	call	0x21f2	; 0x21f2 <SWITCH_read>
	        u8 down_button=1;
    2e3e:	81 e0       	ldi	r24, 0x01	; 1
    2e40:	8b 83       	std	Y+3, r24	; 0x03
	        SWITCH_read(DOWN_BUTTON_PORT,DOWN_BUTTON_PIN,&down_button);
    2e42:	9e 01       	movw	r18, r28
    2e44:	2d 5f       	subi	r18, 0xFD	; 253
    2e46:	3f 4f       	sbci	r19, 0xFF	; 255
    2e48:	80 e0       	ldi	r24, 0x00	; 0
    2e4a:	61 e0       	ldi	r22, 0x01	; 1
    2e4c:	a9 01       	movw	r20, r18
    2e4e:	0e 94 f9 10 	call	0x21f2	; 0x21f2 <SWITCH_read>
	        if(down_button==0)
    2e52:	8b 81       	ldd	r24, Y+3	; 0x03
    2e54:	88 23       	and	r24, r24
    2e56:	91 f4       	brne	.+36     	; 0x2e7c <main+0x112>
	        {
	        	if(temp>35)
    2e58:	80 91 68 01 	lds	r24, 0x0168
    2e5c:	84 32       	cpi	r24, 0x24	; 36
    2e5e:	70 f0       	brcs	.+28     	; 0x2e7c <main+0x112>
	        	{
	        		Timer0_enuInit();
    2e60:	0e 94 e1 08 	call	0x11c2	; 0x11c2 <Timer0_enuInit>
	        		Timer0_enuAsysncDelay(5);
    2e64:	85 e0       	ldi	r24, 0x05	; 5
    2e66:	90 e0       	ldi	r25, 0x00	; 0
    2e68:	0e 94 0e 09 	call	0x121c	; 0x121c <Timer0_enuAsysncDelay>
					temp-=5;
    2e6c:	80 91 68 01 	lds	r24, 0x0168
    2e70:	85 50       	subi	r24, 0x05	; 5
    2e72:	80 93 68 01 	sts	0x0168, r24
					Setting_mode=1;
    2e76:	81 e0       	ldi	r24, 0x01	; 1
    2e78:	80 93 7c 01 	sts	0x017C, r24
	        	}
	        }

	        if(up_button==0)
    2e7c:	8a 81       	ldd	r24, Y+2	; 0x02
    2e7e:	88 23       	and	r24, r24
    2e80:	91 f4       	brne	.+36     	; 0x2ea6 <main+0x13c>
	        {
	        	if(temp<75)
    2e82:	80 91 68 01 	lds	r24, 0x0168
    2e86:	8b 34       	cpi	r24, 0x4B	; 75
    2e88:	70 f4       	brcc	.+28     	; 0x2ea6 <main+0x13c>
	        	{
	        		Timer0_enuInit();
    2e8a:	0e 94 e1 08 	call	0x11c2	; 0x11c2 <Timer0_enuInit>
	        		Timer0_enuAsysncDelay(5);
    2e8e:	85 e0       	ldi	r24, 0x05	; 5
    2e90:	90 e0       	ldi	r25, 0x00	; 0
    2e92:	0e 94 0e 09 	call	0x121c	; 0x121c <Timer0_enuAsysncDelay>
					temp+=5;
    2e96:	80 91 68 01 	lds	r24, 0x0168
    2e9a:	8b 5f       	subi	r24, 0xFB	; 251
    2e9c:	80 93 68 01 	sts	0x0168, r24
					Setting_mode=1;
    2ea0:	81 e0       	ldi	r24, 0x01	; 1
    2ea2:	80 93 7c 01 	sts	0x017C, r24
	        	}
	        }

	        if(Setting_mode==1)
    2ea6:	80 91 7c 01 	lds	r24, 0x017C
    2eaa:	81 30       	cpi	r24, 0x01	; 1
    2eac:	29 f4       	brne	.+10     	; 0x2eb8 <main+0x14e>
	        {
	        	SSD_voidDispalyBlink(temp);
    2eae:	80 91 68 01 	lds	r24, 0x0168
    2eb2:	0e 94 52 12 	call	0x24a4	; 0x24a4 <SSD_voidDispalyBlink>
    2eb6:	06 c0       	rjmp	.+12     	; 0x2ec4 <main+0x15a>
	        }
	        else
	        {
	        	SSD_voidDispaly((u8)current_temp);
    2eb8:	80 91 69 01 	lds	r24, 0x0169
    2ebc:	90 91 6a 01 	lds	r25, 0x016A
    2ec0:	0e 94 28 11 	call	0x2250	; 0x2250 <SSD_voidDispaly>
	        }

	        if(current_temp<temp-5)
    2ec4:	80 91 68 01 	lds	r24, 0x0168
    2ec8:	88 2f       	mov	r24, r24
    2eca:	90 e0       	ldi	r25, 0x00	; 0
    2ecc:	05 97       	sbiw	r24, 0x05	; 5
    2ece:	9c 01       	movw	r18, r24
    2ed0:	80 91 69 01 	lds	r24, 0x0169
    2ed4:	90 91 6a 01 	lds	r25, 0x016A
    2ed8:	82 17       	cp	r24, r18
    2eda:	93 07       	cpc	r25, r19
    2edc:	48 f4       	brcc	.+18     	; 0x2ef0 <main+0x186>
	        {
	        	LED_enuON_Blink(LED_PORT,LED_PIN);
    2ede:	82 e0       	ldi	r24, 0x02	; 2
    2ee0:	62 e0       	ldi	r22, 0x02	; 2
    2ee2:	0e 94 1e 14 	call	0x283c	; 0x283c <LED_enuON_Blink>
	            DC_Motor_ON(CLOCK_WISE,MOTOR_HEATER);
    2ee6:	80 e0       	ldi	r24, 0x00	; 0
    2ee8:	61 e0       	ldi	r22, 0x01	; 1
    2eea:	0e 94 d8 15 	call	0x2bb0	; 0x2bb0 <DC_Motor_ON>
    2eee:	14 c0       	rjmp	.+40     	; 0x2f18 <main+0x1ae>
	        }
	        else if(current_temp>temp+5)
    2ef0:	80 91 68 01 	lds	r24, 0x0168
    2ef4:	88 2f       	mov	r24, r24
    2ef6:	90 e0       	ldi	r25, 0x00	; 0
    2ef8:	05 96       	adiw	r24, 0x05	; 5
    2efa:	9c 01       	movw	r18, r24
    2efc:	80 91 69 01 	lds	r24, 0x0169
    2f00:	90 91 6a 01 	lds	r25, 0x016A
    2f04:	28 17       	cp	r18, r24
    2f06:	39 07       	cpc	r19, r25
    2f08:	38 f4       	brcc	.+14     	; 0x2f18 <main+0x1ae>
	        {
	        	LED_enuOFF(LED_PORT,LED_PIN);
    2f0a:	82 e0       	ldi	r24, 0x02	; 2
    2f0c:	62 e0       	ldi	r22, 0x02	; 2
    2f0e:	0e 94 aa 14 	call	0x2954	; 0x2954 <LED_enuOFF>
	        	DC_Motor_OFF(MOTOR_HEATER);
    2f12:	81 e0       	ldi	r24, 0x01	; 1
    2f14:	0e 94 59 16 	call	0x2cb2	; 0x2cb2 <DC_Motor_OFF>
	        }

	        if(current_temp>temp+5)
    2f18:	80 91 68 01 	lds	r24, 0x0168
    2f1c:	88 2f       	mov	r24, r24
    2f1e:	90 e0       	ldi	r25, 0x00	; 0
    2f20:	05 96       	adiw	r24, 0x05	; 5
    2f22:	9c 01       	movw	r18, r24
    2f24:	80 91 69 01 	lds	r24, 0x0169
    2f28:	90 91 6a 01 	lds	r25, 0x016A
    2f2c:	28 17       	cp	r18, r24
    2f2e:	39 07       	cpc	r19, r25
    2f30:	48 f4       	brcc	.+18     	; 0x2f44 <main+0x1da>
	        {
	        	LED_enuON(LED_PORT,LED_PIN);
    2f32:	82 e0       	ldi	r24, 0x02	; 2
    2f34:	62 e0       	ldi	r22, 0x02	; 2
    2f36:	0e 94 0b 14 	call	0x2816	; 0x2816 <LED_enuON>
	            DC_Motor_ON(CLOCK_WISE,MOTOR_COOLER);
    2f3a:	80 e0       	ldi	r24, 0x00	; 0
    2f3c:	60 e0       	ldi	r22, 0x00	; 0
    2f3e:	0e 94 d8 15 	call	0x2bb0	; 0x2bb0 <DC_Motor_ON>
    2f42:	14 c0       	rjmp	.+40     	; 0x2f6c <main+0x202>
	        }
	        else if(current_temp<temp-5)
    2f44:	80 91 68 01 	lds	r24, 0x0168
    2f48:	88 2f       	mov	r24, r24
    2f4a:	90 e0       	ldi	r25, 0x00	; 0
    2f4c:	05 97       	sbiw	r24, 0x05	; 5
    2f4e:	9c 01       	movw	r18, r24
    2f50:	80 91 69 01 	lds	r24, 0x0169
    2f54:	90 91 6a 01 	lds	r25, 0x016A
    2f58:	82 17       	cp	r24, r18
    2f5a:	93 07       	cpc	r25, r19
    2f5c:	38 f4       	brcc	.+14     	; 0x2f6c <main+0x202>
	        {
	        	LED_enuOFF(LED_PORT,LED_PIN);
    2f5e:	82 e0       	ldi	r24, 0x02	; 2
    2f60:	62 e0       	ldi	r22, 0x02	; 2
    2f62:	0e 94 aa 14 	call	0x2954	; 0x2954 <LED_enuOFF>
	        	DC_Motor_OFF(MOTOR_COOLER);
    2f66:	80 e0       	ldi	r24, 0x00	; 0
    2f68:	0e 94 59 16 	call	0x2cb2	; 0x2cb2 <DC_Motor_OFF>
	        }

	        EEPROM_voidSendDataByte(40,temp);
    2f6c:	20 91 68 01 	lds	r18, 0x0168
    2f70:	88 e2       	ldi	r24, 0x28	; 40
    2f72:	90 e0       	ldi	r25, 0x00	; 0
    2f74:	62 2f       	mov	r22, r18
    2f76:	0e 94 eb 14 	call	0x29d6	; 0x29d6 <EEPROM_voidSendDataByte>
    2f7a:	1d cf       	rjmp	.-454    	; 0x2db6 <main+0x4c>
		}
		else if(ON_OFF_MODE==2)
    2f7c:	80 91 7d 01 	lds	r24, 0x017D
    2f80:	82 30       	cpi	r24, 0x02	; 2
    2f82:	09 f0       	breq	.+2      	; 0x2f86 <main+0x21c>
    2f84:	18 cf       	rjmp	.-464    	; 0x2db6 <main+0x4c>
		{
			Display_Off();
    2f86:	0e 94 f2 13 	call	0x27e4	; 0x27e4 <Display_Off>
			LED_enuOFF(LED_PORT,LED_PIN);
    2f8a:	82 e0       	ldi	r24, 0x02	; 2
    2f8c:	62 e0       	ldi	r22, 0x02	; 2
    2f8e:	0e 94 aa 14 	call	0x2954	; 0x2954 <LED_enuOFF>
			ON_OFF_MODE=0;
    2f92:	10 92 7d 01 	sts	0x017D, r1
    2f96:	0f cf       	rjmp	.-482    	; 0x2db6 <main+0x4c>

00002f98 <__udivmodqi4>:
    2f98:	99 1b       	sub	r25, r25
    2f9a:	79 e0       	ldi	r23, 0x09	; 9
    2f9c:	04 c0       	rjmp	.+8      	; 0x2fa6 <__udivmodqi4_ep>

00002f9e <__udivmodqi4_loop>:
    2f9e:	99 1f       	adc	r25, r25
    2fa0:	96 17       	cp	r25, r22
    2fa2:	08 f0       	brcs	.+2      	; 0x2fa6 <__udivmodqi4_ep>
    2fa4:	96 1b       	sub	r25, r22

00002fa6 <__udivmodqi4_ep>:
    2fa6:	88 1f       	adc	r24, r24
    2fa8:	7a 95       	dec	r23
    2faa:	c9 f7       	brne	.-14     	; 0x2f9e <__udivmodqi4_loop>
    2fac:	80 95       	com	r24
    2fae:	08 95       	ret

00002fb0 <__prologue_saves__>:
    2fb0:	2f 92       	push	r2
    2fb2:	3f 92       	push	r3
    2fb4:	4f 92       	push	r4
    2fb6:	5f 92       	push	r5
    2fb8:	6f 92       	push	r6
    2fba:	7f 92       	push	r7
    2fbc:	8f 92       	push	r8
    2fbe:	9f 92       	push	r9
    2fc0:	af 92       	push	r10
    2fc2:	bf 92       	push	r11
    2fc4:	cf 92       	push	r12
    2fc6:	df 92       	push	r13
    2fc8:	ef 92       	push	r14
    2fca:	ff 92       	push	r15
    2fcc:	0f 93       	push	r16
    2fce:	1f 93       	push	r17
    2fd0:	cf 93       	push	r28
    2fd2:	df 93       	push	r29
    2fd4:	cd b7       	in	r28, 0x3d	; 61
    2fd6:	de b7       	in	r29, 0x3e	; 62
    2fd8:	ca 1b       	sub	r28, r26
    2fda:	db 0b       	sbc	r29, r27
    2fdc:	0f b6       	in	r0, 0x3f	; 63
    2fde:	f8 94       	cli
    2fe0:	de bf       	out	0x3e, r29	; 62
    2fe2:	0f be       	out	0x3f, r0	; 63
    2fe4:	cd bf       	out	0x3d, r28	; 61
    2fe6:	09 94       	ijmp

00002fe8 <__epilogue_restores__>:
    2fe8:	2a 88       	ldd	r2, Y+18	; 0x12
    2fea:	39 88       	ldd	r3, Y+17	; 0x11
    2fec:	48 88       	ldd	r4, Y+16	; 0x10
    2fee:	5f 84       	ldd	r5, Y+15	; 0x0f
    2ff0:	6e 84       	ldd	r6, Y+14	; 0x0e
    2ff2:	7d 84       	ldd	r7, Y+13	; 0x0d
    2ff4:	8c 84       	ldd	r8, Y+12	; 0x0c
    2ff6:	9b 84       	ldd	r9, Y+11	; 0x0b
    2ff8:	aa 84       	ldd	r10, Y+10	; 0x0a
    2ffa:	b9 84       	ldd	r11, Y+9	; 0x09
    2ffc:	c8 84       	ldd	r12, Y+8	; 0x08
    2ffe:	df 80       	ldd	r13, Y+7	; 0x07
    3000:	ee 80       	ldd	r14, Y+6	; 0x06
    3002:	fd 80       	ldd	r15, Y+5	; 0x05
    3004:	0c 81       	ldd	r16, Y+4	; 0x04
    3006:	1b 81       	ldd	r17, Y+3	; 0x03
    3008:	aa 81       	ldd	r26, Y+2	; 0x02
    300a:	b9 81       	ldd	r27, Y+1	; 0x01
    300c:	ce 0f       	add	r28, r30
    300e:	d1 1d       	adc	r29, r1
    3010:	0f b6       	in	r0, 0x3f	; 63
    3012:	f8 94       	cli
    3014:	de bf       	out	0x3e, r29	; 62
    3016:	0f be       	out	0x3f, r0	; 63
    3018:	cd bf       	out	0x3d, r28	; 61
    301a:	ed 01       	movw	r28, r26
    301c:	08 95       	ret

0000301e <ceil>:
    301e:	3b d0       	rcall	.+118    	; 0x3096 <__fp_trunc>
    3020:	80 f0       	brcs	.+32     	; 0x3042 <ceil+0x24>
    3022:	9f 37       	cpi	r25, 0x7F	; 127
    3024:	40 f4       	brcc	.+16     	; 0x3036 <ceil+0x18>
    3026:	91 11       	cpse	r25, r1
    3028:	0e f4       	brtc	.+2      	; 0x302c <ceil+0xe>
    302a:	4d c0       	rjmp	.+154    	; 0x30c6 <__fp_szero>
    302c:	60 e0       	ldi	r22, 0x00	; 0
    302e:	70 e0       	ldi	r23, 0x00	; 0
    3030:	80 e8       	ldi	r24, 0x80	; 128
    3032:	9f e3       	ldi	r25, 0x3F	; 63
    3034:	08 95       	ret
    3036:	26 f0       	brts	.+8      	; 0x3040 <ceil+0x22>
    3038:	1b 16       	cp	r1, r27
    303a:	61 1d       	adc	r22, r1
    303c:	71 1d       	adc	r23, r1
    303e:	81 1d       	adc	r24, r1
    3040:	01 c0       	rjmp	.+2      	; 0x3044 <__fp_mintl>
    3042:	1b c0       	rjmp	.+54     	; 0x307a <__fp_mpack>

00003044 <__fp_mintl>:
    3044:	88 23       	and	r24, r24
    3046:	71 f4       	brne	.+28     	; 0x3064 <__fp_mintl+0x20>
    3048:	77 23       	and	r23, r23
    304a:	21 f0       	breq	.+8      	; 0x3054 <__fp_mintl+0x10>
    304c:	98 50       	subi	r25, 0x08	; 8
    304e:	87 2b       	or	r24, r23
    3050:	76 2f       	mov	r23, r22
    3052:	07 c0       	rjmp	.+14     	; 0x3062 <__fp_mintl+0x1e>
    3054:	66 23       	and	r22, r22
    3056:	11 f4       	brne	.+4      	; 0x305c <__fp_mintl+0x18>
    3058:	99 27       	eor	r25, r25
    305a:	0d c0       	rjmp	.+26     	; 0x3076 <__fp_mintl+0x32>
    305c:	90 51       	subi	r25, 0x10	; 16
    305e:	86 2b       	or	r24, r22
    3060:	70 e0       	ldi	r23, 0x00	; 0
    3062:	60 e0       	ldi	r22, 0x00	; 0
    3064:	2a f0       	brmi	.+10     	; 0x3070 <__fp_mintl+0x2c>
    3066:	9a 95       	dec	r25
    3068:	66 0f       	add	r22, r22
    306a:	77 1f       	adc	r23, r23
    306c:	88 1f       	adc	r24, r24
    306e:	da f7       	brpl	.-10     	; 0x3066 <__fp_mintl+0x22>
    3070:	88 0f       	add	r24, r24
    3072:	96 95       	lsr	r25
    3074:	87 95       	ror	r24
    3076:	97 f9       	bld	r25, 7
    3078:	08 95       	ret

0000307a <__fp_mpack>:
    307a:	9f 3f       	cpi	r25, 0xFF	; 255
    307c:	31 f0       	breq	.+12     	; 0x308a <__fp_mpack_finite+0xc>

0000307e <__fp_mpack_finite>:
    307e:	91 50       	subi	r25, 0x01	; 1
    3080:	20 f4       	brcc	.+8      	; 0x308a <__fp_mpack_finite+0xc>
    3082:	87 95       	ror	r24
    3084:	77 95       	ror	r23
    3086:	67 95       	ror	r22
    3088:	b7 95       	ror	r27
    308a:	88 0f       	add	r24, r24
    308c:	91 1d       	adc	r25, r1
    308e:	96 95       	lsr	r25
    3090:	87 95       	ror	r24
    3092:	97 f9       	bld	r25, 7
    3094:	08 95       	ret

00003096 <__fp_trunc>:
    3096:	25 d0       	rcall	.+74     	; 0x30e2 <__fp_splitA>
    3098:	a0 f0       	brcs	.+40     	; 0x30c2 <__fp_trunc+0x2c>
    309a:	be e7       	ldi	r27, 0x7E	; 126
    309c:	b9 17       	cp	r27, r25
    309e:	88 f4       	brcc	.+34     	; 0x30c2 <__fp_trunc+0x2c>
    30a0:	bb 27       	eor	r27, r27
    30a2:	9f 38       	cpi	r25, 0x8F	; 143
    30a4:	60 f4       	brcc	.+24     	; 0x30be <__fp_trunc+0x28>
    30a6:	16 16       	cp	r1, r22
    30a8:	b1 1d       	adc	r27, r1
    30aa:	67 2f       	mov	r22, r23
    30ac:	78 2f       	mov	r23, r24
    30ae:	88 27       	eor	r24, r24
    30b0:	98 5f       	subi	r25, 0xF8	; 248
    30b2:	f7 cf       	rjmp	.-18     	; 0x30a2 <__fp_trunc+0xc>
    30b4:	86 95       	lsr	r24
    30b6:	77 95       	ror	r23
    30b8:	67 95       	ror	r22
    30ba:	b1 1d       	adc	r27, r1
    30bc:	93 95       	inc	r25
    30be:	96 39       	cpi	r25, 0x96	; 150
    30c0:	c8 f3       	brcs	.-14     	; 0x30b4 <__fp_trunc+0x1e>
    30c2:	08 95       	ret

000030c4 <__fp_zero>:
    30c4:	e8 94       	clt

000030c6 <__fp_szero>:
    30c6:	bb 27       	eor	r27, r27
    30c8:	66 27       	eor	r22, r22
    30ca:	77 27       	eor	r23, r23
    30cc:	cb 01       	movw	r24, r22
    30ce:	97 f9       	bld	r25, 7
    30d0:	08 95       	ret

000030d2 <__fp_split3>:
    30d2:	57 fd       	sbrc	r21, 7
    30d4:	90 58       	subi	r25, 0x80	; 128
    30d6:	44 0f       	add	r20, r20
    30d8:	55 1f       	adc	r21, r21
    30da:	59 f0       	breq	.+22     	; 0x30f2 <__fp_splitA+0x10>
    30dc:	5f 3f       	cpi	r21, 0xFF	; 255
    30de:	71 f0       	breq	.+28     	; 0x30fc <__fp_splitA+0x1a>
    30e0:	47 95       	ror	r20

000030e2 <__fp_splitA>:
    30e2:	88 0f       	add	r24, r24
    30e4:	97 fb       	bst	r25, 7
    30e6:	99 1f       	adc	r25, r25
    30e8:	61 f0       	breq	.+24     	; 0x3102 <__fp_splitA+0x20>
    30ea:	9f 3f       	cpi	r25, 0xFF	; 255
    30ec:	79 f0       	breq	.+30     	; 0x310c <__fp_splitA+0x2a>
    30ee:	87 95       	ror	r24
    30f0:	08 95       	ret
    30f2:	12 16       	cp	r1, r18
    30f4:	13 06       	cpc	r1, r19
    30f6:	14 06       	cpc	r1, r20
    30f8:	55 1f       	adc	r21, r21
    30fa:	f2 cf       	rjmp	.-28     	; 0x30e0 <__fp_split3+0xe>
    30fc:	46 95       	lsr	r20
    30fe:	f1 df       	rcall	.-30     	; 0x30e2 <__fp_splitA>
    3100:	08 c0       	rjmp	.+16     	; 0x3112 <__fp_splitA+0x30>
    3102:	16 16       	cp	r1, r22
    3104:	17 06       	cpc	r1, r23
    3106:	18 06       	cpc	r1, r24
    3108:	99 1f       	adc	r25, r25
    310a:	f1 cf       	rjmp	.-30     	; 0x30ee <__fp_splitA+0xc>
    310c:	86 95       	lsr	r24
    310e:	71 05       	cpc	r23, r1
    3110:	61 05       	cpc	r22, r1
    3112:	08 94       	sec
    3114:	08 95       	ret

00003116 <_exit>:
    3116:	f8 94       	cli

00003118 <__stop_program>:
    3118:	ff cf       	rjmp	.-2      	; 0x3118 <__stop_program>
